
_programs/RTOSI_TP/out/RTOSI_TP.elf:     file format elf32-littlearm
_programs/RTOSI_TP/out/RTOSI_TP.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000d25

Program Header:
0x70000001 off    0x00016414 vaddr 0x1a006414 paddr 0x1a006414 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002c64 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000641c memsz 0x0000641c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00641c align 2**16
         filesz 0x00000148 memsz 0x00000148 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006410  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  10000000  1a00641c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020148  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020148  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020148  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020148  2**2
                  CONTENTS
  6 .bss          00002b1c  10000148  10000148  00000148  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020148  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020148  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020148  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020148  2**2
                  CONTENTS
 11 .init_array   00000004  1a006410  1a006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a006414  1a006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020148  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020148  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020148  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020148  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020148  2**2
                  CONTENTS
 18 .noinit       00000000  10002c64  10002c64  00020148  2**2
                  CONTENTS
 19 .debug_info   0003b20f  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00007448  00000000  00000000  0005b357  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000fbd4  00000000  00000000  0006279f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001290  00000000  00000000  00072373  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000014b8  00000000  00000000  00073603  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00011fc2  00000000  00000000  00074abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00021e85  00000000  00000000  00086a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00031883  00000000  00000000  000a8902  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000da185  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000da1ed  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000037c4  00000000  00000000  000da220  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000148 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a006410 l    d  .init_array	00000000 .init_array
1a006414 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c64 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003e78 l     F .text	000000c8 uartProcessIRQ
10002b84 l     O .bss	00000004 rxIsrCallbackUART0
10002b88 l     O .bss	00000004 rxIsrCallbackUART0Params
10002b8c l     O .bss	00000004 rxIsrCallbackUART2
10002b90 l     O .bss	00000004 rxIsrCallbackUART2Params
10002b94 l     O .bss	00000004 rxIsrCallbackUART3
10002b98 l     O .bss	00000004 rxIsrCallbackUART3Params
10002b9c l     O .bss	00000004 txIsrCallbackUART0
10002ba0 l     O .bss	00000004 txIsrCallbackUART0Params
10002ba4 l     O .bss	00000004 txIsrCallbackUART2
10002ba8 l     O .bss	00000004 txIsrCallbackUART2Params
10002bac l     O .bss	00000004 txIsrCallbackUART3
10002bb0 l     O .bss	00000004 txIsrCallbackUART3Params
1a006244 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 uart_driver.c
00000000 l    df *ABS*	00000000 irq_button_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 userTasks.c
00000000 l    df *ABS*	00000000 system.c
10000148 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_1.c
10000150 l     O .bss	00002000 ucHeap
1000014c l     O .bss	00000004 pucAlignedHeap.11524
10002150 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a000efe l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000f10 l     F .text	0000001e prvIsQueueFull
1a000f2e l     F .text	0000001a prvIsQueueEmpty
1a000f48 l     F .text	00000076 prvCopyDataToQueue
1a000fbe l     F .text	00000024 prvCopyDataFromQueue
1a000fe2 l     F .text	0000006e prvUnlockQueue
1a0010d4 l     F .text	00000022 prvInitialiseNewQueue
1a001358 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002154 l     O .bss	00000168 uxIdleTaskStack.10813
100022bc l     O .bss	000005a0 uxTimerTaskStack.10820
1000285c l     O .bss	00000060 xIdleTaskTCB.10812
100028bc l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001a50 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001a7c l     F .text	00000090 prvInitialiseNewTask
1a001b0c l     F .text	00000068 prvInitialiseTaskLists
1a001b74 l     F .text	000000ac prvAddNewTaskToReadyList
1a001c20 l     F .text	00000038 prvDeleteTCB
1a001c58 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001ca4 l     F .text	00000028 prvIdleTask
1a001ccc l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002920 l     O .bss	00000004 pxDelayedTaskList
10002924 l     O .bss	00000004 pxOverflowDelayedTaskList
10002928 l     O .bss	0000008c pxReadyTasksLists
100029b4 l     O .bss	00000004 uxCurrentNumberOfTasks
100029b8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100029bc l     O .bss	00000004 uxPendedTicks
100029c0 l     O .bss	00000004 uxSchedulerSuspended
100029c4 l     O .bss	00000004 uxTaskNumber
100029c8 l     O .bss	00000004 uxTopReadyPriority
100029cc l     O .bss	00000014 xDelayedTaskList1
100029e0 l     O .bss	00000014 xDelayedTaskList2
100029f4 l     O .bss	00000004 xNextTaskUnblockTime
100029f8 l     O .bss	00000004 xNumOfOverflows
100029fc l     O .bss	00000014 xPendingReadyList
10002a10 l     O .bss	00000004 xSchedulerRunning
10002a14 l     O .bss	00000014 xSuspendedTaskList
10002a28 l     O .bss	00000014 xTasksWaitingTermination
10002a3c l     O .bss	00000004 xTickCount
10002a40 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002620 l     F .text	00000020 prvGetNextExpireTime
1a002640 l     F .text	00000048 prvInsertTimerInActiveList
1a002688 l     F .text	00000070 prvCheckForValidListAndQueue
1a002a3c l     F .text	00000016 prvTimerTask
1a0027c8 l     F .text	00000078 prvSwitchTimerLists
1a002840 l     F .text	0000002c prvSampleTimeNow
1a00286c l     F .text	00000060 prvProcessExpiredTimer
1a0028cc l     F .text	00000074 prvProcessTimerOrBlockTask
1a002940 l     F .text	000000fc prvProcessReceivedCommands
10002a44 l     O .bss	00000004 pxCurrentTimerList
10002a48 l     O .bss	00000004 pxOverflowTimerList
10002a4c l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
10002aec l     O .bss	00000014 xActiveTimerList1
10002b00 l     O .bss	00000014 xActiveTimerList2
10002b14 l     O .bss	00000004 xLastTime.11863
10002b18 l     O .bss	00000050 xStaticTimerQueue.11913
10002b68 l     O .bss	00000004 xTimerQueue
10002b6c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002a54 l     F .text	00000040 prvTaskExitError
1a002a94 l     F .text	00000022 prvPortStartFirstTask
1a002abc l     F .text	0000000e vPortEnableVFP
1a002b20 l       .text	00000000 pxCurrentTCBConst2
1a002c00 l       .text	00000000 pxCurrentTCBConst
10002b70 l     O .bss	00000001 ucMaxSysCallPriority
10002b74 l     O .bss	00000004 ulMaxPRIGROUPValue
10000054 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002df4 l     F .text	00000044 Board_LED_Init
1a002e38 l     F .text	00000040 Board_TEC_Init
1a002e78 l     F .text	00000040 Board_GPIO_Init
1a002eb8 l     F .text	00000030 Board_ADC_Init
1a002ee8 l     F .text	00000038 Board_SPI_Init
1a002f20 l     F .text	00000024 Board_I2C_Init
1a0060d0 l     O .text	00000008 GpioButtons
1a0060d8 l     O .text	0000000c GpioLeds
1a0060e4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0060fc l     O .text	00000004 InitClkStates
1a006100 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003094 l     F .text	0000002c Chip_UART_GetIndex
1a006174 l     O .text	00000008 UART_BClock
1a00617c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003230 l     F .text	00000014 Chip_ADC_GetClockIndex
1a003244 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0032f8 l     F .text	000000a0 pll_calc_divs
1a003398 l     F .text	0000010c pll_get_frac
1a0034a4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003718 l     F .text	00000022 Chip_Clock_GetDivRate
10002b7c l     O .bss	00000008 audio_usb_pll_freq
1a006190 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0061fc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003b24 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003b38 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000058 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000090 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a004288 l     F .text	00000030 i2cHardwareInit
1a0042b8 l     F .text	00000040 i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00431e l     F .text	00000002 errorOcurred
1a004320 l     F .text	00000002 doNothing
100000a0 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00442c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002bb4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_lcd.c
1a004818 l     F .text	00000038 pcf8574TGpioPortWrite
1a004850 l     F .text	00000028 pcf8574TGpioWrite
1a004878 l     F .text	00000008 lcdPinSet
1a004880 l     F .text	0000002e lcdSendNibble
1a0048ae l     F .text	0000001c lcdEnablePulse
1a0048cc l     F .text	0000002c pcf8574TGpioPortInit
1a0048f8 l     F .text	00000018 pcf8574TInit
10002bb8 l     O .bss	0000000a lcd
10002bc2 l     O .bss	00000001 pcf8574TGpioPortDirections
10002bc3 l     O .bss	00000001 pcf8574TGpioPortValue
100000e0 l     O .data	00000001 pcf8574TI2cAddress
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004f38 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0052ec l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
100000e8 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a006414 l       .init_array	00000000 __init_array_end
1a006410 l       .bss_RAM5	00000000 __preinit_array_end
1a006410 l       .init_array	00000000 __init_array_start
1a006410 l       .bss_RAM5	00000000 __preinit_array_start
1a00353c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000dc4 g     F .text	00000012 _isatty_r
1a003af0 g     F .text	0000000e Chip_I2CM_Xfer
1a0058d4 g     F .text	000000dc _puts_r
10002bcc g     O .bss	00000018 tec_config
1a0043a4 g     F .text	00000044 TIMER2_IRQHandler
1a0040bc g     F .text	00000014 uartRxRead
1a0042f8 g     F .text	0000000e i2cInit
1a000dd6 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002b68 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004160 g     F .text	0000001e uartReadByte
1a0058a4 g     F .text	00000030 printf
1a002fda g     F .text	00000008 __stdio_init
10002c58 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a0047d8 g     F .text	0000003e delayRead
1a005a1a g     F .text	00000024 __sseek
1a004fe8 g     F .text	00000070 __sinit
1a005a68 g     F .text	000000a4 __swbuf_r
1a000564 g     F .text	0000003c enable_buttons_interrupt
1a00017a  w    F .text	00000002 HardFault_Handler
1a0018dc g     F .text	00000052 vQueueWaitForMessageRestricted
1a003bf8 g     F .text	00000120 handleMasterXferState
1a004f8c g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0032ea g     F .text	0000000c Chip_ADC_SetResolution
1a005d5c g     F .text	0000000c __malloc_unlock
1a002c04 g     F .text	0000002c SysTick_Handler
1a003114 g     F .text	00000040 Chip_UART_SetBaud
10002c59 g     O .bss	00000001 __lock___arc4random_mutex
1a000d20  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002f7c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002ba0 g     F .text	00000064 PendSV_Handler
1a001386 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a00641c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0007a0 g     F .text	00000054 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1000291c g     O .bss	00000004 pxCurrentTCB
1a000dba g     F .text	0000000a _fstat_r
53ff6b6a g       *ABS*	00000000 __valid_user_code_checksum
1a00641c g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a000828 g     F .text	000000fc tecla_task
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a00230c g     F .text	00000018 vTaskInternalSetTimeOutState
1a00417e g     F .text	00000080 waitForReceiveStringOrTimeout
1a0043e8 g     F .text	00000044 TIMER3_IRQHandler
1a0037ba g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
10000000 g     O .data	0000000b lcd_text_t
1a002c68 g     F .text	00000110 xPortStartScheduler
1a00516e g     F .text	0000001c memcpy
1a002218 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004f80 g     F .text	0000000c _cleanup_r
1a002c30  w    F .text	00000038 vPortSetupTimerInterrupt
1a003da4 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a004ab0 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c64 g       .noinit	00000000 _noinit
1a0059b0 g     F .text	00000010 puts
1000000c g     O .data	0000001e rele_code_t
1a000ee8 g     F .text	00000016 vPortFree
1a004252 g     F .text	00000016 uartWriteString
10002be4 g     O .bss	00000001 tec_save
10002c50 g     O .bss	00000004 SystemCoreClock
1a0030c0 g     F .text	00000054 Chip_UART_Init
1a001664 g     F .text	000001a4 xQueueSemaphoreTake
1a000cd8 g     F .text	00000048 system_task
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002d78 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003838 g     F .text	0000004c Chip_Clock_GetRate
1a00194a g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00301c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003d74 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a004ae0 g     F .text	000002d0 .hidden __udivmoddi4
1a000e58 g     F .text	00000020 _sbrk_r
1a0060cc g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000de0 g     F .text	0000004e _read_r
1a001944 g     F .text	00000006 vListInitialiseItem
1a000650 g     F .text	00000054 GPIO1_IRQHandler
1a001508 g     F .text	0000015c xQueueReceive
10002c10 g     O .bss	00000040 xQueueRegistry
1a0049da g     F .text	00000014 lcdCursorSet
1a0019d4 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a00408c g     F .text	00000018 uartRxReady
1a006414 g       .ARM.exidx	00000000 __exidx_start
10002c5a g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
10002c5b g     O .bss	00000001 __lock___sinit_recursive_mutex
1a0063d8 g     O .text	00000004 _global_impure_ptr
10002be8 g     O .bss	00000014 uart_struct
1a005120 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000e78 g     F .text	00000070 pvPortMalloc
1a002f98 g     F .text	00000030 Board_Init
10002bfc g     O .bss	00000004 led_queue
1a000dae  w    F .text	00000002 _init
1a00192e g     F .text	00000016 vListInitialise
1a0004ac g     F .text	000000b8 IRQ_handler_Init
1a000114 g       .text	00000000 __data_section_table
1a001ee0 g     F .text	0000000c xTaskGetTickCount
1a0011d8 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c64 g       .bss	00000000 _ebss
1a004324 g     F .text	00000040 TIMER0_IRQHandler
1a000d24 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003afe g     F .text	00000024 Chip_I2CM_XferBlocking
1a003d3c g     F .text	00000038 Chip_I2C_SetClockRate
1a002490 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0034f0 g     F .text	0000004c Chip_Clock_EnableCrystal
10002c5c g     O .bss	00000001 __lock___malloc_recursive_mutex
1a0003f8 g     F .text	00000030 ag9_attach
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002280 g     F .text	0000008c xTaskRemoveFromEventList
1a001a18  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a000c38 g     F .text	000000a0 led_task
1a005a46 g     F .text	00000020 strcat
10002c00 g     O .bss	00000008 system_access
1a004364 g     F .text	00000040 TIMER1_IRQHandler
1a006378 g     O .text	00000020 __sf_fake_stderr
1a003d18 g     F .text	00000024 Chip_I2C_Init
1a00516c g     F .text	00000002 __retarget_lock_release_recursive
1a004268 g     F .text	0000000a UART2_IRQHandler
1a0036ac g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00628c g     O .text	000000e6 gpioPinsInit
1a0005a0 g     F .text	0000005c disable_buttons_interrupt
1a003f40 g     F .text	00000090 uartInterrupt
1a0019ec  w    F .text	0000002c vAssertCalled
1a004238 g     F .text	0000001a uartWriteByte
1a002604 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003b50 g     F .text	00000012 Chip_SSP_SetClockRate
1a00531a g     F .text	00000024 __sfputs_r
1a0006a4 g     F .text	00000054 GPIO2_IRQHandler
1a004fb8 g     F .text	0000000c __sfp_lock_acquire
1a005cb0 g     F .text	00000000 memchr
1a002324 g     F .text	00000084 xTaskCheckForTimeOut
1a00519c g     F .text	0000009c _free_r
1a003794 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0023d4 g     F .text	000000bc xTaskPriorityInherit
1a004a04 g     F .text	00000010 lcdClearAndHome
1a004a14 g     F .text	0000009c lcdInit
10000148 g       .bss	00000000 _bss
1a0032b8 g     F .text	00000032 Chip_ADC_SetSampleRate
10002b78 g     O .bss	00000004 freeRtosInterruptCallback
1a001ed0 g     F .text	00000010 vTaskSuspendAll
1a0047b8 g     F .text	00000020 delayInit
10002c08 g     O .bss	00000004 lcd_queue
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003b62 g     F .text	0000003e Chip_SSP_SetBitRate
1a001994 g     F .text	00000026 uxListRemove
1a003b22 g     F .text	00000002 Chip_GPIO_Init
1a0060f8 g     O .text	00000004 OscRateIn
1a004700 g     F .text	0000005a delayInaccurateMs
1a0040e4 g     F .text	0000007c uartInit
1a001d64 g     F .text	00000072 xTaskCreateStatic
10002c64 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00214c g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a004948 g     F .text	00000030 lcdData
1a0010f6 g     F .text	00000092 xQueueGenericCreateStatic
1a002248 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000db0 g     F .text	0000000a _close_r
1a004460 g     F .text	000001ac gpioInit
1a0019bc g     F .text	00000018 vApplicationGetIdleTaskMemory
1a00275c g     F .text	0000006c xTimerGenericCommand
1a005b0c g     F .text	000000dc __swsetup_r
1a001a34  w    F .text	0000001c vApplicationStackOverflowHook
1a004db0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a005058 g     F .text	0000008c __sfp
1a004910 g     F .text	00000038 lcdCommand
1a000428 g     F .text	00000084 uart_cofig
1a004fdc g     F .text	0000000c __sinit_lock_release
1a0059c0 g     F .text	00000022 __sread
1a004678 g     F .text	0000001c USB0_IRQHandler
1a000398 g     F .text	00000030 ag9_test
1a0006f8 g     F .text	00000054 GPIO3_IRQHandler
1a005d50 g     F .text	0000000c __malloc_lock
1a002f68 g     F .text	00000014 Board_UARTPutChar
1a003dd4 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a004ec0 g     F .text	00000078 _fflush_r
1a006398 g     O .text	00000020 __sf_fake_stdin
1a003558 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00516a g     F .text	00000002 __retarget_lock_acquire_recursive
1a00518a g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0007f4 g     F .text	00000034 main
1a005168 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001960 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002b00 g     F .text	00000024 SVC_Handler
1a005a3e g     F .text	00000008 __sclose
1a0026f8 g     F .text	00000064 xTimerCreateTimerTask
1a005238 g     F .text	000000b4 _malloc_r
1a0040a4 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0037c8 g     F .text	0000003c Chip_Clock_EnableOpts
1a002fd2 g     F .text	00000008 __stdio_getchar
1a001808 g     F .text	000000ac xQueueReceiveFromISR
1a001188 g     F .text	0000004e xQueueGenericCreate
1a003574 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00362c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003e24 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00460c g     F .text	0000006a gpioWrite
1a000dac  w    F .text	00000002 _fini
1a0058a4 g     F .text	00000030 iprintf
1a002004 g     F .text	000000fc xTaskResumeAll
1a001e3c g     F .text	00000094 vTaskStartScheduler
1a003278 g     F .text	00000040 Chip_ADC_Init
1a000300 g     F .text	00000098 functionRX
10002c54 g     O .bss	00000004 g_pUsbApi
1a002fe4 g     F .text	00000038 Board_SetupMuxing
1a004978 g     F .text	00000050 lcdGoToXY
1a003154 g     F .text	000000dc Chip_UART_SetBaudFDR
1a00427c g     F .text	0000000a tickRead
1a000e2e g     F .text	00000028 _write_r
10000098 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a005590 g     F .text	000000ea _printf_common
1a000b90 g     F .text	000000a8 system_status
100000e4 g     O .data	00000004 _impure_ptr
1a004db4 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0041fe g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a0049ee g     F .text	00000016 lcdSendStringRaw
1a0040d0 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a0039f0 g     F .text	00000100 Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a0023a8 g     F .text	0000000c vTaskMissedYield
10002c64 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003ba0 g     F .text	00000038 Chip_SSP_Init
1a0009d4 g     F .text	0000003c first_init
1a003dec g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0018b4 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001eec g     F .text	00000118 xTaskIncrementTick
1a005be8 g     F .text	00000048 __swhatbuf_r
1a002dd4 g     F .text	00000020 DAC_IRQHandler
1a004306 g     F .text	00000018 i2cWrite
1a002f44 g     F .text	00000024 Board_Debug_Init
1a002fc8 g     F .text	0000000a __stdio_putchar
1a001050 g     F .text	00000084 xQueueGenericReset
10000148 g       .data	00000000 _edata
1a003bd8 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10002c5d g     O .bss	00000001 __lock___at_quick_exit_mutex
1a001dd6 g     F .text	00000066 xTaskCreate
1a0003c8 g     F .text	00000030 ag9_syntax
1a003898 g     F .text	00000158 Chip_SetupCoreClock
1a0059e2 g     F .text	00000038 __swrite
1a0005fc g     F .text	00000054 GPIO0_IRQHandler
1a005340 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a0050e4 g     F .text	0000003c _fwalk_reent
1a003884 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a002100 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a004fc4 g     F .text	0000000c __sfp_lock_release
1a0049c8 g     F .text	00000012 lcdClear
1a0063b8 g     O .text	00000020 __sf_fake_stdout
1a0023b4 g     F .text	00000020 xTaskGetSchedulerState
1a00475a g     F .text	0000005c delayInaccurateUs
1a002544 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a004db0  w    F .text	00000002 .hidden __aeabi_idiv0
1a003fd0 g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
10002c5e g     O .bss	00000001 __lock___dd_hash_mutex
1a005c30 g     F .text	00000080 __smakebuf_r
10002c5f g     O .bss	00000001 __lock___tz_mutex
1a002ad0 g     F .text	0000002c pxPortInitialiseStack
1a00567c g     F .text	00000228 _printf_i
1a003804 g     F .text	00000034 Chip_Clock_Enable
1a004272 g     F .text	0000000a UART3_IRQHandler
1a000924 g     F .text	000000b0 lcd_task
10002bc8 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a004694 g     F .text	0000006c boardInit
1a002b24 g     F .text	00000044 vPortEnterCritical
10002c0c g     O .bss	00000001 flank_capture
1a000a10 g     F .text	00000180 _task_init
10002bc4 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a005340 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1000002c g     O .data	00000028 rele_state_t
1a001370 g     F .text	00000016 xQueueCreateMutex
1a00373c g     F .text	00000058 Chip_Clock_SetBaseClock
1a003e5c g     F .text	0000001c cyclesCounterInit
1a00074c g     F .text	00000054 GPIO4_IRQHandler
10002c60 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a001454 g     F .text	000000b2 xQueueGiveFromISR
1a004fd0 g     F .text	0000000c __sinit_lock_acquire
1a003088 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 25 0d 00 1a 79 01 00 1a 7b 01 00 1a     ....%...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 6a 6b ff 53     }...........jk.S
	...
1a00002c:	01 2b 00 1a 85 01 00 1a 00 00 00 00 a1 2b 00 1a     .+...........+..
1a00003c:	05 2c 00 1a                                         .,..

1a000040 <g_pfnVendorVectors>:
1a000040:	d5 2d 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .-..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	79 46 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     yF..............
1a000070:	25 43 00 1a 65 43 00 1a a5 43 00 1a e9 43 00 1a     %C..eC...C...C..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 69 42 00 1a 73 42 00 1a     ........iB..sB..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	fd 05 00 1a 51 06 00 1a a5 06 00 1a f9 06 00 1a     ....Q...........
1a0000d0:	4d 07 00 1a a1 07 00 1a bb 01 00 1a bb 01 00 1a     M...............
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00641c 	.word	0x1a00641c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000148 	.word	0x00000148
1a000120:	1a00641c 	.word	0x1a00641c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00641c 	.word	0x1a00641c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00641c 	.word	0x1a00641c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00641c 	.word	0x1a00641c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000148 	.word	0x10000148
1a000154:	00002b1c 	.word	0x00002b1c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 fe5a 	bl	1a003e78 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <functionRX>:
   uartWriteString( uart, "AT+CGATT?\r\n" );
   return waitForReceiveStringOrTimeoutBlocking( uart, "OK\r\n", strlen("OK\r\n"), 1000 );
}

void functionRX( void *param )
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b082      	sub	sp, #8
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000304:	2100      	movs	r1, #0
1a000306:	9101      	str	r1, [sp, #4]

	/* Se abre seccion critica para lectura de bytes recibidos */
	xSemaphoreTakeFromISR( uart_struct.uart_mutex, &xHigherPriorityTaskWoken );
1a000308:	4c1e      	ldr	r4, [pc, #120]	; (1a000384 <functionRX+0x84>)
1a00030a:	aa01      	add	r2, sp, #4
1a00030c:	68a0      	ldr	r0, [r4, #8]
1a00030e:	f001 fa7b 	bl	1a001808 <xQueueReceiveFromISR>

	char c = uartRxRead( uart_struct.uart_value );
1a000312:	7820      	ldrb	r0, [r4, #0]
1a000314:	f003 fed2 	bl	1a0040bc <uartRxRead>

	/* Verifica que hay un llamado entrante */
	if(c == uart_struct.byte_ring){
1a000318:	7c23      	ldrb	r3, [r4, #16]
1a00031a:	4283      	cmp	r3, r0
1a00031c:	d010      	beq.n	1a000340 <functionRX+0x40>
			//xQueueSendFromISR(lcd_queue, &tec_save, &xHigherPriorityTaskWoken);
			xSemaphoreGiveFromISR( system_access.sem_system, &xHigherPriorityTaskWoken);
		}
	}

	xSemaphoreGiveFromISR( uart_struct.uart_mutex, &xHigherPriorityTaskWoken);
1a00031e:	a901      	add	r1, sp, #4
1a000320:	4b18      	ldr	r3, [pc, #96]	; (1a000384 <functionRX+0x84>)
1a000322:	6898      	ldr	r0, [r3, #8]
1a000324:	f001 f896 	bl	1a001454 <xQueueGiveFromISR>
	/* Se cierra seccion critica para lectura de bytes recibidos */

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000328:	9b01      	ldr	r3, [sp, #4]
1a00032a:	b13b      	cbz	r3, 1a00033c <functionRX+0x3c>
1a00032c:	4b16      	ldr	r3, [pc, #88]	; (1a000388 <functionRX+0x88>)
1a00032e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000332:	601a      	str	r2, [r3, #0]
1a000334:	f3bf 8f4f 	dsb	sy
1a000338:	f3bf 8f6f 	isb	sy
}
1a00033c:	b002      	add	sp, #8
1a00033e:	bd10      	pop	{r4, pc}
		if(c == 'R')
1a000340:	2852      	cmp	r0, #82	; 0x52
1a000342:	d013      	beq.n	1a00036c <functionRX+0x6c>
		if(c == 'I')
1a000344:	2849      	cmp	r0, #73	; 0x49
1a000346:	d014      	beq.n	1a000372 <functionRX+0x72>
		if(c == 'N')
1a000348:	284e      	cmp	r0, #78	; 0x4e
1a00034a:	d016      	beq.n	1a00037a <functionRX+0x7a>
		if(c == 'G'){
1a00034c:	2847      	cmp	r0, #71	; 0x47
1a00034e:	d1e6      	bne.n	1a00031e <functionRX+0x1e>
			uart_struct.byte_ring = '\0';
1a000350:	2300      	movs	r3, #0
1a000352:	4a0c      	ldr	r2, [pc, #48]	; (1a000384 <functionRX+0x84>)
1a000354:	7413      	strb	r3, [r2, #16]
			tec_save.str_button = Tecla1;
1a000356:	4a0d      	ldr	r2, [pc, #52]	; (1a00038c <functionRX+0x8c>)
1a000358:	7013      	strb	r3, [r2, #0]
			printf( "Sistema activado\r\n" );
1a00035a:	480d      	ldr	r0, [pc, #52]	; (1a000390 <functionRX+0x90>)
1a00035c:	f005 fb28 	bl	1a0059b0 <puts>
			xSemaphoreGiveFromISR( system_access.sem_system, &xHigherPriorityTaskWoken);
1a000360:	a901      	add	r1, sp, #4
1a000362:	4b0c      	ldr	r3, [pc, #48]	; (1a000394 <functionRX+0x94>)
1a000364:	6818      	ldr	r0, [r3, #0]
1a000366:	f001 f875 	bl	1a001454 <xQueueGiveFromISR>
1a00036a:	e7d8      	b.n	1a00031e <functionRX+0x1e>
			uart_struct.byte_ring = 'I';
1a00036c:	2249      	movs	r2, #73	; 0x49
1a00036e:	7422      	strb	r2, [r4, #16]
1a000370:	e7e8      	b.n	1a000344 <functionRX+0x44>
			uart_struct.byte_ring = 'N';
1a000372:	4b04      	ldr	r3, [pc, #16]	; (1a000384 <functionRX+0x84>)
1a000374:	224e      	movs	r2, #78	; 0x4e
1a000376:	741a      	strb	r2, [r3, #16]
1a000378:	e7e6      	b.n	1a000348 <functionRX+0x48>
			uart_struct.byte_ring = 'G';
1a00037a:	4b02      	ldr	r3, [pc, #8]	; (1a000384 <functionRX+0x84>)
1a00037c:	2247      	movs	r2, #71	; 0x47
1a00037e:	741a      	strb	r2, [r3, #16]
1a000380:	e7e4      	b.n	1a00034c <functionRX+0x4c>
1a000382:	bf00      	nop
1a000384:	10002be8 	.word	0x10002be8
1a000388:	e000ed04 	.word	0xe000ed04
1a00038c:	10002be4 	.word	0x10002be4
1a000390:	1a005d90 	.word	0x1a005d90
1a000394:	10002c00 	.word	0x10002c00

1a000398 <ag9_test>:
{
1a000398:	b510      	push	{r4, lr}
1a00039a:	b082      	sub	sp, #8
   uartWriteString( uart, "AT\r\n" );
1a00039c:	b2c4      	uxtb	r4, r0
1a00039e:	4908      	ldr	r1, [pc, #32]	; (1a0003c0 <ag9_test+0x28>)
1a0003a0:	4620      	mov	r0, r4
1a0003a2:	f003 ff56 	bl	1a004252 <uartWriteString>
   return waitForReceiveStringOrTimeoutBlocking( uart, "OK\r\n", strlen("OK\r\n"), 1000 );
1a0003a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0003aa:	2300      	movs	r3, #0
1a0003ac:	e9cd 2300 	strd	r2, r3, [sp]
1a0003b0:	2204      	movs	r2, #4
1a0003b2:	4904      	ldr	r1, [pc, #16]	; (1a0003c4 <ag9_test+0x2c>)
1a0003b4:	4620      	mov	r0, r4
1a0003b6:	f003 ff22 	bl	1a0041fe <waitForReceiveStringOrTimeoutBlocking>
}
1a0003ba:	b002      	add	sp, #8
1a0003bc:	bd10      	pop	{r4, pc}
1a0003be:	bf00      	nop
1a0003c0:	1a005d80 	.word	0x1a005d80
1a0003c4:	1a005d88 	.word	0x1a005d88

1a0003c8 <ag9_syntax>:
{
1a0003c8:	b510      	push	{r4, lr}
1a0003ca:	b082      	sub	sp, #8
   uartWriteString( uart, "AT+CMGF=1\r\n" );
1a0003cc:	b2c4      	uxtb	r4, r0
1a0003ce:	4908      	ldr	r1, [pc, #32]	; (1a0003f0 <ag9_syntax+0x28>)
1a0003d0:	4620      	mov	r0, r4
1a0003d2:	f003 ff3e 	bl	1a004252 <uartWriteString>
   return waitForReceiveStringOrTimeoutBlocking( uart, "OK\r\n", strlen("OK\r\n"), 1000 );
1a0003d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0003da:	2300      	movs	r3, #0
1a0003dc:	e9cd 2300 	strd	r2, r3, [sp]
1a0003e0:	2204      	movs	r2, #4
1a0003e2:	4904      	ldr	r1, [pc, #16]	; (1a0003f4 <ag9_syntax+0x2c>)
1a0003e4:	4620      	mov	r0, r4
1a0003e6:	f003 ff0a 	bl	1a0041fe <waitForReceiveStringOrTimeoutBlocking>
}
1a0003ea:	b002      	add	sp, #8
1a0003ec:	bd10      	pop	{r4, pc}
1a0003ee:	bf00      	nop
1a0003f0:	1a005d74 	.word	0x1a005d74
1a0003f4:	1a005d88 	.word	0x1a005d88

1a0003f8 <ag9_attach>:
{
1a0003f8:	b510      	push	{r4, lr}
1a0003fa:	b082      	sub	sp, #8
   uartWriteString( uart, "AT+CGATT?\r\n" );
1a0003fc:	b2c4      	uxtb	r4, r0
1a0003fe:	4908      	ldr	r1, [pc, #32]	; (1a000420 <ag9_attach+0x28>)
1a000400:	4620      	mov	r0, r4
1a000402:	f003 ff26 	bl	1a004252 <uartWriteString>
   return waitForReceiveStringOrTimeoutBlocking( uart, "OK\r\n", strlen("OK\r\n"), 1000 );
1a000406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00040a:	2300      	movs	r3, #0
1a00040c:	e9cd 2300 	strd	r2, r3, [sp]
1a000410:	2204      	movs	r2, #4
1a000412:	4904      	ldr	r1, [pc, #16]	; (1a000424 <ag9_attach+0x2c>)
1a000414:	4620      	mov	r0, r4
1a000416:	f003 fef2 	bl	1a0041fe <waitForReceiveStringOrTimeoutBlocking>
}
1a00041a:	b002      	add	sp, #8
1a00041c:	bd10      	pop	{r4, pc}
1a00041e:	bf00      	nop
1a000420:	1a005d68 	.word	0x1a005d68
1a000424:	1a005d88 	.word	0x1a005d88

1a000428 <uart_cofig>:
bool_t uart_cofig( uart_drive_t *uart_drive ){
1a000428:	b510      	push	{r4, lr}
1a00042a:	4604      	mov	r4, r0
	uartConfig(uart_drive->uart_value, uart_drive->baud_rate);
1a00042c:	6841      	ldr	r1, [r0, #4]
1a00042e:	7800      	ldrb	r0, [r0, #0]
1a000430:	f003 fe58 	bl	1a0040e4 <uartInit>
	uartCallbackSet(uart_drive->uart_value, UART_RECEIVE, functionRX, NULL);
1a000434:	2300      	movs	r3, #0
1a000436:	4a16      	ldr	r2, [pc, #88]	; (1a000490 <uart_cofig+0x68>)
1a000438:	4619      	mov	r1, r3
1a00043a:	7820      	ldrb	r0, [r4, #0]
1a00043c:	f003 fdc8 	bl	1a003fd0 <uartCallbackSet>
	uartInterrupt(uart_drive->uart_value, TRUE);
1a000440:	2101      	movs	r1, #1
1a000442:	7820      	ldrb	r0, [r4, #0]
1a000444:	f003 fd7c 	bl	1a003f40 <uartInterrupt>
	if( ag9_test( uart_drive->uart_value ) ){
1a000448:	7820      	ldrb	r0, [r4, #0]
1a00044a:	f7ff ffa5 	bl	1a000398 <ag9_test>
1a00044e:	b190      	cbz	r0, 1a000476 <uart_cofig+0x4e>
		printf("Modulo funciona correctamente\r\n");
1a000450:	4810      	ldr	r0, [pc, #64]	; (1a000494 <uart_cofig+0x6c>)
1a000452:	f005 faad 	bl	1a0059b0 <puts>
	if( ag9_syntax( uart_drive->uart_value ) ){
1a000456:	7820      	ldrb	r0, [r4, #0]
1a000458:	f7ff ffb6 	bl	1a0003c8 <ag9_syntax>
1a00045c:	b178      	cbz	r0, 1a00047e <uart_cofig+0x56>
		printf("Modulo texto activado correctamente\r\n");
1a00045e:	480e      	ldr	r0, [pc, #56]	; (1a000498 <uart_cofig+0x70>)
1a000460:	f005 faa6 	bl	1a0059b0 <puts>
	if( ag9_attach( uart_drive->uart_value ) ){
1a000464:	7820      	ldrb	r0, [r4, #0]
1a000466:	f7ff ffc7 	bl	1a0003f8 <ag9_attach>
1a00046a:	b160      	cbz	r0, 1a000486 <uart_cofig+0x5e>
		printf("Modulo atachado a la red\r\n");
1a00046c:	480b      	ldr	r0, [pc, #44]	; (1a00049c <uart_cofig+0x74>)
1a00046e:	f005 fa9f 	bl	1a0059b0 <puts>
}
1a000472:	2001      	movs	r0, #1
1a000474:	bd10      	pop	{r4, pc}
		printf("Modulo ag9 no funciona\r\n");
1a000476:	480a      	ldr	r0, [pc, #40]	; (1a0004a0 <uart_cofig+0x78>)
1a000478:	f005 fa9a 	bl	1a0059b0 <puts>
1a00047c:	e7eb      	b.n	1a000456 <uart_cofig+0x2e>
		printf("Modo texto no activado\r\n");
1a00047e:	4809      	ldr	r0, [pc, #36]	; (1a0004a4 <uart_cofig+0x7c>)
1a000480:	f005 fa96 	bl	1a0059b0 <puts>
1a000484:	e7ee      	b.n	1a000464 <uart_cofig+0x3c>
		printf("Modulo af9 no esta atachado a la red\r\n");
1a000486:	4808      	ldr	r0, [pc, #32]	; (1a0004a8 <uart_cofig+0x80>)
1a000488:	f005 fa92 	bl	1a0059b0 <puts>
1a00048c:	e7f1      	b.n	1a000472 <uart_cofig+0x4a>
1a00048e:	bf00      	nop
1a000490:	1a000301 	.word	0x1a000301
1a000494:	1a005da4 	.word	0x1a005da4
1a000498:	1a005ddc 	.word	0x1a005ddc
1a00049c:	1a005e1c 	.word	0x1a005e1c
1a0004a0:	1a005dc4 	.word	0x1a005dc4
1a0004a4:	1a005e04 	.word	0x1a005e04
1a0004a8:	1a005e38 	.word	0x1a005e38

1a0004ac <IRQ_handler_Init>:
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
	int32_t of = (PortSel & 3) << 3;
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a0004ac:	4a2b      	ldr	r2, [pc, #172]	; (1a00055c <IRQ_handler_Init+0xb0>)
1a0004ae:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
1a0004b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0004b6:	f043 0304 	orr.w	r3, r3, #4
1a0004ba:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a0004be:	4b28      	ldr	r3, [pc, #160]	; (1a000560 <IRQ_handler_Init+0xb4>)
1a0004c0:	6819      	ldr	r1, [r3, #0]
1a0004c2:	f021 0101 	bic.w	r1, r1, #1
1a0004c6:	6019      	str	r1, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a0004c8:	2101      	movs	r1, #1
1a0004ca:	6159      	str	r1, [r3, #20]
1a0004cc:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a0004d0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
1a0004d4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
1a0004d8:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a0004dc:	6819      	ldr	r1, [r3, #0]
1a0004de:	f021 0102 	bic.w	r1, r1, #2
1a0004e2:	6019      	str	r1, [r3, #0]
	pPININT->SIENR = pins;
1a0004e4:	2102      	movs	r1, #2
1a0004e6:	6099      	str	r1, [r3, #8]
1a0004e8:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a0004ec:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
1a0004f0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
1a0004f4:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a0004f8:	6819      	ldr	r1, [r3, #0]
1a0004fa:	f021 0104 	bic.w	r1, r1, #4
1a0004fe:	6019      	str	r1, [r3, #0]
	pPININT->SIENF = pins;
1a000500:	2104      	movs	r1, #4
1a000502:	6159      	str	r1, [r3, #20]
1a000504:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a000508:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
1a00050c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
1a000510:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a000514:	6819      	ldr	r1, [r3, #0]
1a000516:	f021 0108 	bic.w	r1, r1, #8
1a00051a:	6019      	str	r1, [r3, #0]
	pPININT->SIENR = pins;
1a00051c:	2108      	movs	r1, #8
1a00051e:	6099      	str	r1, [r3, #8]
1a000520:	f8d2 1e04 	ldr.w	r1, [r2, #3588]	; 0xe04
1a000524:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
1a000528:	f041 0109 	orr.w	r1, r1, #9
1a00052c:	f8c2 1e04 	str.w	r1, [r2, #3588]	; 0xe04
	pPININT->ISEL &= ~pins;
1a000530:	6819      	ldr	r1, [r3, #0]
1a000532:	f021 0110 	bic.w	r1, r1, #16
1a000536:	6019      	str	r1, [r3, #0]
	pPININT->SIENF = pins;
1a000538:	2110      	movs	r1, #16
1a00053a:	6159      	str	r1, [r3, #20]
1a00053c:	f8d2 1e04 	ldr.w	r1, [r2, #3588]	; 0xe04
1a000540:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
1a000544:	f441 6110 	orr.w	r1, r1, #2304	; 0x900
1a000548:	f8c2 1e04 	str.w	r1, [r2, #3588]	; 0xe04
	pPININT->ISEL &= ~pins;
1a00054c:	681a      	ldr	r2, [r3, #0]
1a00054e:	f022 0220 	bic.w	r2, r2, #32
1a000552:	601a      	str	r2, [r3, #0]
	pPININT->SIENR = pins;
1a000554:	2220      	movs	r2, #32
1a000556:	609a      	str	r2, [r3, #8]
	Chip_SCU_GPIOIntPinSel(5, 0, 9);
	Chip_PININT_SetPinModeEdge(LPC_GPIO_PIN_INT, PININTCH5);
	Chip_PININT_EnableIntHigh(LPC_GPIO_PIN_INT, PININTCH5);


}
1a000558:	4770      	bx	lr
1a00055a:	bf00      	nop
1a00055c:	40086000 	.word	0x40086000
1a000560:	40087000 	.word	0x40087000

1a000564 <enable_buttons_interrupt>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000564:	4b0d      	ldr	r3, [pc, #52]	; (1a00059c <enable_buttons_interrupt+0x38>)
1a000566:	22a0      	movs	r2, #160	; 0xa0
1a000568:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00056c:	2101      	movs	r1, #1
1a00056e:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000570:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000574:	2102      	movs	r1, #2
1a000576:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000578:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00057c:	2104      	movs	r1, #4
1a00057e:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000580:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000584:	2108      	movs	r1, #8
1a000586:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000588:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00058c:	2110      	movs	r1, #16
1a00058e:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000590:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000594:	2220      	movs	r2, #32
1a000596:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority(PIN_INT4_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
	NVIC_EnableIRQ(PIN_INT4_IRQn);
	NVIC_SetPriority(PIN_INT5_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
	NVIC_EnableIRQ(PIN_INT5_IRQn);

}
1a000598:	4770      	bx	lr
1a00059a:	bf00      	nop
1a00059c:	e000e100 	.word	0xe000e100

1a0005a0 <disable_buttons_interrupt>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0005a0:	4b15      	ldr	r3, [pc, #84]	; (1a0005f8 <disable_buttons_interrupt+0x58>)
1a0005a2:	2201      	movs	r2, #1
1a0005a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a0005a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005ac:	f3bf 8f6f 	isb	sy
1a0005b0:	2202      	movs	r2, #2
1a0005b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a0005b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005ba:	f3bf 8f6f 	isb	sy
1a0005be:	2204      	movs	r2, #4
1a0005c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a0005c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005c8:	f3bf 8f6f 	isb	sy
1a0005cc:	2208      	movs	r2, #8
1a0005ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a0005d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005d6:	f3bf 8f6f 	isb	sy
1a0005da:	2210      	movs	r2, #16
1a0005dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a0005e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005e4:	f3bf 8f6f 	isb	sy
1a0005e8:	2220      	movs	r2, #32
1a0005ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a0005ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005f2:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(PIN_INT1_IRQn);
	NVIC_DisableIRQ(PIN_INT2_IRQn);
	NVIC_DisableIRQ(PIN_INT3_IRQn);
	NVIC_DisableIRQ(PIN_INT4_IRQn);
	NVIC_DisableIRQ(PIN_INT5_IRQn);
}
1a0005f6:	4770      	bx	lr
1a0005f8:	e000e100 	.word	0xe000e100

1a0005fc <GPIO0_IRQHandler>:

//Handler de interrupciones
void GPIO0_IRQHandler(void){
1a0005fc:	b500      	push	{lr}
1a0005fe:	b083      	sub	sp, #12


	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000600:	2300      	movs	r3, #0
1a000602:	9301      	str	r3, [sp, #4]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetFallStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->FALL;
1a000604:	4b0f      	ldr	r3, [pc, #60]	; (1a000644 <GPIO0_IRQHandler+0x48>)
1a000606:	6a1b      	ldr	r3, [r3, #32]

	if (Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH0){ //Verificamos que la interrupciÃ³n es la esperada
1a000608:	f013 0f01 	tst.w	r3, #1
1a00060c:	d10c      	bne.n	1a000628 <GPIO0_IRQHandler+0x2c>
		//codigo a ejecutar si ocurriÃ³ la interrupciÃ³n
		button_control button_capture;
		button_capture.flank = FALLING;
		xQueueSendFromISR( tec_config[0].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a00060e:	9b01      	ldr	r3, [sp, #4]
1a000610:	b13b      	cbz	r3, 1a000622 <GPIO0_IRQHandler+0x26>
1a000612:	4b0d      	ldr	r3, [pc, #52]	; (1a000648 <GPIO0_IRQHandler+0x4c>)
1a000614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000618:	601a      	str	r2, [r3, #0]
1a00061a:	f3bf 8f4f 	dsb	sy
1a00061e:	f3bf 8f6f 	isb	sy
}
1a000622:	b003      	add	sp, #12
1a000624:	f85d fb04 	ldr.w	pc, [sp], #4
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000628:	4b06      	ldr	r3, [pc, #24]	; (1a000644 <GPIO0_IRQHandler+0x48>)
1a00062a:	2201      	movs	r2, #1
1a00062c:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = FALLING;
1a00062e:	2302      	movs	r3, #2
1a000630:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[0].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a000634:	2300      	movs	r3, #0
1a000636:	aa01      	add	r2, sp, #4
1a000638:	4669      	mov	r1, sp
1a00063a:	4804      	ldr	r0, [pc, #16]	; (1a00064c <GPIO0_IRQHandler+0x50>)
1a00063c:	6840      	ldr	r0, [r0, #4]
1a00063e:	f000 fea2 	bl	1a001386 <xQueueGenericSendFromISR>
1a000642:	e7e4      	b.n	1a00060e <GPIO0_IRQHandler+0x12>
1a000644:	40087000 	.word	0x40087000
1a000648:	e000ed04 	.word	0xe000ed04
1a00064c:	10002bcc 	.word	0x10002bcc

1a000650 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void){
1a000650:	b500      	push	{lr}
1a000652:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000654:	2300      	movs	r3, #0
1a000656:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a000658:	4b0f      	ldr	r3, [pc, #60]	; (1a000698 <GPIO1_IRQHandler+0x48>)
1a00065a:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH1){
1a00065c:	f013 0f02 	tst.w	r3, #2
1a000660:	d10c      	bne.n	1a00067c <GPIO1_IRQHandler+0x2c>
		//codigo a ejecutar si ocurriÃ³ la interrupciÃ³n
		button_control button_capture;
		button_capture.flank = RISING;
		xQueueSendFromISR( tec_config[0].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000662:	9b01      	ldr	r3, [sp, #4]
1a000664:	b13b      	cbz	r3, 1a000676 <GPIO1_IRQHandler+0x26>
1a000666:	4b0d      	ldr	r3, [pc, #52]	; (1a00069c <GPIO1_IRQHandler+0x4c>)
1a000668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00066c:	601a      	str	r2, [r3, #0]
1a00066e:	f3bf 8f4f 	dsb	sy
1a000672:	f3bf 8f6f 	isb	sy
}
1a000676:	b003      	add	sp, #12
1a000678:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a00067c:	4b06      	ldr	r3, [pc, #24]	; (1a000698 <GPIO1_IRQHandler+0x48>)
1a00067e:	2202      	movs	r2, #2
1a000680:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = RISING;
1a000682:	2304      	movs	r3, #4
1a000684:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[0].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a000688:	2300      	movs	r3, #0
1a00068a:	aa01      	add	r2, sp, #4
1a00068c:	4669      	mov	r1, sp
1a00068e:	4804      	ldr	r0, [pc, #16]	; (1a0006a0 <GPIO1_IRQHandler+0x50>)
1a000690:	6840      	ldr	r0, [r0, #4]
1a000692:	f000 fe78 	bl	1a001386 <xQueueGenericSendFromISR>
1a000696:	e7e4      	b.n	1a000662 <GPIO1_IRQHandler+0x12>
1a000698:	40087000 	.word	0x40087000
1a00069c:	e000ed04 	.word	0xe000ed04
1a0006a0:	10002bcc 	.word	0x10002bcc

1a0006a4 <GPIO2_IRQHandler>:


void GPIO2_IRQHandler(void){
1a0006a4:	b500      	push	{lr}
1a0006a6:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a0006a8:	2300      	movs	r3, #0
1a0006aa:	9301      	str	r3, [sp, #4]
	return pPININT->FALL;
1a0006ac:	4b0f      	ldr	r3, [pc, #60]	; (1a0006ec <GPIO2_IRQHandler+0x48>)
1a0006ae:	6a1b      	ldr	r3, [r3, #32]


	if (Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH2){ //Verificamos que la interrupciÃ³n es la esperada
1a0006b0:	f013 0f04 	tst.w	r3, #4
1a0006b4:	d10c      	bne.n	1a0006d0 <GPIO2_IRQHandler+0x2c>
		button_control button_capture;
		button_capture.flank = FALLING;
		xQueueSendFromISR( tec_config[Tecla2].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a0006b6:	9b01      	ldr	r3, [sp, #4]
1a0006b8:	b13b      	cbz	r3, 1a0006ca <GPIO2_IRQHandler+0x26>
1a0006ba:	4b0d      	ldr	r3, [pc, #52]	; (1a0006f0 <GPIO2_IRQHandler+0x4c>)
1a0006bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0006c0:	601a      	str	r2, [r3, #0]
1a0006c2:	f3bf 8f4f 	dsb	sy
1a0006c6:	f3bf 8f6f 	isb	sy
}
1a0006ca:	b003      	add	sp, #12
1a0006cc:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a0006d0:	4b06      	ldr	r3, [pc, #24]	; (1a0006ec <GPIO2_IRQHandler+0x48>)
1a0006d2:	2204      	movs	r2, #4
1a0006d4:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = FALLING;
1a0006d6:	2302      	movs	r3, #2
1a0006d8:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[Tecla2].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a0006dc:	2300      	movs	r3, #0
1a0006de:	446a      	add	r2, sp
1a0006e0:	4669      	mov	r1, sp
1a0006e2:	4804      	ldr	r0, [pc, #16]	; (1a0006f4 <GPIO2_IRQHandler+0x50>)
1a0006e4:	68c0      	ldr	r0, [r0, #12]
1a0006e6:	f000 fe4e 	bl	1a001386 <xQueueGenericSendFromISR>
1a0006ea:	e7e4      	b.n	1a0006b6 <GPIO2_IRQHandler+0x12>
1a0006ec:	40087000 	.word	0x40087000
1a0006f0:	e000ed04 	.word	0xe000ed04
1a0006f4:	10002bcc 	.word	0x10002bcc

1a0006f8 <GPIO3_IRQHandler>:

void GPIO3_IRQHandler(void){
1a0006f8:	b500      	push	{lr}
1a0006fa:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a0006fc:	2300      	movs	r3, #0
1a0006fe:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a000700:	4b0f      	ldr	r3, [pc, #60]	; (1a000740 <GPIO3_IRQHandler+0x48>)
1a000702:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH3){
1a000704:	f013 0f08 	tst.w	r3, #8
1a000708:	d10c      	bne.n	1a000724 <GPIO3_IRQHandler+0x2c>
		//codigo a ejecutar si ocurriÃ³ la interrupciÃ³n
		button_control button_capture;
		button_capture.flank = RISING;
		xQueueSendFromISR( tec_config[Tecla2].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a00070a:	9b01      	ldr	r3, [sp, #4]
1a00070c:	b13b      	cbz	r3, 1a00071e <GPIO3_IRQHandler+0x26>
1a00070e:	4b0d      	ldr	r3, [pc, #52]	; (1a000744 <GPIO3_IRQHandler+0x4c>)
1a000710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000714:	601a      	str	r2, [r3, #0]
1a000716:	f3bf 8f4f 	dsb	sy
1a00071a:	f3bf 8f6f 	isb	sy
}
1a00071e:	b003      	add	sp, #12
1a000720:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a000724:	4b06      	ldr	r3, [pc, #24]	; (1a000740 <GPIO3_IRQHandler+0x48>)
1a000726:	2208      	movs	r2, #8
1a000728:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = RISING;
1a00072a:	2304      	movs	r3, #4
1a00072c:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[Tecla2].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a000730:	2300      	movs	r3, #0
1a000732:	aa01      	add	r2, sp, #4
1a000734:	4669      	mov	r1, sp
1a000736:	4804      	ldr	r0, [pc, #16]	; (1a000748 <GPIO3_IRQHandler+0x50>)
1a000738:	68c0      	ldr	r0, [r0, #12]
1a00073a:	f000 fe24 	bl	1a001386 <xQueueGenericSendFromISR>
1a00073e:	e7e4      	b.n	1a00070a <GPIO3_IRQHandler+0x12>
1a000740:	40087000 	.word	0x40087000
1a000744:	e000ed04 	.word	0xe000ed04
1a000748:	10002bcc 	.word	0x10002bcc

1a00074c <GPIO4_IRQHandler>:

void GPIO4_IRQHandler(void){
1a00074c:	b500      	push	{lr}
1a00074e:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000750:	2300      	movs	r3, #0
1a000752:	9301      	str	r3, [sp, #4]
	return pPININT->FALL;
1a000754:	4b0f      	ldr	r3, [pc, #60]	; (1a000794 <GPIO4_IRQHandler+0x48>)
1a000756:	6a1b      	ldr	r3, [r3, #32]


	if (Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH4){ //Verificamos que la interrupciÃ³n es la esperada
1a000758:	f013 0f10 	tst.w	r3, #16
1a00075c:	d10c      	bne.n	1a000778 <GPIO4_IRQHandler+0x2c>
		button_control button_capture;
		button_capture.flank = FALLING;
		xQueueSendFromISR( tec_config[Tecla3].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a00075e:	9b01      	ldr	r3, [sp, #4]
1a000760:	b13b      	cbz	r3, 1a000772 <GPIO4_IRQHandler+0x26>
1a000762:	4b0d      	ldr	r3, [pc, #52]	; (1a000798 <GPIO4_IRQHandler+0x4c>)
1a000764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000768:	601a      	str	r2, [r3, #0]
1a00076a:	f3bf 8f4f 	dsb	sy
1a00076e:	f3bf 8f6f 	isb	sy
}
1a000772:	b003      	add	sp, #12
1a000774:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a000778:	4b06      	ldr	r3, [pc, #24]	; (1a000794 <GPIO4_IRQHandler+0x48>)
1a00077a:	2210      	movs	r2, #16
1a00077c:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = FALLING;
1a00077e:	2302      	movs	r3, #2
1a000780:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[Tecla3].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a000784:	2300      	movs	r3, #0
1a000786:	aa01      	add	r2, sp, #4
1a000788:	4669      	mov	r1, sp
1a00078a:	4804      	ldr	r0, [pc, #16]	; (1a00079c <GPIO4_IRQHandler+0x50>)
1a00078c:	6940      	ldr	r0, [r0, #20]
1a00078e:	f000 fdfa 	bl	1a001386 <xQueueGenericSendFromISR>
1a000792:	e7e4      	b.n	1a00075e <GPIO4_IRQHandler+0x12>
1a000794:	40087000 	.word	0x40087000
1a000798:	e000ed04 	.word	0xe000ed04
1a00079c:	10002bcc 	.word	0x10002bcc

1a0007a0 <GPIO5_IRQHandler>:

void GPIO5_IRQHandler(void){
1a0007a0:	b500      	push	{lr}
1a0007a2:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a0007a4:	2300      	movs	r3, #0
1a0007a6:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a0007a8:	4b0f      	ldr	r3, [pc, #60]	; (1a0007e8 <GPIO5_IRQHandler+0x48>)
1a0007aa:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH5){
1a0007ac:	f013 0f20 	tst.w	r3, #32
1a0007b0:	d10c      	bne.n	1a0007cc <GPIO5_IRQHandler+0x2c>
		//codigo a ejecutar si ocurriÃ³ la interrupciÃ³n
		button_control button_capture;
		button_capture.flank = RISING;
		xQueueSendFromISR( tec_config[Tecla3].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a0007b2:	9b01      	ldr	r3, [sp, #4]
1a0007b4:	b13b      	cbz	r3, 1a0007c6 <GPIO5_IRQHandler+0x26>
1a0007b6:	4b0d      	ldr	r3, [pc, #52]	; (1a0007ec <GPIO5_IRQHandler+0x4c>)
1a0007b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0007bc:	601a      	str	r2, [r3, #0]
1a0007be:	f3bf 8f4f 	dsb	sy
1a0007c2:	f3bf 8f6f 	isb	sy
}
1a0007c6:	b003      	add	sp, #12
1a0007c8:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a0007cc:	4b06      	ldr	r3, [pc, #24]	; (1a0007e8 <GPIO5_IRQHandler+0x48>)
1a0007ce:	2220      	movs	r2, #32
1a0007d0:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = RISING;
1a0007d2:	2304      	movs	r3, #4
1a0007d4:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[Tecla3].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a0007d8:	2300      	movs	r3, #0
1a0007da:	aa01      	add	r2, sp, #4
1a0007dc:	4669      	mov	r1, sp
1a0007de:	4804      	ldr	r0, [pc, #16]	; (1a0007f0 <GPIO5_IRQHandler+0x50>)
1a0007e0:	6940      	ldr	r0, [r0, #20]
1a0007e2:	f000 fdd0 	bl	1a001386 <xQueueGenericSendFromISR>
1a0007e6:	e7e4      	b.n	1a0007b2 <GPIO5_IRQHandler+0x12>
1a0007e8:	40087000 	.word	0x40087000
1a0007ec:	e000ed04 	.word	0xe000ed04
1a0007f0:	10002bcc 	.word	0x10002bcc

1a0007f4 <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a0007f4:	b508      	push	{r3, lr}
	boardInit();
1a0007f6:	f003 ff4d 	bl	1a004694 <boardInit>

	uart_struct.uart_value = UART_232;
1a0007fa:	4809      	ldr	r0, [pc, #36]	; (1a000820 <main+0x2c>)
1a0007fc:	2305      	movs	r3, #5
1a0007fe:	7003      	strb	r3, [r0, #0]
	uart_struct.baud_rate = 115200;
1a000800:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
1a000804:	6043      	str	r3, [r0, #4]
	uart_struct.byte_ring = 'R';
1a000806:	2352      	movs	r3, #82	; 0x52
1a000808:	7403      	strb	r3, [r0, #16]

	uart_cofig( &uart_struct );
1a00080a:	f7ff fe0d 	bl	1a000428 <uart_cofig>

	/* Configuracion de interrupciones */
	IRQ_handler_Init();
1a00080e:	f7ff fe4d 	bl	1a0004ac <IRQ_handler_Init>

	_task_init( tec_config );
1a000812:	4804      	ldr	r0, [pc, #16]	; (1a000824 <main+0x30>)
1a000814:	f000 f8fc 	bl	1a000a10 <_task_init>

	vTaskStartScheduler(); // Initialize scheduler
1a000818:	f001 fb10 	bl	1a001e3c <vTaskStartScheduler>

	while( true ); // If reach heare it means that the scheduler could not start
1a00081c:	e7fe      	b.n	1a00081c <main+0x28>
1a00081e:	bf00      	nop
1a000820:	10002be8 	.word	0x10002be8
1a000824:	10002bcc 	.word	0x10002bcc

1a000828 <tecla_task>:
	printf("Sistema iniciado\r\n");

}


void tecla_task(void* taskParmPt){
1a000828:	b510      	push	{r4, lr}
1a00082a:	b082      	sub	sp, #8
1a00082c:	4604      	mov	r4, r0

	button_str_t* tecla_select; //Me preparo para recibir la direcciÃ³n de la estructura y copiarla en una varibale local
	tecla_select = (button_str_t*) taskParmPt;
	tecla_select->state_button = UP;
1a00082e:	2301      	movs	r3, #1
1a000830:	7043      	strb	r3, [r0, #1]

	read_tecla tec_saved;
	tec_saved.str_button = tecla_select->str_button;
1a000832:	7803      	ldrb	r3, [r0, #0]
1a000834:	f88d 3004 	strb.w	r3, [sp, #4]
1a000838:	e003      	b.n	1a000842 <tecla_task+0x1a>
			if (xQueueReceive(tecla_select->queue_button, &button_pressed, portMAX_DELAY)){

				switch (tecla_select->state_button){

				case UP:
					if(button_pressed.flank == FALLING){ //AcÃ¡ adentro estÃ¡ el pseudo estado Falling
1a00083a:	f89d 3000 	ldrb.w	r3, [sp]
1a00083e:	2b02      	cmp	r3, #2
1a000840:	d013      	beq.n	1a00086a <tecla_task+0x42>
		if(system_access.system_flag == TRUE){
1a000842:	4b32      	ldr	r3, [pc, #200]	; (1a00090c <tecla_task+0xe4>)
1a000844:	791b      	ldrb	r3, [r3, #4]
1a000846:	2b01      	cmp	r3, #1
1a000848:	d1fb      	bne.n	1a000842 <tecla_task+0x1a>
			if (xQueueReceive(tecla_select->queue_button, &button_pressed, portMAX_DELAY)){
1a00084a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00084e:	4669      	mov	r1, sp
1a000850:	6860      	ldr	r0, [r4, #4]
1a000852:	f000 fe59 	bl	1a001508 <xQueueReceive>
1a000856:	2800      	cmp	r0, #0
1a000858:	d0f3      	beq.n	1a000842 <tecla_task+0x1a>
				switch (tecla_select->state_button){
1a00085a:	7863      	ldrb	r3, [r4, #1]
1a00085c:	2b01      	cmp	r3, #1
1a00085e:	d0ec      	beq.n	1a00083a <tecla_task+0x12>
1a000860:	2b03      	cmp	r3, #3
1a000862:	d01e      	beq.n	1a0008a2 <tecla_task+0x7a>
						}
					}
					break;

				default:
					tecla_select->state_button = UP;
1a000864:	2301      	movs	r3, #1
1a000866:	7063      	strb	r3, [r4, #1]
					break;
1a000868:	e7eb      	b.n	1a000842 <tecla_task+0x1a>
						if (pdFALSE == (xQueueReceive(tecla_select->queue_button, &button_pressed, (ANTIREBOTE_MS / portTICK_RATE_MS)))){
1a00086a:	2214      	movs	r2, #20
1a00086c:	4669      	mov	r1, sp
1a00086e:	6860      	ldr	r0, [r4, #4]
1a000870:	f000 fe4a 	bl	1a001508 <xQueueReceive>
1a000874:	2800      	cmp	r0, #0
1a000876:	d1e4      	bne.n	1a000842 <tecla_task+0x1a>
							tecla_select->state_button = DOWN;
1a000878:	2303      	movs	r3, #3
1a00087a:	7063      	strb	r3, [r4, #1]
							if (pdTRUE == xSemaphoreTake( uart_struct.uart_mutex, portMAX_DELAY)){
1a00087c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000880:	4b23      	ldr	r3, [pc, #140]	; (1a000910 <tecla_task+0xe8>)
1a000882:	6898      	ldr	r0, [r3, #8]
1a000884:	f000 feee 	bl	1a001664 <xQueueSemaphoreTake>
1a000888:	2801      	cmp	r0, #1
1a00088a:	d1da      	bne.n	1a000842 <tecla_task+0x1a>
								printf("Se capturo una pulsacion\r\n");
1a00088c:	4821      	ldr	r0, [pc, #132]	; (1a000914 <tecla_task+0xec>)
1a00088e:	f005 f88f 	bl	1a0059b0 <puts>
								xSemaphoreGive( uart_struct.uart_mutex );
1a000892:	2300      	movs	r3, #0
1a000894:	461a      	mov	r2, r3
1a000896:	4619      	mov	r1, r3
1a000898:	481d      	ldr	r0, [pc, #116]	; (1a000910 <tecla_task+0xe8>)
1a00089a:	6880      	ldr	r0, [r0, #8]
1a00089c:	f000 fc9c 	bl	1a0011d8 <xQueueGenericSend>
1a0008a0:	e7cf      	b.n	1a000842 <tecla_task+0x1a>
					if(button_pressed.flank == RISING){ //AcÃ¡ adentro estÃ¡ el pseudo estado Rising
1a0008a2:	f89d 3000 	ldrb.w	r3, [sp]
1a0008a6:	2b04      	cmp	r3, #4
1a0008a8:	d1cb      	bne.n	1a000842 <tecla_task+0x1a>
						if (pdFALSE == (xQueueReceive(tecla_select->queue_button, &button_pressed, (ANTIREBOTE_MS / portTICK_RATE_MS)))){
1a0008aa:	2214      	movs	r2, #20
1a0008ac:	4669      	mov	r1, sp
1a0008ae:	6860      	ldr	r0, [r4, #4]
1a0008b0:	f000 fe2a 	bl	1a001508 <xQueueReceive>
1a0008b4:	2800      	cmp	r0, #0
1a0008b6:	d1c4      	bne.n	1a000842 <tecla_task+0x1a>
							tecla_select->state_button = UP;
1a0008b8:	2301      	movs	r3, #1
1a0008ba:	7063      	strb	r3, [r4, #1]
							if (pdTRUE == xSemaphoreTake( uart_struct.uart_mutex, portMAX_DELAY)){
1a0008bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0008c0:	4b13      	ldr	r3, [pc, #76]	; (1a000910 <tecla_task+0xe8>)
1a0008c2:	6898      	ldr	r0, [r3, #8]
1a0008c4:	f000 fece 	bl	1a001664 <xQueueSemaphoreTake>
1a0008c8:	2801      	cmp	r0, #1
1a0008ca:	d010      	beq.n	1a0008ee <tecla_task+0xc6>
							xQueueSend(led_queue, &tec_saved, portMAX_DELAY);
1a0008cc:	2300      	movs	r3, #0
1a0008ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0008d2:	a901      	add	r1, sp, #4
1a0008d4:	4810      	ldr	r0, [pc, #64]	; (1a000918 <tecla_task+0xf0>)
1a0008d6:	6800      	ldr	r0, [r0, #0]
1a0008d8:	f000 fc7e 	bl	1a0011d8 <xQueueGenericSend>
							xQueueSend(lcd_queue, &tec_saved, portMAX_DELAY);
1a0008dc:	2300      	movs	r3, #0
1a0008de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0008e2:	a901      	add	r1, sp, #4
1a0008e4:	480d      	ldr	r0, [pc, #52]	; (1a00091c <tecla_task+0xf4>)
1a0008e6:	6800      	ldr	r0, [r0, #0]
1a0008e8:	f000 fc76 	bl	1a0011d8 <xQueueGenericSend>
1a0008ec:	e7a9      	b.n	1a000842 <tecla_task+0x1a>
								printf("Lectura completada en la tecla %d\r\n", tec_saved.str_button+1);
1a0008ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
1a0008f2:	3101      	adds	r1, #1
1a0008f4:	480a      	ldr	r0, [pc, #40]	; (1a000920 <tecla_task+0xf8>)
1a0008f6:	f004 ffd5 	bl	1a0058a4 <iprintf>
								xSemaphoreGive( uart_struct.uart_mutex );
1a0008fa:	2300      	movs	r3, #0
1a0008fc:	461a      	mov	r2, r3
1a0008fe:	4619      	mov	r1, r3
1a000900:	4803      	ldr	r0, [pc, #12]	; (1a000910 <tecla_task+0xe8>)
1a000902:	6880      	ldr	r0, [r0, #8]
1a000904:	f000 fc68 	bl	1a0011d8 <xQueueGenericSend>
1a000908:	e7e0      	b.n	1a0008cc <tecla_task+0xa4>
1a00090a:	bf00      	nop
1a00090c:	10002c00 	.word	0x10002c00
1a000910:	10002be8 	.word	0x10002be8
1a000914:	1a005fc0 	.word	0x1a005fc0
1a000918:	10002bfc 	.word	0x10002bfc
1a00091c:	10002c08 	.word	0x10002c08
1a000920:	1a005fdc 	.word	0x1a005fdc

1a000924 <lcd_task>:
	}

}

// Implementacion de funcion de la tarea LCD 16x2
void lcd_task( void* taskParmPtr ){
1a000924:	b500      	push	{lr}
1a000926:	b083      	sub	sp, #12

	i2cInit( I2C0, 100000 );
1a000928:	4923      	ldr	r1, [pc, #140]	; (1a0009b8 <lcd_task+0x94>)
1a00092a:	2000      	movs	r0, #0
1a00092c:	f003 fce4 	bl	1a0042f8 <i2cInit>

	// Inicializar LCD de 16x2 (caracteres x lineas) con cada caracter de 5x8 pixeles
	lcdInit( 16, 2, 5, 8 );
1a000930:	2308      	movs	r3, #8
1a000932:	2205      	movs	r2, #5
1a000934:	2102      	movs	r1, #2
1a000936:	2010      	movs	r0, #16
1a000938:	f004 f86c 	bl	1a004a14 <lcdInit>

	lcdCursorSet( LCD_CURSOR_OFF );
1a00093c:	2000      	movs	r0, #0
1a00093e:	f004 f84c 	bl	1a0049da <lcdCursorSet>
	lcdClear();
1a000942:	f004 f841 	bl	1a0049c8 <lcdClear>
	gpioMap_t Led_Map[CANT_LEDS] = {LEDR,LED1,LED2,LED3};

	while (TRUE){

		//Espero evento de Lectura completada
		if (xQueueReceive(lcd_queue, &tec_save, portMAX_DELAY)){
1a000946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00094a:	491c      	ldr	r1, [pc, #112]	; (1a0009bc <lcd_task+0x98>)
1a00094c:	4b1c      	ldr	r3, [pc, #112]	; (1a0009c0 <lcd_task+0x9c>)
1a00094e:	6818      	ldr	r0, [r3, #0]
1a000950:	f000 fdda 	bl	1a001508 <xQueueReceive>
1a000954:	2800      	cmp	r0, #0
1a000956:	d0f6      	beq.n	1a000946 <lcd_task+0x22>

			/* Seccion critica para imprimir en LCD */
			if (pdTRUE == xSemaphoreTake( uart_struct.uart_mutex, portMAX_DELAY)){
1a000958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00095c:	4b19      	ldr	r3, [pc, #100]	; (1a0009c4 <lcd_task+0xa0>)
1a00095e:	6898      	ldr	r0, [r3, #8]
1a000960:	f000 fe80 	bl	1a001664 <xQueueSemaphoreTake>
1a000964:	2801      	cmp	r0, #1
1a000966:	d1ee      	bne.n	1a000946 <lcd_task+0x22>

				char lcd2[] = "acceso ";
1a000968:	4b17      	ldr	r3, [pc, #92]	; (1a0009c8 <lcd_task+0xa4>)
1a00096a:	466c      	mov	r4, sp
1a00096c:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000970:	e884 0003 	stmia.w	r4, {r0, r1}

				strcat(lcd2, rele_state_t[tec_save.str_button]);
1a000974:	4b11      	ldr	r3, [pc, #68]	; (1a0009bc <lcd_task+0x98>)
1a000976:	781b      	ldrb	r3, [r3, #0]
1a000978:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00097c:	005a      	lsls	r2, r3, #1
1a00097e:	4913      	ldr	r1, [pc, #76]	; (1a0009cc <lcd_task+0xa8>)
1a000980:	4411      	add	r1, r2
1a000982:	4620      	mov	r0, r4
1a000984:	f005 f85f 	bl	1a005a46 <strcat>

				lcdClear();
1a000988:	f004 f81e 	bl	1a0049c8 <lcdClear>
				lcdGoToXY( 0, 0 ); // Poner cursor en 0, 0
1a00098c:	2100      	movs	r1, #0
1a00098e:	4608      	mov	r0, r1
1a000990:	f003 fff2 	bl	1a004978 <lcdGoToXY>
				lcdSendStringRaw( lcd_text_t );
1a000994:	480e      	ldr	r0, [pc, #56]	; (1a0009d0 <lcd_task+0xac>)
1a000996:	f004 f82a 	bl	1a0049ee <lcdSendStringRaw>
				lcdGoToXY( 0, 1 );
1a00099a:	2101      	movs	r1, #1
1a00099c:	2000      	movs	r0, #0
1a00099e:	f003 ffeb 	bl	1a004978 <lcdGoToXY>
				lcdSendStringRaw( lcd2 );
1a0009a2:	4620      	mov	r0, r4
1a0009a4:	f004 f823 	bl	1a0049ee <lcdSendStringRaw>

				xSemaphoreGive( uart_struct.uart_mutex );
1a0009a8:	2300      	movs	r3, #0
1a0009aa:	461a      	mov	r2, r3
1a0009ac:	4619      	mov	r1, r3
1a0009ae:	4805      	ldr	r0, [pc, #20]	; (1a0009c4 <lcd_task+0xa0>)
1a0009b0:	6880      	ldr	r0, [r0, #8]
1a0009b2:	f000 fc11 	bl	1a0011d8 <xQueueGenericSend>
1a0009b6:	e7c6      	b.n	1a000946 <lcd_task+0x22>
1a0009b8:	000186a0 	.word	0x000186a0
1a0009bc:	10002be4 	.word	0x10002be4
1a0009c0:	10002c08 	.word	0x10002c08
1a0009c4:	10002be8 	.word	0x10002be8
1a0009c8:	1a005f90 	.word	0x1a005f90
1a0009cc:	1000002c 	.word	0x1000002c
1a0009d0:	10000000 	.word	0x10000000

1a0009d4 <first_init>:
void first_init(void){
1a0009d4:	b510      	push	{r4, lr}
1a0009d6:	b082      	sub	sp, #8
	_init_state.str_button = Tecla2;
1a0009d8:	2401      	movs	r4, #1
1a0009da:	f88d 4004 	strb.w	r4, [sp, #4]
	gpioWrite(LED1, ON);
1a0009de:	4621      	mov	r1, r4
1a0009e0:	202b      	movs	r0, #43	; 0x2b
1a0009e2:	f003 fe13 	bl	1a00460c <gpioWrite>
	gpioWrite(GPIO8, ON);
1a0009e6:	4621      	mov	r1, r4
1a0009e8:	200b      	movs	r0, #11
1a0009ea:	f003 fe0f 	bl	1a00460c <gpioWrite>
	xQueueSend(lcd_queue, &_init_state, portMAX_DELAY);
1a0009ee:	2300      	movs	r3, #0
1a0009f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0009f4:	a901      	add	r1, sp, #4
1a0009f6:	4804      	ldr	r0, [pc, #16]	; (1a000a08 <first_init+0x34>)
1a0009f8:	6800      	ldr	r0, [r0, #0]
1a0009fa:	f000 fbed 	bl	1a0011d8 <xQueueGenericSend>
	printf("Sistema iniciado\r\n");
1a0009fe:	4803      	ldr	r0, [pc, #12]	; (1a000a0c <first_init+0x38>)
1a000a00:	f004 ffd6 	bl	1a0059b0 <puts>
}
1a000a04:	b002      	add	sp, #8
1a000a06:	bd10      	pop	{r4, pc}
1a000a08:	10002c08 	.word	0x10002c08
1a000a0c:	1a005f7c 	.word	0x1a005f7c

1a000a10 <_task_init>:
void _task_init( button_str_t * tec_str_config ){
1a000a10:	b570      	push	{r4, r5, r6, lr}
1a000a12:	b082      	sub	sp, #8
1a000a14:	4606      	mov	r6, r0
	gpioInit(GPIO8, GPIO_OUTPUT);
1a000a16:	2101      	movs	r1, #1
1a000a18:	200b      	movs	r0, #11
1a000a1a:	f003 fd21 	bl	1a004460 <gpioInit>
	for (i = CANT_TECLAS ; i-- ; i >= 0) {
1a000a1e:	2203      	movs	r2, #3
1a000a20:	e000      	b.n	1a000a24 <_task_init+0x14>
void _task_init( button_str_t * tec_str_config ){
1a000a22:	4622      	mov	r2, r4
	for (i = CANT_TECLAS ; i-- ; i >= 0) {
1a000a24:	1e53      	subs	r3, r2, #1
1a000a26:	b2db      	uxtb	r3, r3
1a000a28:	b25c      	sxtb	r4, r3
1a000a2a:	b17a      	cbz	r2, 1a000a4c <_task_init+0x3c>
		tec_str_config[i].str_button = i;
1a000a2c:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
1a000a30:	f806 3034 	strb.w	r3, [r6, r4, lsl #3]
		if (NULL == (tec_str_config[i].queue_button = xQueueCreate(5,sizeof(tec_str_config)))){
1a000a34:	2200      	movs	r2, #0
1a000a36:	2104      	movs	r1, #4
1a000a38:	2005      	movs	r0, #5
1a000a3a:	f000 fba5 	bl	1a001188 <xQueueGenericCreate>
1a000a3e:	6068      	str	r0, [r5, #4]
1a000a40:	2800      	cmp	r0, #0
1a000a42:	d1ee      	bne.n	1a000a22 <_task_init+0x12>
			printf("No se crearon queue para teclas\r\n");
1a000a44:	483d      	ldr	r0, [pc, #244]	; (1a000b3c <_task_init+0x12c>)
1a000a46:	f004 ffb3 	bl	1a0059b0 <puts>
1a000a4a:	e7ea      	b.n	1a000a22 <_task_init+0x12>
	for(uint8_t i = 0; i < CANT_TECLAS; i++){
1a000a4c:	2400      	movs	r4, #0
1a000a4e:	e005      	b.n	1a000a5c <_task_init+0x4c>
			printf("Tarea TEC%d  creada\r\n", i+1);
1a000a50:	1c61      	adds	r1, r4, #1
1a000a52:	483b      	ldr	r0, [pc, #236]	; (1a000b40 <_task_init+0x130>)
1a000a54:	f004 ff26 	bl	1a0058a4 <iprintf>
	for(uint8_t i = 0; i < CANT_TECLAS; i++){
1a000a58:	3401      	adds	r4, #1
1a000a5a:	b2e4      	uxtb	r4, r4
1a000a5c:	2c02      	cmp	r4, #2
1a000a5e:	d80d      	bhi.n	1a000a7c <_task_init+0x6c>
		xErrorHandler = xTaskCreate(tecla_task,
1a000a60:	2300      	movs	r3, #0
1a000a62:	9301      	str	r3, [sp, #4]
1a000a64:	2301      	movs	r3, #1
1a000a66:	9300      	str	r3, [sp, #0]
1a000a68:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
1a000a6c:	22b4      	movs	r2, #180	; 0xb4
1a000a6e:	4935      	ldr	r1, [pc, #212]	; (1a000b44 <_task_init+0x134>)
1a000a70:	4835      	ldr	r0, [pc, #212]	; (1a000b48 <_task_init+0x138>)
1a000a72:	f001 f9b0 	bl	1a001dd6 <xTaskCreate>
		if(xErrorHandler == pdPASS){
1a000a76:	2801      	cmp	r0, #1
1a000a78:	d1ee      	bne.n	1a000a58 <_task_init+0x48>
1a000a7a:	e7e9      	b.n	1a000a50 <_task_init+0x40>
	xErrorHandler = xTaskCreate(led_task,
1a000a7c:	2300      	movs	r3, #0
1a000a7e:	9301      	str	r3, [sp, #4]
1a000a80:	2201      	movs	r2, #1
1a000a82:	9200      	str	r2, [sp, #0]
1a000a84:	22b4      	movs	r2, #180	; 0xb4
1a000a86:	4931      	ldr	r1, [pc, #196]	; (1a000b4c <_task_init+0x13c>)
1a000a88:	4831      	ldr	r0, [pc, #196]	; (1a000b50 <_task_init+0x140>)
1a000a8a:	f001 f9a4 	bl	1a001dd6 <xTaskCreate>
	if(xErrorHandler == pdPASS){
1a000a8e:	2801      	cmp	r0, #1
1a000a90:	d037      	beq.n	1a000b02 <_task_init+0xf2>
	xErrorHandler = xTaskCreate(system_task,
1a000a92:	2300      	movs	r3, #0
1a000a94:	9301      	str	r3, [sp, #4]
1a000a96:	2201      	movs	r2, #1
1a000a98:	9200      	str	r2, [sp, #0]
1a000a9a:	22b4      	movs	r2, #180	; 0xb4
1a000a9c:	492d      	ldr	r1, [pc, #180]	; (1a000b54 <_task_init+0x144>)
1a000a9e:	482e      	ldr	r0, [pc, #184]	; (1a000b58 <_task_init+0x148>)
1a000aa0:	f001 f999 	bl	1a001dd6 <xTaskCreate>
	if(xErrorHandler == pdPASS){
1a000aa4:	2801      	cmp	r0, #1
1a000aa6:	d030      	beq.n	1a000b0a <_task_init+0xfa>
	xErrorHandler = xTaskCreate(lcd_task,
1a000aa8:	2300      	movs	r3, #0
1a000aaa:	9301      	str	r3, [sp, #4]
1a000aac:	2201      	movs	r2, #1
1a000aae:	9200      	str	r2, [sp, #0]
1a000ab0:	22b4      	movs	r2, #180	; 0xb4
1a000ab2:	492a      	ldr	r1, [pc, #168]	; (1a000b5c <_task_init+0x14c>)
1a000ab4:	482a      	ldr	r0, [pc, #168]	; (1a000b60 <_task_init+0x150>)
1a000ab6:	f001 f98e 	bl	1a001dd6 <xTaskCreate>
	if(xErrorHandler == pdPASS){
1a000aba:	2801      	cmp	r0, #1
1a000abc:	d029      	beq.n	1a000b12 <_task_init+0x102>
	if (NULL == (lcd_queue = xQueueCreate(3,sizeof(read_tecla)))){
1a000abe:	2200      	movs	r2, #0
1a000ac0:	2101      	movs	r1, #1
1a000ac2:	2003      	movs	r0, #3
1a000ac4:	f000 fb60 	bl	1a001188 <xQueueGenericCreate>
1a000ac8:	4b26      	ldr	r3, [pc, #152]	; (1a000b64 <_task_init+0x154>)
1a000aca:	6018      	str	r0, [r3, #0]
1a000acc:	b328      	cbz	r0, 1a000b1a <_task_init+0x10a>
	if (NULL == (led_queue = xQueueCreate(3,sizeof(read_tecla)))){
1a000ace:	2200      	movs	r2, #0
1a000ad0:	2101      	movs	r1, #1
1a000ad2:	2003      	movs	r0, #3
1a000ad4:	f000 fb58 	bl	1a001188 <xQueueGenericCreate>
1a000ad8:	4b23      	ldr	r3, [pc, #140]	; (1a000b68 <_task_init+0x158>)
1a000ada:	6018      	str	r0, [r3, #0]
1a000adc:	b308      	cbz	r0, 1a000b22 <_task_init+0x112>
	if (NULL == (system_access.sem_system = xSemaphoreCreateBinary())){
1a000ade:	2203      	movs	r2, #3
1a000ae0:	2100      	movs	r1, #0
1a000ae2:	2001      	movs	r0, #1
1a000ae4:	f000 fb50 	bl	1a001188 <xQueueGenericCreate>
1a000ae8:	4b20      	ldr	r3, [pc, #128]	; (1a000b6c <_task_init+0x15c>)
1a000aea:	6018      	str	r0, [r3, #0]
1a000aec:	b1e8      	cbz	r0, 1a000b2a <_task_init+0x11a>
	if (NULL == (uart_struct.uart_mutex = xSemaphoreCreateMutex())){
1a000aee:	2001      	movs	r0, #1
1a000af0:	f000 fc3e 	bl	1a001370 <xQueueCreateMutex>
1a000af4:	4b1e      	ldr	r3, [pc, #120]	; (1a000b70 <_task_init+0x160>)
1a000af6:	6098      	str	r0, [r3, #8]
1a000af8:	b1d8      	cbz	r0, 1a000b32 <_task_init+0x122>
	first_init();
1a000afa:	f7ff ff6b 	bl	1a0009d4 <first_init>
}
1a000afe:	b002      	add	sp, #8
1a000b00:	bd70      	pop	{r4, r5, r6, pc}
		printf("Tarea led creada\r\n");
1a000b02:	481c      	ldr	r0, [pc, #112]	; (1a000b74 <_task_init+0x164>)
1a000b04:	f004 ff54 	bl	1a0059b0 <puts>
1a000b08:	e7c3      	b.n	1a000a92 <_task_init+0x82>
		printf("Tarea system creada\r\n");
1a000b0a:	481b      	ldr	r0, [pc, #108]	; (1a000b78 <_task_init+0x168>)
1a000b0c:	f004 ff50 	bl	1a0059b0 <puts>
1a000b10:	e7ca      	b.n	1a000aa8 <_task_init+0x98>
		printf("Tarea lcd creada\r\n");
1a000b12:	481a      	ldr	r0, [pc, #104]	; (1a000b7c <_task_init+0x16c>)
1a000b14:	f004 ff4c 	bl	1a0059b0 <puts>
1a000b18:	e7d1      	b.n	1a000abe <_task_init+0xae>
		printf("Error al crear queue LCD\r\n");
1a000b1a:	4819      	ldr	r0, [pc, #100]	; (1a000b80 <_task_init+0x170>)
1a000b1c:	f004 ff48 	bl	1a0059b0 <puts>
1a000b20:	e7d5      	b.n	1a000ace <_task_init+0xbe>
		printf("Error al crear queue led\r\n");
1a000b22:	4818      	ldr	r0, [pc, #96]	; (1a000b84 <_task_init+0x174>)
1a000b24:	f004 ff44 	bl	1a0059b0 <puts>
1a000b28:	e7d9      	b.n	1a000ade <_task_init+0xce>
		printf("Error al crear semaforo led\r\n");
1a000b2a:	4817      	ldr	r0, [pc, #92]	; (1a000b88 <_task_init+0x178>)
1a000b2c:	f004 ff40 	bl	1a0059b0 <puts>
1a000b30:	e7dd      	b.n	1a000aee <_task_init+0xde>
		printf("Error al crear mutex\r\n");
1a000b32:	4816      	ldr	r0, [pc, #88]	; (1a000b8c <_task_init+0x17c>)
1a000b34:	f004 ff3c 	bl	1a0059b0 <puts>
1a000b38:	e7df      	b.n	1a000afa <_task_init+0xea>
1a000b3a:	bf00      	nop
1a000b3c:	1a005e60 	.word	0x1a005e60
1a000b40:	1a005e90 	.word	0x1a005e90
1a000b44:	1a005e84 	.word	0x1a005e84
1a000b48:	1a000829 	.word	0x1a000829
1a000b4c:	1a005ea8 	.word	0x1a005ea8
1a000b50:	1a000c39 	.word	0x1a000c39
1a000b54:	1a005ec8 	.word	0x1a005ec8
1a000b58:	1a000cd9 	.word	0x1a000cd9
1a000b5c:	1a005eec 	.word	0x1a005eec
1a000b60:	1a000925 	.word	0x1a000925
1a000b64:	10002c08 	.word	0x10002c08
1a000b68:	10002bfc 	.word	0x10002bfc
1a000b6c:	10002c00 	.word	0x10002c00
1a000b70:	10002be8 	.word	0x10002be8
1a000b74:	1a005eb4 	.word	0x1a005eb4
1a000b78:	1a005ed4 	.word	0x1a005ed4
1a000b7c:	1a005ef8 	.word	0x1a005ef8
1a000b80:	1a005f0c 	.word	0x1a005f0c
1a000b84:	1a005f28 	.word	0x1a005f28
1a000b88:	1a005f44 	.word	0x1a005f44
1a000b8c:	1a005f64 	.word	0x1a005f64

1a000b90 <system_status>:
			/* Fin seccion critica para imprimir en LCD */
		}
	}
}

void system_status(system_control_t *system_access){
1a000b90:	b510      	push	{r4, lr}
1a000b92:	4604      	mov	r4, r0

	switch(system_access->system_status){
1a000b94:	7943      	ldrb	r3, [r0, #5]
1a000b96:	2b03      	cmp	r3, #3
1a000b98:	d809      	bhi.n	1a000bae <system_status+0x1e>
1a000b9a:	e8df f003 	tbb	[pc, r3]
1a000b9e:	0902      	.short	0x0902
1a000ba0:	2e16      	.short	0x2e16
	case ACTIVATED:
		gpioWrite(LED3, ON);
1a000ba2:	2101      	movs	r1, #1
1a000ba4:	202d      	movs	r0, #45	; 0x2d
1a000ba6:	f003 fd31 	bl	1a00460c <gpioWrite>
		/* Habilita interrupciones de teclas */
		enable_buttons_interrupt();
1a000baa:	f7ff fcdb 	bl	1a000564 <enable_buttons_interrupt>
		disable_buttons_interrupt();
		break;
	default:
		break;
	}
}
1a000bae:	bd10      	pop	{r4, pc}
		gpioWrite(LEDB, ON);
1a000bb0:	2101      	movs	r1, #1
1a000bb2:	202a      	movs	r0, #42	; 0x2a
1a000bb4:	f003 fd2a 	bl	1a00460c <gpioWrite>
		gpioWrite(LED1, OFF);
1a000bb8:	2100      	movs	r1, #0
1a000bba:	202b      	movs	r0, #43	; 0x2b
1a000bbc:	f003 fd26 	bl	1a00460c <gpioWrite>
		gpioWrite(GPIO8, OFF);
1a000bc0:	2100      	movs	r1, #0
1a000bc2:	200b      	movs	r0, #11
1a000bc4:	f003 fd22 	bl	1a00460c <gpioWrite>
		break;
1a000bc8:	e7f1      	b.n	1a000bae <system_status+0x1e>
		gpioWrite(LEDB, OFF);
1a000bca:	2100      	movs	r1, #0
1a000bcc:	202a      	movs	r0, #42	; 0x2a
1a000bce:	f003 fd1d 	bl	1a00460c <gpioWrite>
		gpioWrite(LED1, ON);
1a000bd2:	2101      	movs	r1, #1
1a000bd4:	202b      	movs	r0, #43	; 0x2b
1a000bd6:	f003 fd19 	bl	1a00460c <gpioWrite>
		gpioWrite(LED3, OFF);
1a000bda:	2100      	movs	r1, #0
1a000bdc:	202d      	movs	r0, #45	; 0x2d
1a000bde:	f003 fd15 	bl	1a00460c <gpioWrite>
		gpioWrite(GPIO8, ON);
1a000be2:	2101      	movs	r1, #1
1a000be4:	200b      	movs	r0, #11
1a000be6:	f003 fd11 	bl	1a00460c <gpioWrite>
		system_access->system_flag = FALSE;
1a000bea:	2300      	movs	r3, #0
1a000bec:	7123      	strb	r3, [r4, #4]
		uart_struct.byte_ring = 'R';
1a000bee:	4b11      	ldr	r3, [pc, #68]	; (1a000c34 <system_status+0xa4>)
1a000bf0:	2252      	movs	r2, #82	; 0x52
1a000bf2:	741a      	strb	r2, [r3, #16]
		disable_buttons_interrupt();
1a000bf4:	f7ff fcd4 	bl	1a0005a0 <disable_buttons_interrupt>
		break;
1a000bf8:	e7d9      	b.n	1a000bae <system_status+0x1e>
		gpioWrite(LED1, OFF);
1a000bfa:	2100      	movs	r1, #0
1a000bfc:	202b      	movs	r0, #43	; 0x2b
1a000bfe:	f003 fd05 	bl	1a00460c <gpioWrite>
		gpioWrite(LEDB, OFF);
1a000c02:	2100      	movs	r1, #0
1a000c04:	202a      	movs	r0, #42	; 0x2a
1a000c06:	f003 fd01 	bl	1a00460c <gpioWrite>
		gpioWrite(LED2, ON);
1a000c0a:	2101      	movs	r1, #1
1a000c0c:	202c      	movs	r0, #44	; 0x2c
1a000c0e:	f003 fcfd 	bl	1a00460c <gpioWrite>
		gpioWrite(LED3, OFF);
1a000c12:	2100      	movs	r1, #0
1a000c14:	202d      	movs	r0, #45	; 0x2d
1a000c16:	f003 fcf9 	bl	1a00460c <gpioWrite>
		gpioWrite(GPIO8, ON);
1a000c1a:	2101      	movs	r1, #1
1a000c1c:	200b      	movs	r0, #11
1a000c1e:	f003 fcf5 	bl	1a00460c <gpioWrite>
		system_access->system_flag = FALSE;
1a000c22:	2300      	movs	r3, #0
1a000c24:	7123      	strb	r3, [r4, #4]
		uart_struct.byte_ring = 'R';
1a000c26:	4b03      	ldr	r3, [pc, #12]	; (1a000c34 <system_status+0xa4>)
1a000c28:	2252      	movs	r2, #82	; 0x52
1a000c2a:	741a      	strb	r2, [r3, #16]
		disable_buttons_interrupt();
1a000c2c:	f7ff fcb8 	bl	1a0005a0 <disable_buttons_interrupt>
}
1a000c30:	e7bd      	b.n	1a000bae <system_status+0x1e>
1a000c32:	bf00      	nop
1a000c34:	10002be8 	.word	0x10002be8

1a000c38 <led_task>:
void led_task(void* taskParmPt){
1a000c38:	b500      	push	{lr}
1a000c3a:	b083      	sub	sp, #12
1a000c3c:	e019      	b.n	1a000c72 <led_task+0x3a>
				printf("El codigo de acceso es %s. Sistema %s\r\n", rele_code_t[read_led.str_button], rele_state_t[read_led.str_button]);
1a000c3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
1a000c42:	0093      	lsls	r3, r2, #2
1a000c44:	1898      	adds	r0, r3, r2
1a000c46:	0041      	lsls	r1, r0, #1
1a000c48:	460a      	mov	r2, r1
1a000c4a:	4b1d      	ldr	r3, [pc, #116]	; (1a000cc0 <led_task+0x88>)
1a000c4c:	441a      	add	r2, r3
1a000c4e:	4b1d      	ldr	r3, [pc, #116]	; (1a000cc4 <led_task+0x8c>)
1a000c50:	4419      	add	r1, r3
1a000c52:	481d      	ldr	r0, [pc, #116]	; (1a000cc8 <led_task+0x90>)
1a000c54:	f004 fe26 	bl	1a0058a4 <iprintf>
				xSemaphoreGive( uart_struct.uart_mutex );
1a000c58:	2300      	movs	r3, #0
1a000c5a:	461a      	mov	r2, r3
1a000c5c:	4619      	mov	r1, r3
1a000c5e:	481b      	ldr	r0, [pc, #108]	; (1a000ccc <led_task+0x94>)
1a000c60:	6880      	ldr	r0, [r0, #8]
1a000c62:	f000 fab9 	bl	1a0011d8 <xQueueGenericSend>
1a000c66:	e015      	b.n	1a000c94 <led_task+0x5c>
				system_access.system_status = OPEN;
1a000c68:	4819      	ldr	r0, [pc, #100]	; (1a000cd0 <led_task+0x98>)
1a000c6a:	2301      	movs	r3, #1
1a000c6c:	7143      	strb	r3, [r0, #5]
				system_status(&system_access);
1a000c6e:	f7ff ff8f 	bl	1a000b90 <system_status>
		if (xQueueReceive(led_queue, &read_led, portMAX_DELAY)){
1a000c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c76:	a901      	add	r1, sp, #4
1a000c78:	4b16      	ldr	r3, [pc, #88]	; (1a000cd4 <led_task+0x9c>)
1a000c7a:	6818      	ldr	r0, [r3, #0]
1a000c7c:	f000 fc44 	bl	1a001508 <xQueueReceive>
1a000c80:	2800      	cmp	r0, #0
1a000c82:	d0f6      	beq.n	1a000c72 <led_task+0x3a>
			if (pdTRUE == xSemaphoreTake( uart_struct.uart_mutex , portMAX_DELAY)){
1a000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000c88:	4b10      	ldr	r3, [pc, #64]	; (1a000ccc <led_task+0x94>)
1a000c8a:	6898      	ldr	r0, [r3, #8]
1a000c8c:	f000 fcea 	bl	1a001664 <xQueueSemaphoreTake>
1a000c90:	2801      	cmp	r0, #1
1a000c92:	d0d4      	beq.n	1a000c3e <led_task+0x6>
			switch(read_led.str_button){
1a000c94:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a000c98:	2b01      	cmp	r3, #1
1a000c9a:	d00a      	beq.n	1a000cb2 <led_task+0x7a>
1a000c9c:	b25a      	sxtb	r2, r3
1a000c9e:	2a00      	cmp	r2, #0
1a000ca0:	d0e2      	beq.n	1a000c68 <led_task+0x30>
1a000ca2:	2b02      	cmp	r3, #2
1a000ca4:	d1e5      	bne.n	1a000c72 <led_task+0x3a>
				system_access.system_status = WRONG;
1a000ca6:	480a      	ldr	r0, [pc, #40]	; (1a000cd0 <led_task+0x98>)
1a000ca8:	2303      	movs	r3, #3
1a000caa:	7143      	strb	r3, [r0, #5]
				system_status(&system_access);
1a000cac:	f7ff ff70 	bl	1a000b90 <system_status>
				break;
1a000cb0:	e7df      	b.n	1a000c72 <led_task+0x3a>
				system_access.system_status = CLOSED;
1a000cb2:	4807      	ldr	r0, [pc, #28]	; (1a000cd0 <led_task+0x98>)
1a000cb4:	2302      	movs	r3, #2
1a000cb6:	7143      	strb	r3, [r0, #5]
				system_status(&system_access);
1a000cb8:	f7ff ff6a 	bl	1a000b90 <system_status>
				break;
1a000cbc:	e7d9      	b.n	1a000c72 <led_task+0x3a>
1a000cbe:	bf00      	nop
1a000cc0:	1000002c 	.word	0x1000002c
1a000cc4:	1000000c 	.word	0x1000000c
1a000cc8:	1a005f98 	.word	0x1a005f98
1a000ccc:	10002be8 	.word	0x10002be8
1a000cd0:	10002c00 	.word	0x10002c00
1a000cd4:	10002bfc 	.word	0x10002bfc

1a000cd8 <system_task>:
void system_task(void* taskParmPt){
1a000cd8:	b500      	push	{lr}
1a000cda:	b083      	sub	sp, #12
		xSemaphoreTake( system_access.sem_system, portMAX_DELAY );
1a000cdc:	4c0e      	ldr	r4, [pc, #56]	; (1a000d18 <system_task+0x40>)
1a000cde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000ce2:	6820      	ldr	r0, [r4, #0]
1a000ce4:	f000 fcbe 	bl	1a001664 <xQueueSemaphoreTake>
		tec_init.str_button = 3;
1a000ce8:	2303      	movs	r3, #3
1a000cea:	f88d 3004 	strb.w	r3, [sp, #4]
		xQueueSend(lcd_queue, &tec_init, portMAX_DELAY);
1a000cee:	2300      	movs	r3, #0
1a000cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000cf4:	a901      	add	r1, sp, #4
1a000cf6:	4809      	ldr	r0, [pc, #36]	; (1a000d1c <system_task+0x44>)
1a000cf8:	6800      	ldr	r0, [r0, #0]
1a000cfa:	f000 fa6d 	bl	1a0011d8 <xQueueGenericSend>
		system_access.system_flag = TRUE;
1a000cfe:	2301      	movs	r3, #1
1a000d00:	7123      	strb	r3, [r4, #4]
		system_access.system_status = ACTIVATED;
1a000d02:	2300      	movs	r3, #0
1a000d04:	7163      	strb	r3, [r4, #5]
		system_status(&system_access);
1a000d06:	4620      	mov	r0, r4
1a000d08:	f7ff ff42 	bl	1a000b90 <system_status>
		vTaskDelay(1000/portTICK_RATE_MS);
1a000d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000d10:	f001 f9f6 	bl	1a002100 <vTaskDelay>
1a000d14:	e7e2      	b.n	1a000cdc <system_task+0x4>
1a000d16:	bf00      	nop
1a000d18:	10002c00 	.word	0x10002c00
1a000d1c:	10002c08 	.word	0x10002c08

1a000d20 <initialise_monitor_handles>:
}
1a000d20:	4770      	bx	lr
1a000d22:	Address 0x000000001a000d22 is out of bounds.


1a000d24 <Reset_Handler>:
void Reset_Handler(void) {
1a000d24:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000d26:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000d28:	4b19      	ldr	r3, [pc, #100]	; (1a000d90 <Reset_Handler+0x6c>)
1a000d2a:	4a1a      	ldr	r2, [pc, #104]	; (1a000d94 <Reset_Handler+0x70>)
1a000d2c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000d2e:	3304      	adds	r3, #4
1a000d30:	4a19      	ldr	r2, [pc, #100]	; (1a000d98 <Reset_Handler+0x74>)
1a000d32:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000d34:	2300      	movs	r3, #0
1a000d36:	e005      	b.n	1a000d44 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000d38:	4a18      	ldr	r2, [pc, #96]	; (1a000d9c <Reset_Handler+0x78>)
1a000d3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000d3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000d42:	3301      	adds	r3, #1
1a000d44:	2b07      	cmp	r3, #7
1a000d46:	d9f7      	bls.n	1a000d38 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000d48:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000d4a:	4b15      	ldr	r3, [pc, #84]	; (1a000da0 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000d4c:	e007      	b.n	1a000d5e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000d4e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000d52:	689a      	ldr	r2, [r3, #8]
1a000d54:	6859      	ldr	r1, [r3, #4]
1a000d56:	6818      	ldr	r0, [r3, #0]
1a000d58:	f7ff fa17 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000d5c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000d5e:	4a11      	ldr	r2, [pc, #68]	; (1a000da4 <Reset_Handler+0x80>)
1a000d60:	4293      	cmp	r3, r2
1a000d62:	d3f4      	bcc.n	1a000d4e <Reset_Handler+0x2a>
1a000d64:	e006      	b.n	1a000d74 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000d66:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000d68:	6859      	ldr	r1, [r3, #4]
1a000d6a:	f854 0b08 	ldr.w	r0, [r4], #8
1a000d6e:	f7ff fa1b 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000d72:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000d74:	4a0c      	ldr	r2, [pc, #48]	; (1a000da8 <Reset_Handler+0x84>)
1a000d76:	4293      	cmp	r3, r2
1a000d78:	d3f5      	bcc.n	1a000d66 <Reset_Handler+0x42>
    SystemInit();
1a000d7a:	f003 f853 	bl	1a003e24 <SystemInit>
    __libc_init_array();
1a000d7e:	f004 f9cf 	bl	1a005120 <__libc_init_array>
    initialise_monitor_handles();
1a000d82:	f7ff ffcd 	bl	1a000d20 <initialise_monitor_handles>
    main();
1a000d86:	f7ff fd35 	bl	1a0007f4 <main>
        __asm__ volatile("wfi");
1a000d8a:	bf30      	wfi
1a000d8c:	e7fd      	b.n	1a000d8a <Reset_Handler+0x66>
1a000d8e:	bf00      	nop
1a000d90:	40053100 	.word	0x40053100
1a000d94:	10df1000 	.word	0x10df1000
1a000d98:	01dff7ff 	.word	0x01dff7ff
1a000d9c:	e000e280 	.word	0xe000e280
1a000da0:	1a000114 	.word	0x1a000114
1a000da4:	1a000150 	.word	0x1a000150
1a000da8:	1a000178 	.word	0x1a000178

1a000dac <_fini>:
void _fini(void) {}
1a000dac:	4770      	bx	lr

1a000dae <_init>:
void _init(void) {}
1a000dae:	4770      	bx	lr

1a000db0 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000db0:	2309      	movs	r3, #9
1a000db2:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000db8:	4770      	bx	lr

1a000dba <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000dba:	2358      	movs	r3, #88	; 0x58
1a000dbc:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000dc2:	4770      	bx	lr

1a000dc4 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000dc4:	2902      	cmp	r1, #2
1a000dc6:	d904      	bls.n	1a000dd2 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000dc8:	2309      	movs	r3, #9
1a000dca:	6003      	str	r3, [r0, #0]
       return -1;
1a000dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000dd0:	4770      	bx	lr
       return 1;
1a000dd2:	2001      	movs	r0, #1
   }
}
1a000dd4:	4770      	bx	lr

1a000dd6 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000dd6:	2358      	movs	r3, #88	; 0x58
1a000dd8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000dde:	4770      	bx	lr

1a000de0 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000de0:	2902      	cmp	r1, #2
1a000de2:	d81f      	bhi.n	1a000e24 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000de8:	461d      	mov	r5, r3
1a000dea:	4617      	mov	r7, r2
1a000dec:	4606      	mov	r6, r0
  size_t i = 0;
1a000dee:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000df0:	42ac      	cmp	r4, r5
1a000df2:	d211      	bcs.n	1a000e18 <_read_r+0x38>
         int c = __stdio_getchar();
1a000df4:	f002 f8ed 	bl	1a002fd2 <__stdio_getchar>
         if( c != -1 ){
1a000df8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000dfc:	d0f8      	beq.n	1a000df0 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000dfe:	f104 0801 	add.w	r8, r4, #1
1a000e02:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000e04:	280d      	cmp	r0, #13
1a000e06:	d003      	beq.n	1a000e10 <_read_r+0x30>
1a000e08:	280a      	cmp	r0, #10
1a000e0a:	d001      	beq.n	1a000e10 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000e0c:	4644      	mov	r4, r8
1a000e0e:	e7ef      	b.n	1a000df0 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000e10:	f002 f8df 	bl	1a002fd2 <__stdio_getchar>
               return i;
1a000e14:	4640      	mov	r0, r8
1a000e16:	e003      	b.n	1a000e20 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000e18:	2313      	movs	r3, #19
1a000e1a:	6033      	str	r3, [r6, #0]
      return -1;
1a000e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000e24:	2313      	movs	r3, #19
1a000e26:	6003      	str	r3, [r0, #0]
      return -1;
1a000e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000e2c:	4770      	bx	lr

1a000e2e <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000e2e:	2902      	cmp	r1, #2
1a000e30:	d80c      	bhi.n	1a000e4c <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000e32:	b570      	push	{r4, r5, r6, lr}
1a000e34:	461d      	mov	r5, r3
1a000e36:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000e38:	2400      	movs	r4, #0
1a000e3a:	42ac      	cmp	r4, r5
1a000e3c:	d204      	bcs.n	1a000e48 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000e3e:	5d30      	ldrb	r0, [r6, r4]
1a000e40:	f002 f8c2 	bl	1a002fc8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000e44:	3401      	adds	r4, #1
1a000e46:	e7f8      	b.n	1a000e3a <_write_r+0xc>
       return n;
1a000e48:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000e4a:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000e4c:	2313      	movs	r3, #19
1a000e4e:	6003      	str	r3, [r0, #0]
       return -1;
1a000e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000e54:	4770      	bx	lr
1a000e56:	Address 0x000000001a000e56 is out of bounds.


1a000e58 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000e58:	4b05      	ldr	r3, [pc, #20]	; (1a000e70 <_sbrk_r+0x18>)
1a000e5a:	681b      	ldr	r3, [r3, #0]
1a000e5c:	b123      	cbz	r3, 1a000e68 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000e5e:	4b04      	ldr	r3, [pc, #16]	; (1a000e70 <_sbrk_r+0x18>)
1a000e60:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000e62:	4401      	add	r1, r0
1a000e64:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000e66:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000e68:	4b01      	ldr	r3, [pc, #4]	; (1a000e70 <_sbrk_r+0x18>)
1a000e6a:	4a02      	ldr	r2, [pc, #8]	; (1a000e74 <_sbrk_r+0x1c>)
1a000e6c:	601a      	str	r2, [r3, #0]
1a000e6e:	e7f6      	b.n	1a000e5e <_sbrk_r+0x6>
1a000e70:	10000148 	.word	0x10000148
1a000e74:	10002c64 	.word	0x10002c64

1a000e78 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000e78:	b538      	push	{r3, r4, r5, lr}
1a000e7a:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000e7c:	f010 0f07 	tst.w	r0, #7
1a000e80:	d002      	beq.n	1a000e88 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000e82:	f020 0407 	bic.w	r4, r0, #7
1a000e86:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000e88:	f001 f822 	bl	1a001ed0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000e8c:	4b13      	ldr	r3, [pc, #76]	; (1a000edc <pvPortMalloc+0x64>)
1a000e8e:	681b      	ldr	r3, [r3, #0]
1a000e90:	b17b      	cbz	r3, 1a000eb2 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a000e92:	4b13      	ldr	r3, [pc, #76]	; (1a000ee0 <pvPortMalloc+0x68>)
1a000e94:	681b      	ldr	r3, [r3, #0]
1a000e96:	441c      	add	r4, r3
1a000e98:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000e9c:	4294      	cmp	r4, r2
1a000e9e:	d80e      	bhi.n	1a000ebe <pvPortMalloc+0x46>
1a000ea0:	42a3      	cmp	r3, r4
1a000ea2:	d310      	bcc.n	1a000ec6 <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000ea4:	f001 f8ae 	bl	1a002004 <xTaskResumeAll>
void *pvReturn = NULL;
1a000ea8:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000eaa:	f000 fdb5 	bl	1a001a18 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a000eae:	4628      	mov	r0, r5
1a000eb0:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000eb2:	4b0c      	ldr	r3, [pc, #48]	; (1a000ee4 <pvPortMalloc+0x6c>)
1a000eb4:	f023 0307 	bic.w	r3, r3, #7
1a000eb8:	4a08      	ldr	r2, [pc, #32]	; (1a000edc <pvPortMalloc+0x64>)
1a000eba:	6013      	str	r3, [r2, #0]
1a000ebc:	e7e9      	b.n	1a000e92 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a000ebe:	f001 f8a1 	bl	1a002004 <xTaskResumeAll>
void *pvReturn = NULL;
1a000ec2:	2500      	movs	r5, #0
1a000ec4:	e7f1      	b.n	1a000eaa <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a000ec6:	4a05      	ldr	r2, [pc, #20]	; (1a000edc <pvPortMalloc+0x64>)
1a000ec8:	6815      	ldr	r5, [r2, #0]
1a000eca:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000ecc:	4b04      	ldr	r3, [pc, #16]	; (1a000ee0 <pvPortMalloc+0x68>)
1a000ece:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a000ed0:	f001 f898 	bl	1a002004 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000ed4:	2d00      	cmp	r5, #0
1a000ed6:	d1ea      	bne.n	1a000eae <pvPortMalloc+0x36>
1a000ed8:	e7e7      	b.n	1a000eaa <pvPortMalloc+0x32>
1a000eda:	bf00      	nop
1a000edc:	1000014c 	.word	0x1000014c
1a000ee0:	10002150 	.word	0x10002150
1a000ee4:	10000158 	.word	0x10000158

1a000ee8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000ee8:	b140      	cbz	r0, 1a000efc <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000eea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eee:	f383 8811 	msr	BASEPRI, r3
1a000ef2:	f3bf 8f6f 	isb	sy
1a000ef6:	f3bf 8f4f 	dsb	sy
1a000efa:	e7fe      	b.n	1a000efa <vPortFree+0x12>
}
1a000efc:	4770      	bx	lr

1a000efe <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000efe:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000f00:	b123      	cbz	r3, 1a000f0c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000f02:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000f04:	6818      	ldr	r0, [r3, #0]
1a000f06:	f1c0 0007 	rsb	r0, r0, #7
1a000f0a:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000f0c:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000f0e:	4770      	bx	lr

1a000f10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000f10:	b510      	push	{r4, lr}
1a000f12:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000f14:	f001 fe06 	bl	1a002b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000f18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000f1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000f1c:	429a      	cmp	r2, r3
1a000f1e:	d004      	beq.n	1a000f2a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000f20:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000f22:	f001 fe21 	bl	1a002b68 <vPortExitCritical>

	return xReturn;
}
1a000f26:	4620      	mov	r0, r4
1a000f28:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000f2a:	2401      	movs	r4, #1
1a000f2c:	e7f9      	b.n	1a000f22 <prvIsQueueFull+0x12>

1a000f2e <prvIsQueueEmpty>:
{
1a000f2e:	b510      	push	{r4, lr}
1a000f30:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000f32:	f001 fdf7 	bl	1a002b24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000f36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000f38:	b923      	cbnz	r3, 1a000f44 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a000f3a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a000f3c:	f001 fe14 	bl	1a002b68 <vPortExitCritical>
}
1a000f40:	4620      	mov	r0, r4
1a000f42:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a000f44:	2400      	movs	r4, #0
1a000f46:	e7f9      	b.n	1a000f3c <prvIsQueueEmpty+0xe>

1a000f48 <prvCopyDataToQueue>:
{
1a000f48:	b570      	push	{r4, r5, r6, lr}
1a000f4a:	4604      	mov	r4, r0
1a000f4c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000f4e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000f50:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000f52:	b95a      	cbnz	r2, 1a000f6c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000f54:	6803      	ldr	r3, [r0, #0]
1a000f56:	b11b      	cbz	r3, 1a000f60 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000f58:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000f5a:	3501      	adds	r5, #1
1a000f5c:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000f5e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000f60:	6840      	ldr	r0, [r0, #4]
1a000f62:	f001 fa95 	bl	1a002490 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000f66:	2300      	movs	r3, #0
1a000f68:	6063      	str	r3, [r4, #4]
1a000f6a:	e7f6      	b.n	1a000f5a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000f6c:	b96e      	cbnz	r6, 1a000f8a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000f6e:	6880      	ldr	r0, [r0, #8]
1a000f70:	f004 f8fd 	bl	1a00516e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000f74:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000f76:	68a3      	ldr	r3, [r4, #8]
1a000f78:	4413      	add	r3, r2
1a000f7a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000f7c:	6862      	ldr	r2, [r4, #4]
1a000f7e:	4293      	cmp	r3, r2
1a000f80:	d319      	bcc.n	1a000fb6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000f82:	6823      	ldr	r3, [r4, #0]
1a000f84:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000f86:	2000      	movs	r0, #0
1a000f88:	e7e7      	b.n	1a000f5a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000f8a:	68c0      	ldr	r0, [r0, #12]
1a000f8c:	f004 f8ef 	bl	1a00516e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000f90:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000f92:	4252      	negs	r2, r2
1a000f94:	68e3      	ldr	r3, [r4, #12]
1a000f96:	4413      	add	r3, r2
1a000f98:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000f9a:	6821      	ldr	r1, [r4, #0]
1a000f9c:	428b      	cmp	r3, r1
1a000f9e:	d202      	bcs.n	1a000fa6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000fa0:	6863      	ldr	r3, [r4, #4]
1a000fa2:	441a      	add	r2, r3
1a000fa4:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000fa6:	2e02      	cmp	r6, #2
1a000fa8:	d001      	beq.n	1a000fae <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000faa:	2000      	movs	r0, #0
1a000fac:	e7d5      	b.n	1a000f5a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000fae:	b125      	cbz	r5, 1a000fba <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000fb0:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000fb2:	2000      	movs	r0, #0
1a000fb4:	e7d1      	b.n	1a000f5a <prvCopyDataToQueue+0x12>
1a000fb6:	2000      	movs	r0, #0
1a000fb8:	e7cf      	b.n	1a000f5a <prvCopyDataToQueue+0x12>
1a000fba:	2000      	movs	r0, #0
1a000fbc:	e7cd      	b.n	1a000f5a <prvCopyDataToQueue+0x12>

1a000fbe <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000fbe:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000fc0:	b172      	cbz	r2, 1a000fe0 <prvCopyDataFromQueue+0x22>
{
1a000fc2:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000fc4:	68c3      	ldr	r3, [r0, #12]
1a000fc6:	4413      	add	r3, r2
1a000fc8:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000fca:	6844      	ldr	r4, [r0, #4]
1a000fcc:	42a3      	cmp	r3, r4
1a000fce:	d301      	bcc.n	1a000fd4 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000fd0:	6803      	ldr	r3, [r0, #0]
1a000fd2:	60c3      	str	r3, [r0, #12]
1a000fd4:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000fd6:	68c1      	ldr	r1, [r0, #12]
1a000fd8:	4620      	mov	r0, r4
1a000fda:	f004 f8c8 	bl	1a00516e <memcpy>
}
1a000fde:	bd10      	pop	{r4, pc}
1a000fe0:	4770      	bx	lr

1a000fe2 <prvUnlockQueue>:
{
1a000fe2:	b538      	push	{r3, r4, r5, lr}
1a000fe4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000fe6:	f001 fd9d 	bl	1a002b24 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000fea:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000fee:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000ff0:	e003      	b.n	1a000ffa <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000ff2:	f001 f9d9 	bl	1a0023a8 <vTaskMissedYield>
			--cTxLock;
1a000ff6:	3c01      	subs	r4, #1
1a000ff8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000ffa:	2c00      	cmp	r4, #0
1a000ffc:	dd08      	ble.n	1a001010 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000ffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001000:	b133      	cbz	r3, 1a001010 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001002:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a001006:	f001 f93b 	bl	1a002280 <xTaskRemoveFromEventList>
1a00100a:	2800      	cmp	r0, #0
1a00100c:	d0f3      	beq.n	1a000ff6 <prvUnlockQueue+0x14>
1a00100e:	e7f0      	b.n	1a000ff2 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001010:	23ff      	movs	r3, #255	; 0xff
1a001012:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a001016:	f001 fda7 	bl	1a002b68 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00101a:	f001 fd83 	bl	1a002b24 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00101e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a001022:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001024:	e003      	b.n	1a00102e <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a001026:	f001 f9bf 	bl	1a0023a8 <vTaskMissedYield>
				--cRxLock;
1a00102a:	3c01      	subs	r4, #1
1a00102c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00102e:	2c00      	cmp	r4, #0
1a001030:	dd08      	ble.n	1a001044 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001032:	692b      	ldr	r3, [r5, #16]
1a001034:	b133      	cbz	r3, 1a001044 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001036:	f105 0010 	add.w	r0, r5, #16
1a00103a:	f001 f921 	bl	1a002280 <xTaskRemoveFromEventList>
1a00103e:	2800      	cmp	r0, #0
1a001040:	d0f3      	beq.n	1a00102a <prvUnlockQueue+0x48>
1a001042:	e7f0      	b.n	1a001026 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a001044:	23ff      	movs	r3, #255	; 0xff
1a001046:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00104a:	f001 fd8d 	bl	1a002b68 <vPortExitCritical>
}
1a00104e:	bd38      	pop	{r3, r4, r5, pc}

1a001050 <xQueueGenericReset>:
{
1a001050:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a001052:	b1e0      	cbz	r0, 1a00108e <xQueueGenericReset+0x3e>
1a001054:	4604      	mov	r4, r0
1a001056:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a001058:	f001 fd64 	bl	1a002b24 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00105c:	6821      	ldr	r1, [r4, #0]
1a00105e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001060:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001062:	fb03 1002 	mla	r0, r3, r2, r1
1a001066:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a001068:	2000      	movs	r0, #0
1a00106a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a00106c:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a00106e:	3a01      	subs	r2, #1
1a001070:	fb02 1303 	mla	r3, r2, r3, r1
1a001074:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a001076:	23ff      	movs	r3, #255	; 0xff
1a001078:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a00107c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a001080:	b9ed      	cbnz	r5, 1a0010be <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001082:	6923      	ldr	r3, [r4, #16]
1a001084:	b963      	cbnz	r3, 1a0010a0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a001086:	f001 fd6f 	bl	1a002b68 <vPortExitCritical>
}
1a00108a:	2001      	movs	r0, #1
1a00108c:	bd38      	pop	{r3, r4, r5, pc}
1a00108e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001092:	f383 8811 	msr	BASEPRI, r3
1a001096:	f3bf 8f6f 	isb	sy
1a00109a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a00109e:	e7fe      	b.n	1a00109e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0010a0:	f104 0010 	add.w	r0, r4, #16
1a0010a4:	f001 f8ec 	bl	1a002280 <xTaskRemoveFromEventList>
1a0010a8:	2800      	cmp	r0, #0
1a0010aa:	d0ec      	beq.n	1a001086 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a0010ac:	4b08      	ldr	r3, [pc, #32]	; (1a0010d0 <xQueueGenericReset+0x80>)
1a0010ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010b2:	601a      	str	r2, [r3, #0]
1a0010b4:	f3bf 8f4f 	dsb	sy
1a0010b8:	f3bf 8f6f 	isb	sy
1a0010bc:	e7e3      	b.n	1a001086 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0010be:	f104 0010 	add.w	r0, r4, #16
1a0010c2:	f000 fc34 	bl	1a00192e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0010c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010ca:	f000 fc30 	bl	1a00192e <vListInitialise>
1a0010ce:	e7da      	b.n	1a001086 <xQueueGenericReset+0x36>
1a0010d0:	e000ed04 	.word	0xe000ed04

1a0010d4 <prvInitialiseNewQueue>:
{
1a0010d4:	b538      	push	{r3, r4, r5, lr}
1a0010d6:	461d      	mov	r5, r3
1a0010d8:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0010da:	460b      	mov	r3, r1
1a0010dc:	b949      	cbnz	r1, 1a0010f2 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0010de:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0010e0:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0010e2:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0010e4:	2101      	movs	r1, #1
1a0010e6:	4620      	mov	r0, r4
1a0010e8:	f7ff ffb2 	bl	1a001050 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0010ec:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0010f0:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0010f2:	6022      	str	r2, [r4, #0]
1a0010f4:	e7f4      	b.n	1a0010e0 <prvInitialiseNewQueue+0xc>

1a0010f6 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0010f6:	b940      	cbnz	r0, 1a00110a <xQueueGenericCreateStatic+0x14>
1a0010f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010fc:	f383 8811 	msr	BASEPRI, r3
1a001100:	f3bf 8f6f 	isb	sy
1a001104:	f3bf 8f4f 	dsb	sy
1a001108:	e7fe      	b.n	1a001108 <xQueueGenericCreateStatic+0x12>
	{
1a00110a:	b510      	push	{r4, lr}
1a00110c:	b084      	sub	sp, #16
1a00110e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001110:	b153      	cbz	r3, 1a001128 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a001112:	b192      	cbz	r2, 1a00113a <xQueueGenericCreateStatic+0x44>
1a001114:	b989      	cbnz	r1, 1a00113a <xQueueGenericCreateStatic+0x44>
1a001116:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00111a:	f383 8811 	msr	BASEPRI, r3
1a00111e:	f3bf 8f6f 	isb	sy
1a001122:	f3bf 8f4f 	dsb	sy
1a001126:	e7fe      	b.n	1a001126 <xQueueGenericCreateStatic+0x30>
1a001128:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00112c:	f383 8811 	msr	BASEPRI, r3
1a001130:	f3bf 8f6f 	isb	sy
1a001134:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a001138:	e7fe      	b.n	1a001138 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a00113a:	b16a      	cbz	r2, 1a001158 <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a00113c:	2050      	movs	r0, #80	; 0x50
1a00113e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a001140:	9803      	ldr	r0, [sp, #12]
1a001142:	2850      	cmp	r0, #80	; 0x50
1a001144:	d013      	beq.n	1a00116e <xQueueGenericCreateStatic+0x78>
1a001146:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00114a:	f383 8811 	msr	BASEPRI, r3
1a00114e:	f3bf 8f6f 	isb	sy
1a001152:	f3bf 8f4f 	dsb	sy
1a001156:	e7fe      	b.n	1a001156 <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a001158:	2900      	cmp	r1, #0
1a00115a:	d0ef      	beq.n	1a00113c <xQueueGenericCreateStatic+0x46>
1a00115c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001160:	f383 8811 	msr	BASEPRI, r3
1a001164:	f3bf 8f6f 	isb	sy
1a001168:	f3bf 8f4f 	dsb	sy
1a00116c:	e7fe      	b.n	1a00116c <xQueueGenericCreateStatic+0x76>
1a00116e:	4620      	mov	r0, r4
1a001170:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a001172:	2301      	movs	r3, #1
1a001174:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001178:	9400      	str	r4, [sp, #0]
1a00117a:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a00117e:	f7ff ffa9 	bl	1a0010d4 <prvInitialiseNewQueue>
	}
1a001182:	4620      	mov	r0, r4
1a001184:	b004      	add	sp, #16
1a001186:	bd10      	pop	{r4, pc}

1a001188 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001188:	b940      	cbnz	r0, 1a00119c <xQueueGenericCreate+0x14>
1a00118a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00118e:	f383 8811 	msr	BASEPRI, r3
1a001192:	f3bf 8f6f 	isb	sy
1a001196:	f3bf 8f4f 	dsb	sy
1a00119a:	e7fe      	b.n	1a00119a <xQueueGenericCreate+0x12>
	{
1a00119c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00119e:	b083      	sub	sp, #12
1a0011a0:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0011a2:	b1b1      	cbz	r1, 1a0011d2 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0011a4:	fb01 f000 	mul.w	r0, r1, r0
1a0011a8:	4617      	mov	r7, r2
1a0011aa:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a0011ac:	3050      	adds	r0, #80	; 0x50
1a0011ae:	f7ff fe63 	bl	1a000e78 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a0011b2:	4605      	mov	r5, r0
1a0011b4:	b150      	cbz	r0, 1a0011cc <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a0011b6:	2300      	movs	r3, #0
1a0011b8:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0011bc:	9000      	str	r0, [sp, #0]
1a0011be:	463b      	mov	r3, r7
1a0011c0:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a0011c4:	4621      	mov	r1, r4
1a0011c6:	4630      	mov	r0, r6
1a0011c8:	f7ff ff84 	bl	1a0010d4 <prvInitialiseNewQueue>
	}
1a0011cc:	4628      	mov	r0, r5
1a0011ce:	b003      	add	sp, #12
1a0011d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a0011d2:	2000      	movs	r0, #0
1a0011d4:	e7e8      	b.n	1a0011a8 <xQueueGenericCreate+0x20>
1a0011d6:	Address 0x000000001a0011d6 is out of bounds.


1a0011d8 <xQueueGenericSend>:
{
1a0011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011da:	b085      	sub	sp, #20
1a0011dc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0011de:	b178      	cbz	r0, 1a001200 <xQueueGenericSend+0x28>
1a0011e0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0011e2:	b1b1      	cbz	r1, 1a001212 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0011e4:	2b02      	cmp	r3, #2
1a0011e6:	d120      	bne.n	1a00122a <xQueueGenericSend+0x52>
1a0011e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0011ea:	2a01      	cmp	r2, #1
1a0011ec:	d01d      	beq.n	1a00122a <xQueueGenericSend+0x52>
1a0011ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011f2:	f383 8811 	msr	BASEPRI, r3
1a0011f6:	f3bf 8f6f 	isb	sy
1a0011fa:	f3bf 8f4f 	dsb	sy
1a0011fe:	e7fe      	b.n	1a0011fe <xQueueGenericSend+0x26>
1a001200:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001204:	f383 8811 	msr	BASEPRI, r3
1a001208:	f3bf 8f6f 	isb	sy
1a00120c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001210:	e7fe      	b.n	1a001210 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001212:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001214:	2a00      	cmp	r2, #0
1a001216:	d0e5      	beq.n	1a0011e4 <xQueueGenericSend+0xc>
1a001218:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00121c:	f383 8811 	msr	BASEPRI, r3
1a001220:	f3bf 8f6f 	isb	sy
1a001224:	f3bf 8f4f 	dsb	sy
1a001228:	e7fe      	b.n	1a001228 <xQueueGenericSend+0x50>
1a00122a:	461e      	mov	r6, r3
1a00122c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00122e:	f001 f8c1 	bl	1a0023b4 <xTaskGetSchedulerState>
1a001232:	b950      	cbnz	r0, 1a00124a <xQueueGenericSend+0x72>
1a001234:	9b01      	ldr	r3, [sp, #4]
1a001236:	b153      	cbz	r3, 1a00124e <xQueueGenericSend+0x76>
1a001238:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00123c:	f383 8811 	msr	BASEPRI, r3
1a001240:	f3bf 8f6f 	isb	sy
1a001244:	f3bf 8f4f 	dsb	sy
1a001248:	e7fe      	b.n	1a001248 <xQueueGenericSend+0x70>
1a00124a:	2500      	movs	r5, #0
1a00124c:	e03b      	b.n	1a0012c6 <xQueueGenericSend+0xee>
1a00124e:	2500      	movs	r5, #0
1a001250:	e039      	b.n	1a0012c6 <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001252:	4632      	mov	r2, r6
1a001254:	4639      	mov	r1, r7
1a001256:	4620      	mov	r0, r4
1a001258:	f7ff fe76 	bl	1a000f48 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00125c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00125e:	b96b      	cbnz	r3, 1a00127c <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a001260:	b138      	cbz	r0, 1a001272 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a001262:	4b3c      	ldr	r3, [pc, #240]	; (1a001354 <xQueueGenericSend+0x17c>)
1a001264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001268:	601a      	str	r2, [r3, #0]
1a00126a:	f3bf 8f4f 	dsb	sy
1a00126e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001272:	f001 fc79 	bl	1a002b68 <vPortExitCritical>
				return pdPASS;
1a001276:	2001      	movs	r0, #1
}
1a001278:	b005      	add	sp, #20
1a00127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00127c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001280:	f000 fffe 	bl	1a002280 <xTaskRemoveFromEventList>
1a001284:	2800      	cmp	r0, #0
1a001286:	d0f4      	beq.n	1a001272 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a001288:	4b32      	ldr	r3, [pc, #200]	; (1a001354 <xQueueGenericSend+0x17c>)
1a00128a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00128e:	601a      	str	r2, [r3, #0]
1a001290:	f3bf 8f4f 	dsb	sy
1a001294:	f3bf 8f6f 	isb	sy
1a001298:	e7eb      	b.n	1a001272 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a00129a:	f001 fc65 	bl	1a002b68 <vPortExitCritical>
					return errQUEUE_FULL;
1a00129e:	2000      	movs	r0, #0
1a0012a0:	e7ea      	b.n	1a001278 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0012a2:	a802      	add	r0, sp, #8
1a0012a4:	f001 f832 	bl	1a00230c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0012a8:	2501      	movs	r5, #1
1a0012aa:	e019      	b.n	1a0012e0 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a0012ac:	2300      	movs	r3, #0
1a0012ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0012b2:	e021      	b.n	1a0012f8 <xQueueGenericSend+0x120>
1a0012b4:	2300      	movs	r3, #0
1a0012b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0012ba:	e023      	b.n	1a001304 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a0012bc:	4620      	mov	r0, r4
1a0012be:	f7ff fe90 	bl	1a000fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0012c2:	f000 fe9f 	bl	1a002004 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a0012c6:	f001 fc2d 	bl	1a002b24 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0012ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0012cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0012ce:	429a      	cmp	r2, r3
1a0012d0:	d3bf      	bcc.n	1a001252 <xQueueGenericSend+0x7a>
1a0012d2:	2e02      	cmp	r6, #2
1a0012d4:	d0bd      	beq.n	1a001252 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0012d6:	9b01      	ldr	r3, [sp, #4]
1a0012d8:	2b00      	cmp	r3, #0
1a0012da:	d0de      	beq.n	1a00129a <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a0012dc:	2d00      	cmp	r5, #0
1a0012de:	d0e0      	beq.n	1a0012a2 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a0012e0:	f001 fc42 	bl	1a002b68 <vPortExitCritical>
		vTaskSuspendAll();
1a0012e4:	f000 fdf4 	bl	1a001ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0012e8:	f001 fc1c 	bl	1a002b24 <vPortEnterCritical>
1a0012ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0012f0:	b25b      	sxtb	r3, r3
1a0012f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0012f6:	d0d9      	beq.n	1a0012ac <xQueueGenericSend+0xd4>
1a0012f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0012fc:	b25b      	sxtb	r3, r3
1a0012fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001302:	d0d7      	beq.n	1a0012b4 <xQueueGenericSend+0xdc>
1a001304:	f001 fc30 	bl	1a002b68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001308:	a901      	add	r1, sp, #4
1a00130a:	a802      	add	r0, sp, #8
1a00130c:	f001 f80a 	bl	1a002324 <xTaskCheckForTimeOut>
1a001310:	b9c8      	cbnz	r0, 1a001346 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001312:	4620      	mov	r0, r4
1a001314:	f7ff fdfc 	bl	1a000f10 <prvIsQueueFull>
1a001318:	2800      	cmp	r0, #0
1a00131a:	d0cf      	beq.n	1a0012bc <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a00131c:	9901      	ldr	r1, [sp, #4]
1a00131e:	f104 0010 	add.w	r0, r4, #16
1a001322:	f000 ff79 	bl	1a002218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001326:	4620      	mov	r0, r4
1a001328:	f7ff fe5b 	bl	1a000fe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00132c:	f000 fe6a 	bl	1a002004 <xTaskResumeAll>
1a001330:	2800      	cmp	r0, #0
1a001332:	d1c8      	bne.n	1a0012c6 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a001334:	4b07      	ldr	r3, [pc, #28]	; (1a001354 <xQueueGenericSend+0x17c>)
1a001336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00133a:	601a      	str	r2, [r3, #0]
1a00133c:	f3bf 8f4f 	dsb	sy
1a001340:	f3bf 8f6f 	isb	sy
1a001344:	e7bf      	b.n	1a0012c6 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a001346:	4620      	mov	r0, r4
1a001348:	f7ff fe4b 	bl	1a000fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00134c:	f000 fe5a 	bl	1a002004 <xTaskResumeAll>
			return errQUEUE_FULL;
1a001350:	2000      	movs	r0, #0
1a001352:	e791      	b.n	1a001278 <xQueueGenericSend+0xa0>
1a001354:	e000ed04 	.word	0xe000ed04

1a001358 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a001358:	b148      	cbz	r0, 1a00136e <prvInitialiseMutex+0x16>
	{
1a00135a:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a00135c:	2100      	movs	r1, #0
1a00135e:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a001360:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a001362:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a001364:	460b      	mov	r3, r1
1a001366:	460a      	mov	r2, r1
1a001368:	f7ff ff36 	bl	1a0011d8 <xQueueGenericSend>
	}
1a00136c:	bd08      	pop	{r3, pc}
1a00136e:	4770      	bx	lr

1a001370 <xQueueCreateMutex>:
	{
1a001370:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a001372:	4602      	mov	r2, r0
1a001374:	2100      	movs	r1, #0
1a001376:	2001      	movs	r0, #1
1a001378:	f7ff ff06 	bl	1a001188 <xQueueGenericCreate>
1a00137c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a00137e:	f7ff ffeb 	bl	1a001358 <prvInitialiseMutex>
	}
1a001382:	4620      	mov	r0, r4
1a001384:	bd10      	pop	{r4, pc}

1a001386 <xQueueGenericSendFromISR>:
{
1a001386:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a00138a:	b178      	cbz	r0, 1a0013ac <xQueueGenericSendFromISR+0x26>
1a00138c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00138e:	b1b1      	cbz	r1, 1a0013be <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001390:	2b02      	cmp	r3, #2
1a001392:	d120      	bne.n	1a0013d6 <xQueueGenericSendFromISR+0x50>
1a001394:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001396:	2801      	cmp	r0, #1
1a001398:	d01d      	beq.n	1a0013d6 <xQueueGenericSendFromISR+0x50>
1a00139a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00139e:	f383 8811 	msr	BASEPRI, r3
1a0013a2:	f3bf 8f6f 	isb	sy
1a0013a6:	f3bf 8f4f 	dsb	sy
1a0013aa:	e7fe      	b.n	1a0013aa <xQueueGenericSendFromISR+0x24>
1a0013ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013b0:	f383 8811 	msr	BASEPRI, r3
1a0013b4:	f3bf 8f6f 	isb	sy
1a0013b8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0013bc:	e7fe      	b.n	1a0013bc <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0013be:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0013c0:	2800      	cmp	r0, #0
1a0013c2:	d0e5      	beq.n	1a001390 <xQueueGenericSendFromISR+0xa>
1a0013c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013c8:	f383 8811 	msr	BASEPRI, r3
1a0013cc:	f3bf 8f6f 	isb	sy
1a0013d0:	f3bf 8f4f 	dsb	sy
1a0013d4:	e7fe      	b.n	1a0013d4 <xQueueGenericSendFromISR+0x4e>
1a0013d6:	461f      	mov	r7, r3
1a0013d8:	4690      	mov	r8, r2
1a0013da:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0013dc:	f001 fccc 	bl	1a002d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0013e0:	f3ef 8611 	mrs	r6, BASEPRI
1a0013e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013e8:	f383 8811 	msr	BASEPRI, r3
1a0013ec:	f3bf 8f6f 	isb	sy
1a0013f0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0013f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0013f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0013f8:	429a      	cmp	r2, r3
1a0013fa:	d306      	bcc.n	1a00140a <xQueueGenericSendFromISR+0x84>
1a0013fc:	2f02      	cmp	r7, #2
1a0013fe:	d004      	beq.n	1a00140a <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a001400:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001402:	f386 8811 	msr	BASEPRI, r6
}
1a001406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a00140a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a00140e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001410:	463a      	mov	r2, r7
1a001412:	4649      	mov	r1, r9
1a001414:	4620      	mov	r0, r4
1a001416:	f7ff fd97 	bl	1a000f48 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a00141a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00141e:	d005      	beq.n	1a00142c <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001420:	1c6b      	adds	r3, r5, #1
1a001422:	b25b      	sxtb	r3, r3
1a001424:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001428:	2001      	movs	r0, #1
1a00142a:	e7ea      	b.n	1a001402 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00142c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00142e:	b90b      	cbnz	r3, 1a001434 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a001430:	2001      	movs	r0, #1
1a001432:	e7e6      	b.n	1a001402 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001434:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001438:	f000 ff22 	bl	1a002280 <xTaskRemoveFromEventList>
1a00143c:	b130      	cbz	r0, 1a00144c <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a00143e:	f1b8 0f00 	cmp.w	r8, #0
1a001442:	d005      	beq.n	1a001450 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001444:	2001      	movs	r0, #1
1a001446:	f8c8 0000 	str.w	r0, [r8]
1a00144a:	e7da      	b.n	1a001402 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a00144c:	2001      	movs	r0, #1
1a00144e:	e7d8      	b.n	1a001402 <xQueueGenericSendFromISR+0x7c>
1a001450:	2001      	movs	r0, #1
1a001452:	e7d6      	b.n	1a001402 <xQueueGenericSendFromISR+0x7c>

1a001454 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
1a001454:	b160      	cbz	r0, 1a001470 <xQueueGiveFromISR+0x1c>
{
1a001456:	b570      	push	{r4, r5, r6, lr}
1a001458:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a00145a:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00145c:	b18b      	cbz	r3, 1a001482 <xQueueGiveFromISR+0x2e>
	__asm volatile
1a00145e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001462:	f383 8811 	msr	BASEPRI, r3
1a001466:	f3bf 8f6f 	isb	sy
1a00146a:	f3bf 8f4f 	dsb	sy
1a00146e:	e7fe      	b.n	1a00146e <xQueueGiveFromISR+0x1a>
1a001470:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001474:	f383 8811 	msr	BASEPRI, r3
1a001478:	f3bf 8f6f 	isb	sy
1a00147c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001480:	e7fe      	b.n	1a001480 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a001482:	6803      	ldr	r3, [r0, #0]
1a001484:	b1f3      	cbz	r3, 1a0014c4 <xQueueGiveFromISR+0x70>
1a001486:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001488:	f001 fc76 	bl	1a002d78 <vPortValidateInterruptPriority>
	__asm volatile
1a00148c:	f3ef 8511 	mrs	r5, BASEPRI
1a001490:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001494:	f383 8811 	msr	BASEPRI, r3
1a001498:	f3bf 8f6f 	isb	sy
1a00149c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0014a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
1a0014a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0014a4:	4293      	cmp	r3, r2
1a0014a6:	d926      	bls.n	1a0014f6 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
1a0014a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0014ac:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0014ae:	3201      	adds	r2, #1
1a0014b0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
1a0014b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0014b6:	d011      	beq.n	1a0014dc <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0014b8:	3301      	adds	r3, #1
1a0014ba:	b25b      	sxtb	r3, r3
1a0014bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0014c0:	2001      	movs	r0, #1
1a0014c2:	e019      	b.n	1a0014f8 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a0014c4:	6843      	ldr	r3, [r0, #4]
1a0014c6:	2b00      	cmp	r3, #0
1a0014c8:	d0dd      	beq.n	1a001486 <xQueueGiveFromISR+0x32>
	__asm volatile
1a0014ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ce:	f383 8811 	msr	BASEPRI, r3
1a0014d2:	f3bf 8f6f 	isb	sy
1a0014d6:	f3bf 8f4f 	dsb	sy
1a0014da:	e7fe      	b.n	1a0014da <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0014dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0014de:	b90b      	cbnz	r3, 1a0014e4 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
1a0014e0:	2001      	movs	r0, #1
1a0014e2:	e009      	b.n	1a0014f8 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0014e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0014e8:	f000 feca 	bl	1a002280 <xTaskRemoveFromEventList>
1a0014ec:	b138      	cbz	r0, 1a0014fe <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
1a0014ee:	b146      	cbz	r6, 1a001502 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0014f0:	2001      	movs	r0, #1
1a0014f2:	6030      	str	r0, [r6, #0]
1a0014f4:	e000      	b.n	1a0014f8 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
1a0014f6:	2000      	movs	r0, #0
	__asm volatile
1a0014f8:	f385 8811 	msr	BASEPRI, r5
}
1a0014fc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
1a0014fe:	2001      	movs	r0, #1
1a001500:	e7fa      	b.n	1a0014f8 <xQueueGiveFromISR+0xa4>
1a001502:	2001      	movs	r0, #1
1a001504:	e7f8      	b.n	1a0014f8 <xQueueGiveFromISR+0xa4>
1a001506:	Address 0x000000001a001506 is out of bounds.


1a001508 <xQueueReceive>:
{
1a001508:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00150a:	b085      	sub	sp, #20
1a00150c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00150e:	b180      	cbz	r0, 1a001532 <xQueueReceive+0x2a>
1a001510:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001512:	b1b9      	cbz	r1, 1a001544 <xQueueReceive+0x3c>
1a001514:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001516:	f000 ff4d 	bl	1a0023b4 <xTaskGetSchedulerState>
1a00151a:	b9f8      	cbnz	r0, 1a00155c <xQueueReceive+0x54>
1a00151c:	9b01      	ldr	r3, [sp, #4]
1a00151e:	b1fb      	cbz	r3, 1a001560 <xQueueReceive+0x58>
	__asm volatile
1a001520:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001524:	f383 8811 	msr	BASEPRI, r3
1a001528:	f3bf 8f6f 	isb	sy
1a00152c:	f3bf 8f4f 	dsb	sy
1a001530:	e7fe      	b.n	1a001530 <xQueueReceive+0x28>
1a001532:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001536:	f383 8811 	msr	BASEPRI, r3
1a00153a:	f3bf 8f6f 	isb	sy
1a00153e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a001542:	e7fe      	b.n	1a001542 <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001544:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001546:	2b00      	cmp	r3, #0
1a001548:	d0e4      	beq.n	1a001514 <xQueueReceive+0xc>
1a00154a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00154e:	f383 8811 	msr	BASEPRI, r3
1a001552:	f3bf 8f6f 	isb	sy
1a001556:	f3bf 8f4f 	dsb	sy
1a00155a:	e7fe      	b.n	1a00155a <xQueueReceive+0x52>
1a00155c:	2600      	movs	r6, #0
1a00155e:	e03e      	b.n	1a0015de <xQueueReceive+0xd6>
1a001560:	2600      	movs	r6, #0
1a001562:	e03c      	b.n	1a0015de <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001564:	4639      	mov	r1, r7
1a001566:	4620      	mov	r0, r4
1a001568:	f7ff fd29 	bl	1a000fbe <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00156c:	3d01      	subs	r5, #1
1a00156e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001570:	6923      	ldr	r3, [r4, #16]
1a001572:	b923      	cbnz	r3, 1a00157e <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a001574:	f001 faf8 	bl	1a002b68 <vPortExitCritical>
				return pdPASS;
1a001578:	2001      	movs	r0, #1
}
1a00157a:	b005      	add	sp, #20
1a00157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00157e:	f104 0010 	add.w	r0, r4, #16
1a001582:	f000 fe7d 	bl	1a002280 <xTaskRemoveFromEventList>
1a001586:	2800      	cmp	r0, #0
1a001588:	d0f4      	beq.n	1a001574 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a00158a:	4b35      	ldr	r3, [pc, #212]	; (1a001660 <xQueueReceive+0x158>)
1a00158c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001590:	601a      	str	r2, [r3, #0]
1a001592:	f3bf 8f4f 	dsb	sy
1a001596:	f3bf 8f6f 	isb	sy
1a00159a:	e7eb      	b.n	1a001574 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a00159c:	f001 fae4 	bl	1a002b68 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0015a0:	2000      	movs	r0, #0
1a0015a2:	e7ea      	b.n	1a00157a <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0015a4:	a802      	add	r0, sp, #8
1a0015a6:	f000 feb1 	bl	1a00230c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0015aa:	2601      	movs	r6, #1
1a0015ac:	e021      	b.n	1a0015f2 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a0015ae:	2300      	movs	r3, #0
1a0015b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0015b4:	e029      	b.n	1a00160a <xQueueReceive+0x102>
1a0015b6:	2300      	movs	r3, #0
1a0015b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0015bc:	e02b      	b.n	1a001616 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a0015be:	4620      	mov	r0, r4
1a0015c0:	f7ff fd0f 	bl	1a000fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0015c4:	f000 fd1e 	bl	1a002004 <xTaskResumeAll>
1a0015c8:	e009      	b.n	1a0015de <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a0015ca:	4620      	mov	r0, r4
1a0015cc:	f7ff fd09 	bl	1a000fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0015d0:	f000 fd18 	bl	1a002004 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0015d4:	4620      	mov	r0, r4
1a0015d6:	f7ff fcaa 	bl	1a000f2e <prvIsQueueEmpty>
1a0015da:	2800      	cmp	r0, #0
1a0015dc:	d13d      	bne.n	1a00165a <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a0015de:	f001 faa1 	bl	1a002b24 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0015e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0015e4:	2d00      	cmp	r5, #0
1a0015e6:	d1bd      	bne.n	1a001564 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0015e8:	9b01      	ldr	r3, [sp, #4]
1a0015ea:	2b00      	cmp	r3, #0
1a0015ec:	d0d6      	beq.n	1a00159c <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a0015ee:	2e00      	cmp	r6, #0
1a0015f0:	d0d8      	beq.n	1a0015a4 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a0015f2:	f001 fab9 	bl	1a002b68 <vPortExitCritical>
		vTaskSuspendAll();
1a0015f6:	f000 fc6b 	bl	1a001ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0015fa:	f001 fa93 	bl	1a002b24 <vPortEnterCritical>
1a0015fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001602:	b25b      	sxtb	r3, r3
1a001604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001608:	d0d1      	beq.n	1a0015ae <xQueueReceive+0xa6>
1a00160a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00160e:	b25b      	sxtb	r3, r3
1a001610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001614:	d0cf      	beq.n	1a0015b6 <xQueueReceive+0xae>
1a001616:	f001 faa7 	bl	1a002b68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00161a:	a901      	add	r1, sp, #4
1a00161c:	a802      	add	r0, sp, #8
1a00161e:	f000 fe81 	bl	1a002324 <xTaskCheckForTimeOut>
1a001622:	2800      	cmp	r0, #0
1a001624:	d1d1      	bne.n	1a0015ca <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001626:	4620      	mov	r0, r4
1a001628:	f7ff fc81 	bl	1a000f2e <prvIsQueueEmpty>
1a00162c:	2800      	cmp	r0, #0
1a00162e:	d0c6      	beq.n	1a0015be <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001630:	9901      	ldr	r1, [sp, #4]
1a001632:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001636:	f000 fdef 	bl	1a002218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00163a:	4620      	mov	r0, r4
1a00163c:	f7ff fcd1 	bl	1a000fe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001640:	f000 fce0 	bl	1a002004 <xTaskResumeAll>
1a001644:	2800      	cmp	r0, #0
1a001646:	d1ca      	bne.n	1a0015de <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a001648:	4b05      	ldr	r3, [pc, #20]	; (1a001660 <xQueueReceive+0x158>)
1a00164a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00164e:	601a      	str	r2, [r3, #0]
1a001650:	f3bf 8f4f 	dsb	sy
1a001654:	f3bf 8f6f 	isb	sy
1a001658:	e7c1      	b.n	1a0015de <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a00165a:	2000      	movs	r0, #0
1a00165c:	e78d      	b.n	1a00157a <xQueueReceive+0x72>
1a00165e:	bf00      	nop
1a001660:	e000ed04 	.word	0xe000ed04

1a001664 <xQueueSemaphoreTake>:
{
1a001664:	b570      	push	{r4, r5, r6, lr}
1a001666:	b084      	sub	sp, #16
1a001668:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00166a:	b158      	cbz	r0, 1a001684 <xQueueSemaphoreTake+0x20>
1a00166c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a00166e:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001670:	b18b      	cbz	r3, 1a001696 <xQueueSemaphoreTake+0x32>
1a001672:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001676:	f383 8811 	msr	BASEPRI, r3
1a00167a:	f3bf 8f6f 	isb	sy
1a00167e:	f3bf 8f4f 	dsb	sy
1a001682:	e7fe      	b.n	1a001682 <xQueueSemaphoreTake+0x1e>
1a001684:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001688:	f383 8811 	msr	BASEPRI, r3
1a00168c:	f3bf 8f6f 	isb	sy
1a001690:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a001694:	e7fe      	b.n	1a001694 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001696:	f000 fe8d 	bl	1a0023b4 <xTaskGetSchedulerState>
1a00169a:	b950      	cbnz	r0, 1a0016b2 <xQueueSemaphoreTake+0x4e>
1a00169c:	9b01      	ldr	r3, [sp, #4]
1a00169e:	b15b      	cbz	r3, 1a0016b8 <xQueueSemaphoreTake+0x54>
1a0016a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016a4:	f383 8811 	msr	BASEPRI, r3
1a0016a8:	f3bf 8f6f 	isb	sy
1a0016ac:	f3bf 8f4f 	dsb	sy
1a0016b0:	e7fe      	b.n	1a0016b0 <xQueueSemaphoreTake+0x4c>
1a0016b2:	2500      	movs	r5, #0
1a0016b4:	462e      	mov	r6, r5
1a0016b6:	e054      	b.n	1a001762 <xQueueSemaphoreTake+0xfe>
1a0016b8:	2500      	movs	r5, #0
1a0016ba:	462e      	mov	r6, r5
1a0016bc:	e051      	b.n	1a001762 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a0016be:	3b01      	subs	r3, #1
1a0016c0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0016c2:	6823      	ldr	r3, [r4, #0]
1a0016c4:	b13b      	cbz	r3, 1a0016d6 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0016c6:	6923      	ldr	r3, [r4, #16]
1a0016c8:	b94b      	cbnz	r3, 1a0016de <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
1a0016ca:	f001 fa4d 	bl	1a002b68 <vPortExitCritical>
				return pdPASS;
1a0016ce:	2501      	movs	r5, #1
}
1a0016d0:	4628      	mov	r0, r5
1a0016d2:	b004      	add	sp, #16
1a0016d4:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a0016d6:	f000 ff95 	bl	1a002604 <pvTaskIncrementMutexHeldCount>
1a0016da:	6060      	str	r0, [r4, #4]
1a0016dc:	e7f3      	b.n	1a0016c6 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0016de:	f104 0010 	add.w	r0, r4, #16
1a0016e2:	f000 fdcd 	bl	1a002280 <xTaskRemoveFromEventList>
1a0016e6:	2800      	cmp	r0, #0
1a0016e8:	d0ef      	beq.n	1a0016ca <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
1a0016ea:	4b46      	ldr	r3, [pc, #280]	; (1a001804 <xQueueSemaphoreTake+0x1a0>)
1a0016ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016f0:	601a      	str	r2, [r3, #0]
1a0016f2:	f3bf 8f4f 	dsb	sy
1a0016f6:	f3bf 8f6f 	isb	sy
1a0016fa:	e7e6      	b.n	1a0016ca <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
1a0016fc:	b145      	cbz	r5, 1a001710 <xQueueSemaphoreTake+0xac>
1a0016fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001702:	f383 8811 	msr	BASEPRI, r3
1a001706:	f3bf 8f6f 	isb	sy
1a00170a:	f3bf 8f4f 	dsb	sy
1a00170e:	e7fe      	b.n	1a00170e <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
1a001710:	f001 fa2a 	bl	1a002b68 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001714:	e7dc      	b.n	1a0016d0 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001716:	a802      	add	r0, sp, #8
1a001718:	f000 fdf8 	bl	1a00230c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00171c:	2601      	movs	r6, #1
1a00171e:	e02a      	b.n	1a001776 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
1a001720:	2300      	movs	r3, #0
1a001722:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001726:	e032      	b.n	1a00178e <xQueueSemaphoreTake+0x12a>
1a001728:	2300      	movs	r3, #0
1a00172a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00172e:	e034      	b.n	1a00179a <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
1a001730:	f001 f9f8 	bl	1a002b24 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a001734:	6860      	ldr	r0, [r4, #4]
1a001736:	f000 fe4d 	bl	1a0023d4 <xTaskPriorityInherit>
1a00173a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a00173c:	f001 fa14 	bl	1a002b68 <vPortExitCritical>
1a001740:	e03b      	b.n	1a0017ba <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
1a001742:	4620      	mov	r0, r4
1a001744:	f7ff fc4d 	bl	1a000fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001748:	f000 fc5c 	bl	1a002004 <xTaskResumeAll>
1a00174c:	e009      	b.n	1a001762 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
1a00174e:	4620      	mov	r0, r4
1a001750:	f7ff fc47 	bl	1a000fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001754:	f000 fc56 	bl	1a002004 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001758:	4620      	mov	r0, r4
1a00175a:	f7ff fbe8 	bl	1a000f2e <prvIsQueueEmpty>
1a00175e:	2800      	cmp	r0, #0
1a001760:	d140      	bne.n	1a0017e4 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
1a001762:	f001 f9df 	bl	1a002b24 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001768:	2b00      	cmp	r3, #0
1a00176a:	d1a8      	bne.n	1a0016be <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00176c:	9b01      	ldr	r3, [sp, #4]
1a00176e:	2b00      	cmp	r3, #0
1a001770:	d0c4      	beq.n	1a0016fc <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
1a001772:	2e00      	cmp	r6, #0
1a001774:	d0cf      	beq.n	1a001716 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
1a001776:	f001 f9f7 	bl	1a002b68 <vPortExitCritical>
		vTaskSuspendAll();
1a00177a:	f000 fba9 	bl	1a001ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00177e:	f001 f9d1 	bl	1a002b24 <vPortEnterCritical>
1a001782:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001786:	b25b      	sxtb	r3, r3
1a001788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00178c:	d0c8      	beq.n	1a001720 <xQueueSemaphoreTake+0xbc>
1a00178e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001792:	b25b      	sxtb	r3, r3
1a001794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001798:	d0c6      	beq.n	1a001728 <xQueueSemaphoreTake+0xc4>
1a00179a:	f001 f9e5 	bl	1a002b68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00179e:	a901      	add	r1, sp, #4
1a0017a0:	a802      	add	r0, sp, #8
1a0017a2:	f000 fdbf 	bl	1a002324 <xTaskCheckForTimeOut>
1a0017a6:	2800      	cmp	r0, #0
1a0017a8:	d1d1      	bne.n	1a00174e <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0017aa:	4620      	mov	r0, r4
1a0017ac:	f7ff fbbf 	bl	1a000f2e <prvIsQueueEmpty>
1a0017b0:	2800      	cmp	r0, #0
1a0017b2:	d0c6      	beq.n	1a001742 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0017b4:	6823      	ldr	r3, [r4, #0]
1a0017b6:	2b00      	cmp	r3, #0
1a0017b8:	d0ba      	beq.n	1a001730 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0017ba:	9901      	ldr	r1, [sp, #4]
1a0017bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0017c0:	f000 fd2a 	bl	1a002218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0017c4:	4620      	mov	r0, r4
1a0017c6:	f7ff fc0c 	bl	1a000fe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0017ca:	f000 fc1b 	bl	1a002004 <xTaskResumeAll>
1a0017ce:	2800      	cmp	r0, #0
1a0017d0:	d1c7      	bne.n	1a001762 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
1a0017d2:	4b0c      	ldr	r3, [pc, #48]	; (1a001804 <xQueueSemaphoreTake+0x1a0>)
1a0017d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017d8:	601a      	str	r2, [r3, #0]
1a0017da:	f3bf 8f4f 	dsb	sy
1a0017de:	f3bf 8f6f 	isb	sy
1a0017e2:	e7be      	b.n	1a001762 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
1a0017e4:	b90d      	cbnz	r5, 1a0017ea <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
1a0017e6:	2500      	movs	r5, #0
1a0017e8:	e772      	b.n	1a0016d0 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
1a0017ea:	f001 f99b 	bl	1a002b24 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a0017ee:	4620      	mov	r0, r4
1a0017f0:	f7ff fb85 	bl	1a000efe <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a0017f4:	4601      	mov	r1, r0
1a0017f6:	6860      	ldr	r0, [r4, #4]
1a0017f8:	f000 fea4 	bl	1a002544 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a0017fc:	f001 f9b4 	bl	1a002b68 <vPortExitCritical>
1a001800:	e7f1      	b.n	1a0017e6 <xQueueSemaphoreTake+0x182>
1a001802:	bf00      	nop
1a001804:	e000ed04 	.word	0xe000ed04

1a001808 <xQueueReceiveFromISR>:
{
1a001808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a00180c:	b1c8      	cbz	r0, 1a001842 <xQueueReceiveFromISR+0x3a>
1a00180e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001810:	b301      	cbz	r1, 1a001854 <xQueueReceiveFromISR+0x4c>
1a001812:	4617      	mov	r7, r2
1a001814:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001816:	f001 faaf 	bl	1a002d78 <vPortValidateInterruptPriority>
	__asm volatile
1a00181a:	f3ef 8611 	mrs	r6, BASEPRI
1a00181e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001822:	f383 8811 	msr	BASEPRI, r3
1a001826:	f3bf 8f6f 	isb	sy
1a00182a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00182e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001832:	f1b8 0f00 	cmp.w	r8, #0
1a001836:	d119      	bne.n	1a00186c <xQueueReceiveFromISR+0x64>
			xReturn = pdFAIL;
1a001838:	2000      	movs	r0, #0
	__asm volatile
1a00183a:	f386 8811 	msr	BASEPRI, r6
}
1a00183e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
1a001842:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001846:	f383 8811 	msr	BASEPRI, r3
1a00184a:	f3bf 8f6f 	isb	sy
1a00184e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001852:	e7fe      	b.n	1a001852 <xQueueReceiveFromISR+0x4a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001854:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001856:	2b00      	cmp	r3, #0
1a001858:	d0db      	beq.n	1a001812 <xQueueReceiveFromISR+0xa>
1a00185a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00185e:	f383 8811 	msr	BASEPRI, r3
1a001862:	f3bf 8f6f 	isb	sy
1a001866:	f3bf 8f4f 	dsb	sy
1a00186a:	e7fe      	b.n	1a00186a <xQueueReceiveFromISR+0x62>
			const int8_t cRxLock = pxQueue->cRxLock;
1a00186c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
1a001870:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001872:	4649      	mov	r1, r9
1a001874:	4620      	mov	r0, r4
1a001876:	f7ff fba2 	bl	1a000fbe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00187a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a00187e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
1a001880:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001884:	d005      	beq.n	1a001892 <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1a001886:	1c6b      	adds	r3, r5, #1
1a001888:	b25b      	sxtb	r3, r3
1a00188a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
1a00188e:	2001      	movs	r0, #1
1a001890:	e7d3      	b.n	1a00183a <xQueueReceiveFromISR+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001892:	6923      	ldr	r3, [r4, #16]
1a001894:	b90b      	cbnz	r3, 1a00189a <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
1a001896:	2001      	movs	r0, #1
1a001898:	e7cf      	b.n	1a00183a <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00189a:	f104 0010 	add.w	r0, r4, #16
1a00189e:	f000 fcef 	bl	1a002280 <xTaskRemoveFromEventList>
1a0018a2:	b118      	cbz	r0, 1a0018ac <xQueueReceiveFromISR+0xa4>
						if( pxHigherPriorityTaskWoken != NULL )
1a0018a4:	b127      	cbz	r7, 1a0018b0 <xQueueReceiveFromISR+0xa8>
							*pxHigherPriorityTaskWoken = pdTRUE;
1a0018a6:	2001      	movs	r0, #1
1a0018a8:	6038      	str	r0, [r7, #0]
1a0018aa:	e7c6      	b.n	1a00183a <xQueueReceiveFromISR+0x32>
			xReturn = pdPASS;
1a0018ac:	2001      	movs	r0, #1
1a0018ae:	e7c4      	b.n	1a00183a <xQueueReceiveFromISR+0x32>
1a0018b0:	2001      	movs	r0, #1
1a0018b2:	e7c2      	b.n	1a00183a <xQueueReceiveFromISR+0x32>

1a0018b4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0018b4:	2300      	movs	r3, #0
1a0018b6:	2b07      	cmp	r3, #7
1a0018b8:	d80c      	bhi.n	1a0018d4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0018ba:	4a07      	ldr	r2, [pc, #28]	; (1a0018d8 <vQueueAddToRegistry+0x24>)
1a0018bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0018c0:	b10a      	cbz	r2, 1a0018c6 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0018c2:	3301      	adds	r3, #1
1a0018c4:	e7f7      	b.n	1a0018b6 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0018c6:	4a04      	ldr	r2, [pc, #16]	; (1a0018d8 <vQueueAddToRegistry+0x24>)
1a0018c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0018cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0018d0:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0018d2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0018d4:	4770      	bx	lr
1a0018d6:	bf00      	nop
1a0018d8:	10002c10 	.word	0x10002c10

1a0018dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0018dc:	b570      	push	{r4, r5, r6, lr}
1a0018de:	4604      	mov	r4, r0
1a0018e0:	460d      	mov	r5, r1
1a0018e2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0018e4:	f001 f91e 	bl	1a002b24 <vPortEnterCritical>
1a0018e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0018ec:	b25b      	sxtb	r3, r3
1a0018ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018f2:	d00d      	beq.n	1a001910 <vQueueWaitForMessageRestricted+0x34>
1a0018f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0018f8:	b25b      	sxtb	r3, r3
1a0018fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018fe:	d00b      	beq.n	1a001918 <vQueueWaitForMessageRestricted+0x3c>
1a001900:	f001 f932 	bl	1a002b68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001904:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001906:	b15b      	cbz	r3, 1a001920 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001908:	4620      	mov	r0, r4
1a00190a:	f7ff fb6a 	bl	1a000fe2 <prvUnlockQueue>
	}
1a00190e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001910:	2300      	movs	r3, #0
1a001912:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001916:	e7ed      	b.n	1a0018f4 <vQueueWaitForMessageRestricted+0x18>
1a001918:	2300      	movs	r3, #0
1a00191a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00191e:	e7ef      	b.n	1a001900 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001920:	4632      	mov	r2, r6
1a001922:	4629      	mov	r1, r5
1a001924:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001928:	f000 fc8e 	bl	1a002248 <vTaskPlaceOnEventListRestricted>
1a00192c:	e7ec      	b.n	1a001908 <vQueueWaitForMessageRestricted+0x2c>

1a00192e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00192e:	f100 0308 	add.w	r3, r0, #8
1a001932:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001938:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00193a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00193c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00193e:	2300      	movs	r3, #0
1a001940:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001942:	4770      	bx	lr

1a001944 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001944:	2300      	movs	r3, #0
1a001946:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001948:	4770      	bx	lr

1a00194a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a00194a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a00194c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00194e:	689a      	ldr	r2, [r3, #8]
1a001950:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001952:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001954:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001956:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001958:	6803      	ldr	r3, [r0, #0]
1a00195a:	3301      	adds	r3, #1
1a00195c:	6003      	str	r3, [r0, #0]
}
1a00195e:	4770      	bx	lr

1a001960 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001960:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001962:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001964:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001968:	d002      	beq.n	1a001970 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00196a:	f100 0208 	add.w	r2, r0, #8
1a00196e:	e002      	b.n	1a001976 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001970:	6902      	ldr	r2, [r0, #16]
1a001972:	e004      	b.n	1a00197e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001974:	461a      	mov	r2, r3
1a001976:	6853      	ldr	r3, [r2, #4]
1a001978:	681c      	ldr	r4, [r3, #0]
1a00197a:	42ac      	cmp	r4, r5
1a00197c:	d9fa      	bls.n	1a001974 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00197e:	6853      	ldr	r3, [r2, #4]
1a001980:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001982:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001984:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001986:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001988:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00198a:	6803      	ldr	r3, [r0, #0]
1a00198c:	3301      	adds	r3, #1
1a00198e:	6003      	str	r3, [r0, #0]
}
1a001990:	bc30      	pop	{r4, r5}
1a001992:	4770      	bx	lr

1a001994 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001994:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001996:	6841      	ldr	r1, [r0, #4]
1a001998:	6882      	ldr	r2, [r0, #8]
1a00199a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00199c:	6841      	ldr	r1, [r0, #4]
1a00199e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0019a0:	685a      	ldr	r2, [r3, #4]
1a0019a2:	4282      	cmp	r2, r0
1a0019a4:	d006      	beq.n	1a0019b4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0019a6:	2200      	movs	r2, #0
1a0019a8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0019aa:	681a      	ldr	r2, [r3, #0]
1a0019ac:	3a01      	subs	r2, #1
1a0019ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0019b0:	6818      	ldr	r0, [r3, #0]
}
1a0019b2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0019b4:	6882      	ldr	r2, [r0, #8]
1a0019b6:	605a      	str	r2, [r3, #4]
1a0019b8:	e7f5      	b.n	1a0019a6 <uxListRemove+0x12>
1a0019ba:	Address 0x000000001a0019ba is out of bounds.


1a0019bc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0019bc:	4b03      	ldr	r3, [pc, #12]	; (1a0019cc <vApplicationGetIdleTaskMemory+0x10>)
1a0019be:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0019c0:	4b03      	ldr	r3, [pc, #12]	; (1a0019d0 <vApplicationGetIdleTaskMemory+0x14>)
1a0019c2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0019c4:	235a      	movs	r3, #90	; 0x5a
1a0019c6:	6013      	str	r3, [r2, #0]
}
1a0019c8:	4770      	bx	lr
1a0019ca:	bf00      	nop
1a0019cc:	1000285c 	.word	0x1000285c
1a0019d0:	10002154 	.word	0x10002154

1a0019d4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0019d4:	4b03      	ldr	r3, [pc, #12]	; (1a0019e4 <vApplicationGetTimerTaskMemory+0x10>)
1a0019d6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0019d8:	4b03      	ldr	r3, [pc, #12]	; (1a0019e8 <vApplicationGetTimerTaskMemory+0x14>)
1a0019da:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0019dc:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0019e0:	6013      	str	r3, [r2, #0]
1a0019e2:	4770      	bx	lr
1a0019e4:	100028bc 	.word	0x100028bc
1a0019e8:	100022bc 	.word	0x100022bc

1a0019ec <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0019ec:	b510      	push	{r4, lr}
1a0019ee:	b082      	sub	sp, #8
1a0019f0:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0019f2:	9001      	str	r0, [sp, #4]
1a0019f4:	2300      	movs	r3, #0
1a0019f6:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a0019f8:	f001 f894 	bl	1a002b24 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a0019fc:	9901      	ldr	r1, [sp, #4]
1a0019fe:	4622      	mov	r2, r4
1a001a00:	4804      	ldr	r0, [pc, #16]	; (1a001a14 <vAssertCalled+0x28>)
1a001a02:	f003 ff4f 	bl	1a0058a4 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001a06:	9b00      	ldr	r3, [sp, #0]
1a001a08:	2b00      	cmp	r3, #0
1a001a0a:	d0fc      	beq.n	1a001a06 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001a0c:	f001 f8ac 	bl	1a002b68 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001a10:	b002      	add	sp, #8
1a001a12:	bd10      	pop	{r4, pc}
1a001a14:	1a006074 	.word	0x1a006074

1a001a18 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001a18:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001a1a:	4804      	ldr	r0, [pc, #16]	; (1a001a2c <vApplicationMallocFailedHook+0x14>)
1a001a1c:	f003 ffc8 	bl	1a0059b0 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001a20:	4903      	ldr	r1, [pc, #12]	; (1a001a30 <vApplicationMallocFailedHook+0x18>)
1a001a22:	202c      	movs	r0, #44	; 0x2c
1a001a24:	f7ff ffe2 	bl	1a0019ec <vAssertCalled>
}
1a001a28:	bd08      	pop	{r3, pc}
1a001a2a:	bf00      	nop
1a001a2c:	1a006000 	.word	0x1a006000
1a001a30:	1a006024 	.word	0x1a006024

1a001a34 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001a34:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001a36:	4804      	ldr	r0, [pc, #16]	; (1a001a48 <vApplicationStackOverflowHook+0x14>)
1a001a38:	f003 ff34 	bl	1a0058a4 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001a3c:	4903      	ldr	r1, [pc, #12]	; (1a001a4c <vApplicationStackOverflowHook+0x18>)
1a001a3e:	2050      	movs	r0, #80	; 0x50
1a001a40:	f7ff ffd4 	bl	1a0019ec <vAssertCalled>
}
1a001a44:	bd08      	pop	{r3, pc}
1a001a46:	bf00      	nop
1a001a48:	1a006044 	.word	0x1a006044
1a001a4c:	1a006024 	.word	0x1a006024

1a001a50 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001a50:	4b08      	ldr	r3, [pc, #32]	; (1a001a74 <prvResetNextTaskUnblockTime+0x24>)
1a001a52:	681b      	ldr	r3, [r3, #0]
1a001a54:	681b      	ldr	r3, [r3, #0]
1a001a56:	b923      	cbnz	r3, 1a001a62 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001a58:	4b07      	ldr	r3, [pc, #28]	; (1a001a78 <prvResetNextTaskUnblockTime+0x28>)
1a001a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001a5e:	601a      	str	r2, [r3, #0]
1a001a60:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001a62:	4b04      	ldr	r3, [pc, #16]	; (1a001a74 <prvResetNextTaskUnblockTime+0x24>)
1a001a64:	681b      	ldr	r3, [r3, #0]
1a001a66:	68db      	ldr	r3, [r3, #12]
1a001a68:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001a6a:	685a      	ldr	r2, [r3, #4]
1a001a6c:	4b02      	ldr	r3, [pc, #8]	; (1a001a78 <prvResetNextTaskUnblockTime+0x28>)
1a001a6e:	601a      	str	r2, [r3, #0]
	}
}
1a001a70:	4770      	bx	lr
1a001a72:	bf00      	nop
1a001a74:	10002920 	.word	0x10002920
1a001a78:	100029f4 	.word	0x100029f4

1a001a7c <prvInitialiseNewTask>:
{
1a001a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001a80:	4681      	mov	r9, r0
1a001a82:	460d      	mov	r5, r1
1a001a84:	4617      	mov	r7, r2
1a001a86:	469a      	mov	sl, r3
1a001a88:	9e08      	ldr	r6, [sp, #32]
1a001a8a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001a8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001a90:	0092      	lsls	r2, r2, #2
1a001a92:	21a5      	movs	r1, #165	; 0xa5
1a001a94:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001a96:	f003 fb78 	bl	1a00518a <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001a9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001a9c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001aa0:	3a01      	subs	r2, #1
1a001aa2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001aa6:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001aaa:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001aac:	2300      	movs	r3, #0
1a001aae:	2b0f      	cmp	r3, #15
1a001ab0:	d806      	bhi.n	1a001ac0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001ab2:	5cea      	ldrb	r2, [r5, r3]
1a001ab4:	18e1      	adds	r1, r4, r3
1a001ab6:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001aba:	b10a      	cbz	r2, 1a001ac0 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001abc:	3301      	adds	r3, #1
1a001abe:	e7f6      	b.n	1a001aae <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001ac0:	2300      	movs	r3, #0
1a001ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001ac6:	2e06      	cmp	r6, #6
1a001ac8:	d900      	bls.n	1a001acc <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001aca:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001acc:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001ace:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001ad0:	2500      	movs	r5, #0
1a001ad2:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001ad4:	1d20      	adds	r0, r4, #4
1a001ad6:	f7ff ff35 	bl	1a001944 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001ada:	f104 0018 	add.w	r0, r4, #24
1a001ade:	f7ff ff31 	bl	1a001944 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001ae2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ae4:	f1c6 0607 	rsb	r6, r6, #7
1a001ae8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001aea:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001aec:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001aee:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001af2:	4652      	mov	r2, sl
1a001af4:	4649      	mov	r1, r9
1a001af6:	4638      	mov	r0, r7
1a001af8:	f000 ffea 	bl	1a002ad0 <pxPortInitialiseStack>
1a001afc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001afe:	f1b8 0f00 	cmp.w	r8, #0
1a001b02:	d001      	beq.n	1a001b08 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001b04:	f8c8 4000 	str.w	r4, [r8]
}
1a001b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a001b0c <prvInitialiseTaskLists>:
{
1a001b0c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001b0e:	2400      	movs	r4, #0
1a001b10:	2c06      	cmp	r4, #6
1a001b12:	d808      	bhi.n	1a001b26 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001b14:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001b18:	0093      	lsls	r3, r2, #2
1a001b1a:	480e      	ldr	r0, [pc, #56]	; (1a001b54 <prvInitialiseTaskLists+0x48>)
1a001b1c:	4418      	add	r0, r3
1a001b1e:	f7ff ff06 	bl	1a00192e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001b22:	3401      	adds	r4, #1
1a001b24:	e7f4      	b.n	1a001b10 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a001b26:	4d0c      	ldr	r5, [pc, #48]	; (1a001b58 <prvInitialiseTaskLists+0x4c>)
1a001b28:	4628      	mov	r0, r5
1a001b2a:	f7ff ff00 	bl	1a00192e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001b2e:	4c0b      	ldr	r4, [pc, #44]	; (1a001b5c <prvInitialiseTaskLists+0x50>)
1a001b30:	4620      	mov	r0, r4
1a001b32:	f7ff fefc 	bl	1a00192e <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001b36:	480a      	ldr	r0, [pc, #40]	; (1a001b60 <prvInitialiseTaskLists+0x54>)
1a001b38:	f7ff fef9 	bl	1a00192e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001b3c:	4809      	ldr	r0, [pc, #36]	; (1a001b64 <prvInitialiseTaskLists+0x58>)
1a001b3e:	f7ff fef6 	bl	1a00192e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001b42:	4809      	ldr	r0, [pc, #36]	; (1a001b68 <prvInitialiseTaskLists+0x5c>)
1a001b44:	f7ff fef3 	bl	1a00192e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001b48:	4b08      	ldr	r3, [pc, #32]	; (1a001b6c <prvInitialiseTaskLists+0x60>)
1a001b4a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001b4c:	4b08      	ldr	r3, [pc, #32]	; (1a001b70 <prvInitialiseTaskLists+0x64>)
1a001b4e:	601c      	str	r4, [r3, #0]
}
1a001b50:	bd38      	pop	{r3, r4, r5, pc}
1a001b52:	bf00      	nop
1a001b54:	10002928 	.word	0x10002928
1a001b58:	100029cc 	.word	0x100029cc
1a001b5c:	100029e0 	.word	0x100029e0
1a001b60:	100029fc 	.word	0x100029fc
1a001b64:	10002a28 	.word	0x10002a28
1a001b68:	10002a14 	.word	0x10002a14
1a001b6c:	10002920 	.word	0x10002920
1a001b70:	10002924 	.word	0x10002924

1a001b74 <prvAddNewTaskToReadyList>:
{
1a001b74:	b510      	push	{r4, lr}
1a001b76:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001b78:	f000 ffd4 	bl	1a002b24 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001b7c:	4a21      	ldr	r2, [pc, #132]	; (1a001c04 <prvAddNewTaskToReadyList+0x90>)
1a001b7e:	6813      	ldr	r3, [r2, #0]
1a001b80:	3301      	adds	r3, #1
1a001b82:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001b84:	4b20      	ldr	r3, [pc, #128]	; (1a001c08 <prvAddNewTaskToReadyList+0x94>)
1a001b86:	681b      	ldr	r3, [r3, #0]
1a001b88:	b15b      	cbz	r3, 1a001ba2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001b8a:	4b20      	ldr	r3, [pc, #128]	; (1a001c0c <prvAddNewTaskToReadyList+0x98>)
1a001b8c:	681b      	ldr	r3, [r3, #0]
1a001b8e:	b96b      	cbnz	r3, 1a001bac <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001b90:	4b1d      	ldr	r3, [pc, #116]	; (1a001c08 <prvAddNewTaskToReadyList+0x94>)
1a001b92:	681b      	ldr	r3, [r3, #0]
1a001b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001b96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b98:	429a      	cmp	r2, r3
1a001b9a:	d807      	bhi.n	1a001bac <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001b9c:	4b1a      	ldr	r3, [pc, #104]	; (1a001c08 <prvAddNewTaskToReadyList+0x94>)
1a001b9e:	601c      	str	r4, [r3, #0]
1a001ba0:	e004      	b.n	1a001bac <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001ba2:	4b19      	ldr	r3, [pc, #100]	; (1a001c08 <prvAddNewTaskToReadyList+0x94>)
1a001ba4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001ba6:	6813      	ldr	r3, [r2, #0]
1a001ba8:	2b01      	cmp	r3, #1
1a001baa:	d027      	beq.n	1a001bfc <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001bac:	4a18      	ldr	r2, [pc, #96]	; (1a001c10 <prvAddNewTaskToReadyList+0x9c>)
1a001bae:	6813      	ldr	r3, [r2, #0]
1a001bb0:	3301      	adds	r3, #1
1a001bb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001bb4:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001bb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001bb8:	2201      	movs	r2, #1
1a001bba:	409a      	lsls	r2, r3
1a001bbc:	4915      	ldr	r1, [pc, #84]	; (1a001c14 <prvAddNewTaskToReadyList+0xa0>)
1a001bbe:	6808      	ldr	r0, [r1, #0]
1a001bc0:	4302      	orrs	r2, r0
1a001bc2:	600a      	str	r2, [r1, #0]
1a001bc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001bc8:	009a      	lsls	r2, r3, #2
1a001bca:	1d21      	adds	r1, r4, #4
1a001bcc:	4812      	ldr	r0, [pc, #72]	; (1a001c18 <prvAddNewTaskToReadyList+0xa4>)
1a001bce:	4410      	add	r0, r2
1a001bd0:	f7ff febb 	bl	1a00194a <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001bd4:	f000 ffc8 	bl	1a002b68 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001bd8:	4b0c      	ldr	r3, [pc, #48]	; (1a001c0c <prvAddNewTaskToReadyList+0x98>)
1a001bda:	681b      	ldr	r3, [r3, #0]
1a001bdc:	b16b      	cbz	r3, 1a001bfa <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001bde:	4b0a      	ldr	r3, [pc, #40]	; (1a001c08 <prvAddNewTaskToReadyList+0x94>)
1a001be0:	681b      	ldr	r3, [r3, #0]
1a001be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001be6:	429a      	cmp	r2, r3
1a001be8:	d207      	bcs.n	1a001bfa <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001bea:	4b0c      	ldr	r3, [pc, #48]	; (1a001c1c <prvAddNewTaskToReadyList+0xa8>)
1a001bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001bf0:	601a      	str	r2, [r3, #0]
1a001bf2:	f3bf 8f4f 	dsb	sy
1a001bf6:	f3bf 8f6f 	isb	sy
}
1a001bfa:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001bfc:	f7ff ff86 	bl	1a001b0c <prvInitialiseTaskLists>
1a001c00:	e7d4      	b.n	1a001bac <prvAddNewTaskToReadyList+0x38>
1a001c02:	bf00      	nop
1a001c04:	100029b4 	.word	0x100029b4
1a001c08:	1000291c 	.word	0x1000291c
1a001c0c:	10002a10 	.word	0x10002a10
1a001c10:	100029c4 	.word	0x100029c4
1a001c14:	100029c8 	.word	0x100029c8
1a001c18:	10002928 	.word	0x10002928
1a001c1c:	e000ed04 	.word	0xe000ed04

1a001c20 <prvDeleteTCB>:
	{
1a001c20:	b510      	push	{r4, lr}
1a001c22:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001c24:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001c28:	b163      	cbz	r3, 1a001c44 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001c2a:	2b01      	cmp	r3, #1
1a001c2c:	d011      	beq.n	1a001c52 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001c2e:	2b02      	cmp	r3, #2
1a001c30:	d00e      	beq.n	1a001c50 <prvDeleteTCB+0x30>
1a001c32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c36:	f383 8811 	msr	BASEPRI, r3
1a001c3a:	f3bf 8f6f 	isb	sy
1a001c3e:	f3bf 8f4f 	dsb	sy
1a001c42:	e7fe      	b.n	1a001c42 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a001c44:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001c46:	f7ff f94f 	bl	1a000ee8 <vPortFree>
				vPortFree( pxTCB );
1a001c4a:	4620      	mov	r0, r4
1a001c4c:	f7ff f94c 	bl	1a000ee8 <vPortFree>
	}
1a001c50:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a001c52:	f7ff f949 	bl	1a000ee8 <vPortFree>
1a001c56:	e7fb      	b.n	1a001c50 <prvDeleteTCB+0x30>

1a001c58 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001c58:	4b0f      	ldr	r3, [pc, #60]	; (1a001c98 <prvCheckTasksWaitingTermination+0x40>)
1a001c5a:	681b      	ldr	r3, [r3, #0]
1a001c5c:	b1d3      	cbz	r3, 1a001c94 <prvCheckTasksWaitingTermination+0x3c>
{
1a001c5e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001c60:	f000 ff60 	bl	1a002b24 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001c64:	4b0d      	ldr	r3, [pc, #52]	; (1a001c9c <prvCheckTasksWaitingTermination+0x44>)
1a001c66:	68db      	ldr	r3, [r3, #12]
1a001c68:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001c6a:	1d20      	adds	r0, r4, #4
1a001c6c:	f7ff fe92 	bl	1a001994 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001c70:	4a0b      	ldr	r2, [pc, #44]	; (1a001ca0 <prvCheckTasksWaitingTermination+0x48>)
1a001c72:	6813      	ldr	r3, [r2, #0]
1a001c74:	3b01      	subs	r3, #1
1a001c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001c78:	4a07      	ldr	r2, [pc, #28]	; (1a001c98 <prvCheckTasksWaitingTermination+0x40>)
1a001c7a:	6813      	ldr	r3, [r2, #0]
1a001c7c:	3b01      	subs	r3, #1
1a001c7e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001c80:	f000 ff72 	bl	1a002b68 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001c84:	4620      	mov	r0, r4
1a001c86:	f7ff ffcb 	bl	1a001c20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001c8a:	4b03      	ldr	r3, [pc, #12]	; (1a001c98 <prvCheckTasksWaitingTermination+0x40>)
1a001c8c:	681b      	ldr	r3, [r3, #0]
1a001c8e:	2b00      	cmp	r3, #0
1a001c90:	d1e6      	bne.n	1a001c60 <prvCheckTasksWaitingTermination+0x8>
}
1a001c92:	bd10      	pop	{r4, pc}
1a001c94:	4770      	bx	lr
1a001c96:	bf00      	nop
1a001c98:	100029b8 	.word	0x100029b8
1a001c9c:	10002a28 	.word	0x10002a28
1a001ca0:	100029b4 	.word	0x100029b4

1a001ca4 <prvIdleTask>:
{
1a001ca4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001ca6:	f7ff ffd7 	bl	1a001c58 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001caa:	4b06      	ldr	r3, [pc, #24]	; (1a001cc4 <prvIdleTask+0x20>)
1a001cac:	681b      	ldr	r3, [r3, #0]
1a001cae:	2b01      	cmp	r3, #1
1a001cb0:	d9f9      	bls.n	1a001ca6 <prvIdleTask+0x2>
				taskYIELD();
1a001cb2:	4b05      	ldr	r3, [pc, #20]	; (1a001cc8 <prvIdleTask+0x24>)
1a001cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cb8:	601a      	str	r2, [r3, #0]
1a001cba:	f3bf 8f4f 	dsb	sy
1a001cbe:	f3bf 8f6f 	isb	sy
1a001cc2:	e7f0      	b.n	1a001ca6 <prvIdleTask+0x2>
1a001cc4:	10002928 	.word	0x10002928
1a001cc8:	e000ed04 	.word	0xe000ed04

1a001ccc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001ccc:	b570      	push	{r4, r5, r6, lr}
1a001cce:	4604      	mov	r4, r0
1a001cd0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001cd2:	4b1d      	ldr	r3, [pc, #116]	; (1a001d48 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001cd4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001cd6:	4b1d      	ldr	r3, [pc, #116]	; (1a001d4c <prvAddCurrentTaskToDelayedList+0x80>)
1a001cd8:	6818      	ldr	r0, [r3, #0]
1a001cda:	3004      	adds	r0, #4
1a001cdc:	f7ff fe5a 	bl	1a001994 <uxListRemove>
1a001ce0:	b950      	cbnz	r0, 1a001cf8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001ce2:	4b1a      	ldr	r3, [pc, #104]	; (1a001d4c <prvAddCurrentTaskToDelayedList+0x80>)
1a001ce4:	681b      	ldr	r3, [r3, #0]
1a001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ce8:	2301      	movs	r3, #1
1a001cea:	fa03 f202 	lsl.w	r2, r3, r2
1a001cee:	4918      	ldr	r1, [pc, #96]	; (1a001d50 <prvAddCurrentTaskToDelayedList+0x84>)
1a001cf0:	680b      	ldr	r3, [r1, #0]
1a001cf2:	ea23 0302 	bic.w	r3, r3, r2
1a001cf6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001cf8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001cfc:	d00d      	beq.n	1a001d1a <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001cfe:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001d00:	4b12      	ldr	r3, [pc, #72]	; (1a001d4c <prvAddCurrentTaskToDelayedList+0x80>)
1a001d02:	681b      	ldr	r3, [r3, #0]
1a001d04:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001d06:	42a5      	cmp	r5, r4
1a001d08:	d910      	bls.n	1a001d2c <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001d0a:	4b12      	ldr	r3, [pc, #72]	; (1a001d54 <prvAddCurrentTaskToDelayedList+0x88>)
1a001d0c:	6818      	ldr	r0, [r3, #0]
1a001d0e:	4b0f      	ldr	r3, [pc, #60]	; (1a001d4c <prvAddCurrentTaskToDelayedList+0x80>)
1a001d10:	6819      	ldr	r1, [r3, #0]
1a001d12:	3104      	adds	r1, #4
1a001d14:	f7ff fe24 	bl	1a001960 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001d18:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001d1a:	2e00      	cmp	r6, #0
1a001d1c:	d0ef      	beq.n	1a001cfe <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001d1e:	4b0b      	ldr	r3, [pc, #44]	; (1a001d4c <prvAddCurrentTaskToDelayedList+0x80>)
1a001d20:	6819      	ldr	r1, [r3, #0]
1a001d22:	3104      	adds	r1, #4
1a001d24:	480c      	ldr	r0, [pc, #48]	; (1a001d58 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001d26:	f7ff fe10 	bl	1a00194a <vListInsertEnd>
1a001d2a:	e7f5      	b.n	1a001d18 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001d2c:	4b0b      	ldr	r3, [pc, #44]	; (1a001d5c <prvAddCurrentTaskToDelayedList+0x90>)
1a001d2e:	6818      	ldr	r0, [r3, #0]
1a001d30:	4b06      	ldr	r3, [pc, #24]	; (1a001d4c <prvAddCurrentTaskToDelayedList+0x80>)
1a001d32:	6819      	ldr	r1, [r3, #0]
1a001d34:	3104      	adds	r1, #4
1a001d36:	f7ff fe13 	bl	1a001960 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a001d3a:	4b09      	ldr	r3, [pc, #36]	; (1a001d60 <prvAddCurrentTaskToDelayedList+0x94>)
1a001d3c:	681b      	ldr	r3, [r3, #0]
1a001d3e:	42a3      	cmp	r3, r4
1a001d40:	d9ea      	bls.n	1a001d18 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a001d42:	4b07      	ldr	r3, [pc, #28]	; (1a001d60 <prvAddCurrentTaskToDelayedList+0x94>)
1a001d44:	601c      	str	r4, [r3, #0]
}
1a001d46:	e7e7      	b.n	1a001d18 <prvAddCurrentTaskToDelayedList+0x4c>
1a001d48:	10002a3c 	.word	0x10002a3c
1a001d4c:	1000291c 	.word	0x1000291c
1a001d50:	100029c8 	.word	0x100029c8
1a001d54:	10002924 	.word	0x10002924
1a001d58:	10002a14 	.word	0x10002a14
1a001d5c:	10002920 	.word	0x10002920
1a001d60:	100029f4 	.word	0x100029f4

1a001d64 <xTaskCreateStatic>:
	{
1a001d64:	b570      	push	{r4, r5, r6, lr}
1a001d66:	b086      	sub	sp, #24
1a001d68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001d6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001d6c:	b175      	cbz	r5, 1a001d8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a001d6e:	b1b4      	cbz	r4, 1a001d9e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001d70:	2660      	movs	r6, #96	; 0x60
1a001d72:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001d74:	9e04      	ldr	r6, [sp, #16]
1a001d76:	2e60      	cmp	r6, #96	; 0x60
1a001d78:	d01a      	beq.n	1a001db0 <xTaskCreateStatic+0x4c>
1a001d7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d7e:	f383 8811 	msr	BASEPRI, r3
1a001d82:	f3bf 8f6f 	isb	sy
1a001d86:	f3bf 8f4f 	dsb	sy
1a001d8a:	e7fe      	b.n	1a001d8a <xTaskCreateStatic+0x26>
1a001d8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d90:	f383 8811 	msr	BASEPRI, r3
1a001d94:	f3bf 8f6f 	isb	sy
1a001d98:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a001d9c:	e7fe      	b.n	1a001d9c <xTaskCreateStatic+0x38>
1a001d9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001da2:	f383 8811 	msr	BASEPRI, r3
1a001da6:	f3bf 8f6f 	isb	sy
1a001daa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a001dae:	e7fe      	b.n	1a001dae <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001db0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001db2:	2502      	movs	r5, #2
1a001db4:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001db8:	2500      	movs	r5, #0
1a001dba:	9503      	str	r5, [sp, #12]
1a001dbc:	9402      	str	r4, [sp, #8]
1a001dbe:	ad05      	add	r5, sp, #20
1a001dc0:	9501      	str	r5, [sp, #4]
1a001dc2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001dc4:	9500      	str	r5, [sp, #0]
1a001dc6:	f7ff fe59 	bl	1a001a7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001dca:	4620      	mov	r0, r4
1a001dcc:	f7ff fed2 	bl	1a001b74 <prvAddNewTaskToReadyList>
	}
1a001dd0:	9805      	ldr	r0, [sp, #20]
1a001dd2:	b006      	add	sp, #24
1a001dd4:	bd70      	pop	{r4, r5, r6, pc}

1a001dd6 <xTaskCreate>:
	{
1a001dd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001dda:	b085      	sub	sp, #20
1a001ddc:	4607      	mov	r7, r0
1a001dde:	4688      	mov	r8, r1
1a001de0:	4615      	mov	r5, r2
1a001de2:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001de4:	0090      	lsls	r0, r2, #2
1a001de6:	f7ff f847 	bl	1a000e78 <pvPortMalloc>
			if( pxStack != NULL )
1a001dea:	b1f8      	cbz	r0, 1a001e2c <xTaskCreate+0x56>
1a001dec:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001dee:	2060      	movs	r0, #96	; 0x60
1a001df0:	f7ff f842 	bl	1a000e78 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001df4:	4604      	mov	r4, r0
1a001df6:	b1a8      	cbz	r0, 1a001e24 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a001df8:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001dfa:	b1e4      	cbz	r4, 1a001e36 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001dfc:	2300      	movs	r3, #0
1a001dfe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001e02:	9303      	str	r3, [sp, #12]
1a001e04:	9402      	str	r4, [sp, #8]
1a001e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001e08:	9301      	str	r3, [sp, #4]
1a001e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001e0c:	9300      	str	r3, [sp, #0]
1a001e0e:	464b      	mov	r3, r9
1a001e10:	462a      	mov	r2, r5
1a001e12:	4641      	mov	r1, r8
1a001e14:	4638      	mov	r0, r7
1a001e16:	f7ff fe31 	bl	1a001a7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001e1a:	4620      	mov	r0, r4
1a001e1c:	f7ff feaa 	bl	1a001b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001e20:	2001      	movs	r0, #1
1a001e22:	e005      	b.n	1a001e30 <xTaskCreate+0x5a>
					vPortFree( pxStack );
1a001e24:	4630      	mov	r0, r6
1a001e26:	f7ff f85f 	bl	1a000ee8 <vPortFree>
1a001e2a:	e7e6      	b.n	1a001dfa <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a001e30:	b005      	add	sp, #20
1a001e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001e3a:	e7f9      	b.n	1a001e30 <xTaskCreate+0x5a>

1a001e3c <vTaskStartScheduler>:
{
1a001e3c:	b510      	push	{r4, lr}
1a001e3e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001e40:	2400      	movs	r4, #0
1a001e42:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001e44:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001e46:	aa07      	add	r2, sp, #28
1a001e48:	a906      	add	r1, sp, #24
1a001e4a:	a805      	add	r0, sp, #20
1a001e4c:	f7ff fdb6 	bl	1a0019bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001e50:	9b05      	ldr	r3, [sp, #20]
1a001e52:	9302      	str	r3, [sp, #8]
1a001e54:	9b06      	ldr	r3, [sp, #24]
1a001e56:	9301      	str	r3, [sp, #4]
1a001e58:	9400      	str	r4, [sp, #0]
1a001e5a:	4623      	mov	r3, r4
1a001e5c:	9a07      	ldr	r2, [sp, #28]
1a001e5e:	4917      	ldr	r1, [pc, #92]	; (1a001ebc <vTaskStartScheduler+0x80>)
1a001e60:	4817      	ldr	r0, [pc, #92]	; (1a001ec0 <vTaskStartScheduler+0x84>)
1a001e62:	f7ff ff7f 	bl	1a001d64 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001e66:	b140      	cbz	r0, 1a001e7a <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001e68:	f000 fc46 	bl	1a0026f8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001e6c:	2801      	cmp	r0, #1
1a001e6e:	d006      	beq.n	1a001e7e <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001e70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001e74:	d018      	beq.n	1a001ea8 <vTaskStartScheduler+0x6c>
}
1a001e76:	b008      	add	sp, #32
1a001e78:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001e7a:	2000      	movs	r0, #0
1a001e7c:	e7f6      	b.n	1a001e6c <vTaskStartScheduler+0x30>
1a001e7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e82:	f383 8811 	msr	BASEPRI, r3
1a001e86:	f3bf 8f6f 	isb	sy
1a001e8a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001e8e:	4b0d      	ldr	r3, [pc, #52]	; (1a001ec4 <vTaskStartScheduler+0x88>)
1a001e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001e94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001e96:	4b0c      	ldr	r3, [pc, #48]	; (1a001ec8 <vTaskStartScheduler+0x8c>)
1a001e98:	2201      	movs	r2, #1
1a001e9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001e9c:	4b0b      	ldr	r3, [pc, #44]	; (1a001ecc <vTaskStartScheduler+0x90>)
1a001e9e:	2200      	movs	r2, #0
1a001ea0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001ea2:	f000 fee1 	bl	1a002c68 <xPortStartScheduler>
1a001ea6:	e7e6      	b.n	1a001e76 <vTaskStartScheduler+0x3a>
1a001ea8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001eac:	f383 8811 	msr	BASEPRI, r3
1a001eb0:	f3bf 8f6f 	isb	sy
1a001eb4:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001eb8:	e7fe      	b.n	1a001eb8 <vTaskStartScheduler+0x7c>
1a001eba:	bf00      	nop
1a001ebc:	1a0060b4 	.word	0x1a0060b4
1a001ec0:	1a001ca5 	.word	0x1a001ca5
1a001ec4:	100029f4 	.word	0x100029f4
1a001ec8:	10002a10 	.word	0x10002a10
1a001ecc:	10002a3c 	.word	0x10002a3c

1a001ed0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001ed0:	4a02      	ldr	r2, [pc, #8]	; (1a001edc <vTaskSuspendAll+0xc>)
1a001ed2:	6813      	ldr	r3, [r2, #0]
1a001ed4:	3301      	adds	r3, #1
1a001ed6:	6013      	str	r3, [r2, #0]
}
1a001ed8:	4770      	bx	lr
1a001eda:	bf00      	nop
1a001edc:	100029c0 	.word	0x100029c0

1a001ee0 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001ee0:	4b01      	ldr	r3, [pc, #4]	; (1a001ee8 <xTaskGetTickCount+0x8>)
1a001ee2:	6818      	ldr	r0, [r3, #0]
}
1a001ee4:	4770      	bx	lr
1a001ee6:	bf00      	nop
1a001ee8:	10002a3c 	.word	0x10002a3c

1a001eec <xTaskIncrementTick>:
{
1a001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001eee:	4b3a      	ldr	r3, [pc, #232]	; (1a001fd8 <xTaskIncrementTick+0xec>)
1a001ef0:	681b      	ldr	r3, [r3, #0]
1a001ef2:	2b00      	cmp	r3, #0
1a001ef4:	d164      	bne.n	1a001fc0 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001ef6:	4b39      	ldr	r3, [pc, #228]	; (1a001fdc <xTaskIncrementTick+0xf0>)
1a001ef8:	681d      	ldr	r5, [r3, #0]
1a001efa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001efc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001efe:	b9c5      	cbnz	r5, 1a001f32 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001f00:	4b37      	ldr	r3, [pc, #220]	; (1a001fe0 <xTaskIncrementTick+0xf4>)
1a001f02:	681b      	ldr	r3, [r3, #0]
1a001f04:	681b      	ldr	r3, [r3, #0]
1a001f06:	b143      	cbz	r3, 1a001f1a <xTaskIncrementTick+0x2e>
1a001f08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f0c:	f383 8811 	msr	BASEPRI, r3
1a001f10:	f3bf 8f6f 	isb	sy
1a001f14:	f3bf 8f4f 	dsb	sy
1a001f18:	e7fe      	b.n	1a001f18 <xTaskIncrementTick+0x2c>
1a001f1a:	4a31      	ldr	r2, [pc, #196]	; (1a001fe0 <xTaskIncrementTick+0xf4>)
1a001f1c:	6811      	ldr	r1, [r2, #0]
1a001f1e:	4b31      	ldr	r3, [pc, #196]	; (1a001fe4 <xTaskIncrementTick+0xf8>)
1a001f20:	6818      	ldr	r0, [r3, #0]
1a001f22:	6010      	str	r0, [r2, #0]
1a001f24:	6019      	str	r1, [r3, #0]
1a001f26:	4a30      	ldr	r2, [pc, #192]	; (1a001fe8 <xTaskIncrementTick+0xfc>)
1a001f28:	6813      	ldr	r3, [r2, #0]
1a001f2a:	3301      	adds	r3, #1
1a001f2c:	6013      	str	r3, [r2, #0]
1a001f2e:	f7ff fd8f 	bl	1a001a50 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001f32:	4b2e      	ldr	r3, [pc, #184]	; (1a001fec <xTaskIncrementTick+0x100>)
1a001f34:	681b      	ldr	r3, [r3, #0]
1a001f36:	42ab      	cmp	r3, r5
1a001f38:	d938      	bls.n	1a001fac <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001f3a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001f3c:	4b2c      	ldr	r3, [pc, #176]	; (1a001ff0 <xTaskIncrementTick+0x104>)
1a001f3e:	681b      	ldr	r3, [r3, #0]
1a001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f46:	009a      	lsls	r2, r3, #2
1a001f48:	4b2a      	ldr	r3, [pc, #168]	; (1a001ff4 <xTaskIncrementTick+0x108>)
1a001f4a:	589b      	ldr	r3, [r3, r2]
1a001f4c:	2b01      	cmp	r3, #1
1a001f4e:	d93c      	bls.n	1a001fca <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001f50:	2401      	movs	r4, #1
1a001f52:	e03a      	b.n	1a001fca <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001f54:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001f56:	4b22      	ldr	r3, [pc, #136]	; (1a001fe0 <xTaskIncrementTick+0xf4>)
1a001f58:	681b      	ldr	r3, [r3, #0]
1a001f5a:	681b      	ldr	r3, [r3, #0]
1a001f5c:	b343      	cbz	r3, 1a001fb0 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001f5e:	4b20      	ldr	r3, [pc, #128]	; (1a001fe0 <xTaskIncrementTick+0xf4>)
1a001f60:	681b      	ldr	r3, [r3, #0]
1a001f62:	68db      	ldr	r3, [r3, #12]
1a001f64:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001f66:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001f68:	429d      	cmp	r5, r3
1a001f6a:	d326      	bcc.n	1a001fba <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001f6c:	1d37      	adds	r7, r6, #4
1a001f6e:	4638      	mov	r0, r7
1a001f70:	f7ff fd10 	bl	1a001994 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001f74:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001f76:	b11b      	cbz	r3, 1a001f80 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001f78:	f106 0018 	add.w	r0, r6, #24
1a001f7c:	f7ff fd0a 	bl	1a001994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001f80:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001f82:	2201      	movs	r2, #1
1a001f84:	409a      	lsls	r2, r3
1a001f86:	491c      	ldr	r1, [pc, #112]	; (1a001ff8 <xTaskIncrementTick+0x10c>)
1a001f88:	6808      	ldr	r0, [r1, #0]
1a001f8a:	4302      	orrs	r2, r0
1a001f8c:	600a      	str	r2, [r1, #0]
1a001f8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f92:	009a      	lsls	r2, r3, #2
1a001f94:	4639      	mov	r1, r7
1a001f96:	4817      	ldr	r0, [pc, #92]	; (1a001ff4 <xTaskIncrementTick+0x108>)
1a001f98:	4410      	add	r0, r2
1a001f9a:	f7ff fcd6 	bl	1a00194a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001f9e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001fa0:	4b13      	ldr	r3, [pc, #76]	; (1a001ff0 <xTaskIncrementTick+0x104>)
1a001fa2:	681b      	ldr	r3, [r3, #0]
1a001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001fa6:	429a      	cmp	r2, r3
1a001fa8:	d2d4      	bcs.n	1a001f54 <xTaskIncrementTick+0x68>
1a001faa:	e7d4      	b.n	1a001f56 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001fac:	2400      	movs	r4, #0
1a001fae:	e7d2      	b.n	1a001f56 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001fb0:	4b0e      	ldr	r3, [pc, #56]	; (1a001fec <xTaskIncrementTick+0x100>)
1a001fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001fb6:	601a      	str	r2, [r3, #0]
					break;
1a001fb8:	e7c0      	b.n	1a001f3c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001fba:	4a0c      	ldr	r2, [pc, #48]	; (1a001fec <xTaskIncrementTick+0x100>)
1a001fbc:	6013      	str	r3, [r2, #0]
						break;
1a001fbe:	e7bd      	b.n	1a001f3c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001fc0:	4a0e      	ldr	r2, [pc, #56]	; (1a001ffc <xTaskIncrementTick+0x110>)
1a001fc2:	6813      	ldr	r3, [r2, #0]
1a001fc4:	3301      	adds	r3, #1
1a001fc6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001fc8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001fca:	4b0d      	ldr	r3, [pc, #52]	; (1a002000 <xTaskIncrementTick+0x114>)
1a001fcc:	681b      	ldr	r3, [r3, #0]
1a001fce:	b103      	cbz	r3, 1a001fd2 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001fd0:	2401      	movs	r4, #1
}
1a001fd2:	4620      	mov	r0, r4
1a001fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001fd6:	bf00      	nop
1a001fd8:	100029c0 	.word	0x100029c0
1a001fdc:	10002a3c 	.word	0x10002a3c
1a001fe0:	10002920 	.word	0x10002920
1a001fe4:	10002924 	.word	0x10002924
1a001fe8:	100029f8 	.word	0x100029f8
1a001fec:	100029f4 	.word	0x100029f4
1a001ff0:	1000291c 	.word	0x1000291c
1a001ff4:	10002928 	.word	0x10002928
1a001ff8:	100029c8 	.word	0x100029c8
1a001ffc:	100029bc 	.word	0x100029bc
1a002000:	10002a40 	.word	0x10002a40

1a002004 <xTaskResumeAll>:
{
1a002004:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a002006:	4b35      	ldr	r3, [pc, #212]	; (1a0020dc <xTaskResumeAll+0xd8>)
1a002008:	681b      	ldr	r3, [r3, #0]
1a00200a:	b943      	cbnz	r3, 1a00201e <xTaskResumeAll+0x1a>
1a00200c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002010:	f383 8811 	msr	BASEPRI, r3
1a002014:	f3bf 8f6f 	isb	sy
1a002018:	f3bf 8f4f 	dsb	sy
1a00201c:	e7fe      	b.n	1a00201c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00201e:	f000 fd81 	bl	1a002b24 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a002022:	4b2e      	ldr	r3, [pc, #184]	; (1a0020dc <xTaskResumeAll+0xd8>)
1a002024:	681a      	ldr	r2, [r3, #0]
1a002026:	3a01      	subs	r2, #1
1a002028:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00202a:	681b      	ldr	r3, [r3, #0]
1a00202c:	2b00      	cmp	r3, #0
1a00202e:	d14d      	bne.n	1a0020cc <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a002030:	4b2b      	ldr	r3, [pc, #172]	; (1a0020e0 <xTaskResumeAll+0xdc>)
1a002032:	681b      	ldr	r3, [r3, #0]
1a002034:	b90b      	cbnz	r3, 1a00203a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a002036:	2400      	movs	r4, #0
1a002038:	e049      	b.n	1a0020ce <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a00203a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00203c:	4b29      	ldr	r3, [pc, #164]	; (1a0020e4 <xTaskResumeAll+0xe0>)
1a00203e:	681b      	ldr	r3, [r3, #0]
1a002040:	b31b      	cbz	r3, 1a00208a <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a002042:	4b28      	ldr	r3, [pc, #160]	; (1a0020e4 <xTaskResumeAll+0xe0>)
1a002044:	68db      	ldr	r3, [r3, #12]
1a002046:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002048:	f104 0018 	add.w	r0, r4, #24
1a00204c:	f7ff fca2 	bl	1a001994 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002050:	1d25      	adds	r5, r4, #4
1a002052:	4628      	mov	r0, r5
1a002054:	f7ff fc9e 	bl	1a001994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002058:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00205a:	2201      	movs	r2, #1
1a00205c:	409a      	lsls	r2, r3
1a00205e:	4922      	ldr	r1, [pc, #136]	; (1a0020e8 <xTaskResumeAll+0xe4>)
1a002060:	6808      	ldr	r0, [r1, #0]
1a002062:	4302      	orrs	r2, r0
1a002064:	600a      	str	r2, [r1, #0]
1a002066:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00206a:	009a      	lsls	r2, r3, #2
1a00206c:	4629      	mov	r1, r5
1a00206e:	481f      	ldr	r0, [pc, #124]	; (1a0020ec <xTaskResumeAll+0xe8>)
1a002070:	4410      	add	r0, r2
1a002072:	f7ff fc6a 	bl	1a00194a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002076:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002078:	4b1d      	ldr	r3, [pc, #116]	; (1a0020f0 <xTaskResumeAll+0xec>)
1a00207a:	681b      	ldr	r3, [r3, #0]
1a00207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00207e:	429a      	cmp	r2, r3
1a002080:	d3dc      	bcc.n	1a00203c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a002082:	4b1c      	ldr	r3, [pc, #112]	; (1a0020f4 <xTaskResumeAll+0xf0>)
1a002084:	2201      	movs	r2, #1
1a002086:	601a      	str	r2, [r3, #0]
1a002088:	e7d8      	b.n	1a00203c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a00208a:	b10c      	cbz	r4, 1a002090 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a00208c:	f7ff fce0 	bl	1a001a50 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a002090:	4b19      	ldr	r3, [pc, #100]	; (1a0020f8 <xTaskResumeAll+0xf4>)
1a002092:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a002094:	b974      	cbnz	r4, 1a0020b4 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a002096:	4b17      	ldr	r3, [pc, #92]	; (1a0020f4 <xTaskResumeAll+0xf0>)
1a002098:	681b      	ldr	r3, [r3, #0]
1a00209a:	b1e3      	cbz	r3, 1a0020d6 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a00209c:	4b17      	ldr	r3, [pc, #92]	; (1a0020fc <xTaskResumeAll+0xf8>)
1a00209e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0020a2:	601a      	str	r2, [r3, #0]
1a0020a4:	f3bf 8f4f 	dsb	sy
1a0020a8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0020ac:	2401      	movs	r4, #1
1a0020ae:	e00e      	b.n	1a0020ce <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0020b0:	3c01      	subs	r4, #1
1a0020b2:	d007      	beq.n	1a0020c4 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a0020b4:	f7ff ff1a 	bl	1a001eec <xTaskIncrementTick>
1a0020b8:	2800      	cmp	r0, #0
1a0020ba:	d0f9      	beq.n	1a0020b0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a0020bc:	4b0d      	ldr	r3, [pc, #52]	; (1a0020f4 <xTaskResumeAll+0xf0>)
1a0020be:	2201      	movs	r2, #1
1a0020c0:	601a      	str	r2, [r3, #0]
1a0020c2:	e7f5      	b.n	1a0020b0 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a0020c4:	4b0c      	ldr	r3, [pc, #48]	; (1a0020f8 <xTaskResumeAll+0xf4>)
1a0020c6:	2200      	movs	r2, #0
1a0020c8:	601a      	str	r2, [r3, #0]
1a0020ca:	e7e4      	b.n	1a002096 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a0020cc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0020ce:	f000 fd4b 	bl	1a002b68 <vPortExitCritical>
}
1a0020d2:	4620      	mov	r0, r4
1a0020d4:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a0020d6:	2400      	movs	r4, #0
1a0020d8:	e7f9      	b.n	1a0020ce <xTaskResumeAll+0xca>
1a0020da:	bf00      	nop
1a0020dc:	100029c0 	.word	0x100029c0
1a0020e0:	100029b4 	.word	0x100029b4
1a0020e4:	100029fc 	.word	0x100029fc
1a0020e8:	100029c8 	.word	0x100029c8
1a0020ec:	10002928 	.word	0x10002928
1a0020f0:	1000291c 	.word	0x1000291c
1a0020f4:	10002a40 	.word	0x10002a40
1a0020f8:	100029bc 	.word	0x100029bc
1a0020fc:	e000ed04 	.word	0xe000ed04

1a002100 <vTaskDelay>:
	{
1a002100:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a002102:	b1a8      	cbz	r0, 1a002130 <vTaskDelay+0x30>
1a002104:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a002106:	4b0f      	ldr	r3, [pc, #60]	; (1a002144 <vTaskDelay+0x44>)
1a002108:	681b      	ldr	r3, [r3, #0]
1a00210a:	b143      	cbz	r3, 1a00211e <vTaskDelay+0x1e>
1a00210c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002110:	f383 8811 	msr	BASEPRI, r3
1a002114:	f3bf 8f6f 	isb	sy
1a002118:	f3bf 8f4f 	dsb	sy
1a00211c:	e7fe      	b.n	1a00211c <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a00211e:	f7ff fed7 	bl	1a001ed0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a002122:	2100      	movs	r1, #0
1a002124:	4620      	mov	r0, r4
1a002126:	f7ff fdd1 	bl	1a001ccc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a00212a:	f7ff ff6b 	bl	1a002004 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00212e:	b938      	cbnz	r0, 1a002140 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a002130:	4b05      	ldr	r3, [pc, #20]	; (1a002148 <vTaskDelay+0x48>)
1a002132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002136:	601a      	str	r2, [r3, #0]
1a002138:	f3bf 8f4f 	dsb	sy
1a00213c:	f3bf 8f6f 	isb	sy
	}
1a002140:	bd10      	pop	{r4, pc}
1a002142:	bf00      	nop
1a002144:	100029c0 	.word	0x100029c0
1a002148:	e000ed04 	.word	0xe000ed04

1a00214c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a00214c:	4b2d      	ldr	r3, [pc, #180]	; (1a002204 <vTaskSwitchContext+0xb8>)
1a00214e:	681b      	ldr	r3, [r3, #0]
1a002150:	b11b      	cbz	r3, 1a00215a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a002152:	4b2d      	ldr	r3, [pc, #180]	; (1a002208 <vTaskSwitchContext+0xbc>)
1a002154:	2201      	movs	r2, #1
1a002156:	601a      	str	r2, [r3, #0]
1a002158:	4770      	bx	lr
{
1a00215a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a00215c:	4b2a      	ldr	r3, [pc, #168]	; (1a002208 <vTaskSwitchContext+0xbc>)
1a00215e:	2200      	movs	r2, #0
1a002160:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a002162:	4b2a      	ldr	r3, [pc, #168]	; (1a00220c <vTaskSwitchContext+0xc0>)
1a002164:	681b      	ldr	r3, [r3, #0]
1a002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a002168:	681a      	ldr	r2, [r3, #0]
1a00216a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00216e:	d103      	bne.n	1a002178 <vTaskSwitchContext+0x2c>
1a002170:	685a      	ldr	r2, [r3, #4]
1a002172:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002176:	d01b      	beq.n	1a0021b0 <vTaskSwitchContext+0x64>
1a002178:	4b24      	ldr	r3, [pc, #144]	; (1a00220c <vTaskSwitchContext+0xc0>)
1a00217a:	6818      	ldr	r0, [r3, #0]
1a00217c:	6819      	ldr	r1, [r3, #0]
1a00217e:	3134      	adds	r1, #52	; 0x34
1a002180:	f7ff fc58 	bl	1a001a34 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002184:	4b22      	ldr	r3, [pc, #136]	; (1a002210 <vTaskSwitchContext+0xc4>)
1a002186:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a002188:	fab3 f383 	clz	r3, r3
1a00218c:	b2db      	uxtb	r3, r3
1a00218e:	f1c3 031f 	rsb	r3, r3, #31
1a002192:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002196:	008a      	lsls	r2, r1, #2
1a002198:	491e      	ldr	r1, [pc, #120]	; (1a002214 <vTaskSwitchContext+0xc8>)
1a00219a:	588a      	ldr	r2, [r1, r2]
1a00219c:	b98a      	cbnz	r2, 1a0021c2 <vTaskSwitchContext+0x76>
	__asm volatile
1a00219e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021a2:	f383 8811 	msr	BASEPRI, r3
1a0021a6:	f3bf 8f6f 	isb	sy
1a0021aa:	f3bf 8f4f 	dsb	sy
1a0021ae:	e7fe      	b.n	1a0021ae <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0021b0:	689a      	ldr	r2, [r3, #8]
1a0021b2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0021b6:	d1df      	bne.n	1a002178 <vTaskSwitchContext+0x2c>
1a0021b8:	68db      	ldr	r3, [r3, #12]
1a0021ba:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0021be:	d1db      	bne.n	1a002178 <vTaskSwitchContext+0x2c>
1a0021c0:	e7e0      	b.n	1a002184 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0021c2:	4814      	ldr	r0, [pc, #80]	; (1a002214 <vTaskSwitchContext+0xc8>)
1a0021c4:	009a      	lsls	r2, r3, #2
1a0021c6:	18d4      	adds	r4, r2, r3
1a0021c8:	00a1      	lsls	r1, r4, #2
1a0021ca:	4401      	add	r1, r0
1a0021cc:	684c      	ldr	r4, [r1, #4]
1a0021ce:	6864      	ldr	r4, [r4, #4]
1a0021d0:	604c      	str	r4, [r1, #4]
1a0021d2:	441a      	add	r2, r3
1a0021d4:	0091      	lsls	r1, r2, #2
1a0021d6:	3108      	adds	r1, #8
1a0021d8:	4408      	add	r0, r1
1a0021da:	4284      	cmp	r4, r0
1a0021dc:	d009      	beq.n	1a0021f2 <vTaskSwitchContext+0xa6>
1a0021de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0021e2:	009a      	lsls	r2, r3, #2
1a0021e4:	4b0b      	ldr	r3, [pc, #44]	; (1a002214 <vTaskSwitchContext+0xc8>)
1a0021e6:	4413      	add	r3, r2
1a0021e8:	685b      	ldr	r3, [r3, #4]
1a0021ea:	68da      	ldr	r2, [r3, #12]
1a0021ec:	4b07      	ldr	r3, [pc, #28]	; (1a00220c <vTaskSwitchContext+0xc0>)
1a0021ee:	601a      	str	r2, [r3, #0]
}
1a0021f0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0021f2:	6860      	ldr	r0, [r4, #4]
1a0021f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a0021f8:	0091      	lsls	r1, r2, #2
1a0021fa:	4a06      	ldr	r2, [pc, #24]	; (1a002214 <vTaskSwitchContext+0xc8>)
1a0021fc:	440a      	add	r2, r1
1a0021fe:	6050      	str	r0, [r2, #4]
1a002200:	e7ed      	b.n	1a0021de <vTaskSwitchContext+0x92>
1a002202:	bf00      	nop
1a002204:	100029c0 	.word	0x100029c0
1a002208:	10002a40 	.word	0x10002a40
1a00220c:	1000291c 	.word	0x1000291c
1a002210:	100029c8 	.word	0x100029c8
1a002214:	10002928 	.word	0x10002928

1a002218 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a002218:	b158      	cbz	r0, 1a002232 <vTaskPlaceOnEventList+0x1a>
{
1a00221a:	b510      	push	{r4, lr}
1a00221c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00221e:	4b09      	ldr	r3, [pc, #36]	; (1a002244 <vTaskPlaceOnEventList+0x2c>)
1a002220:	6819      	ldr	r1, [r3, #0]
1a002222:	3118      	adds	r1, #24
1a002224:	f7ff fb9c 	bl	1a001960 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a002228:	2101      	movs	r1, #1
1a00222a:	4620      	mov	r0, r4
1a00222c:	f7ff fd4e 	bl	1a001ccc <prvAddCurrentTaskToDelayedList>
}
1a002230:	bd10      	pop	{r4, pc}
1a002232:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002236:	f383 8811 	msr	BASEPRI, r3
1a00223a:	f3bf 8f6f 	isb	sy
1a00223e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a002242:	e7fe      	b.n	1a002242 <vTaskPlaceOnEventList+0x2a>
1a002244:	1000291c 	.word	0x1000291c

1a002248 <vTaskPlaceOnEventListRestricted>:
	{
1a002248:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00224a:	b170      	cbz	r0, 1a00226a <vTaskPlaceOnEventListRestricted+0x22>
1a00224c:	460c      	mov	r4, r1
1a00224e:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002250:	4a0a      	ldr	r2, [pc, #40]	; (1a00227c <vTaskPlaceOnEventListRestricted+0x34>)
1a002252:	6811      	ldr	r1, [r2, #0]
1a002254:	3118      	adds	r1, #24
1a002256:	f7ff fb78 	bl	1a00194a <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a00225a:	b10d      	cbz	r5, 1a002260 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a00225c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a002260:	4629      	mov	r1, r5
1a002262:	4620      	mov	r0, r4
1a002264:	f7ff fd32 	bl	1a001ccc <prvAddCurrentTaskToDelayedList>
	}
1a002268:	bd38      	pop	{r3, r4, r5, pc}
1a00226a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00226e:	f383 8811 	msr	BASEPRI, r3
1a002272:	f3bf 8f6f 	isb	sy
1a002276:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a00227a:	e7fe      	b.n	1a00227a <vTaskPlaceOnEventListRestricted+0x32>
1a00227c:	1000291c 	.word	0x1000291c

1a002280 <xTaskRemoveFromEventList>:
{
1a002280:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a002282:	68c3      	ldr	r3, [r0, #12]
1a002284:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002286:	b324      	cbz	r4, 1a0022d2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002288:	f104 0518 	add.w	r5, r4, #24
1a00228c:	4628      	mov	r0, r5
1a00228e:	f7ff fb81 	bl	1a001994 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002292:	4b18      	ldr	r3, [pc, #96]	; (1a0022f4 <xTaskRemoveFromEventList+0x74>)
1a002294:	681b      	ldr	r3, [r3, #0]
1a002296:	bb2b      	cbnz	r3, 1a0022e4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002298:	1d25      	adds	r5, r4, #4
1a00229a:	4628      	mov	r0, r5
1a00229c:	f7ff fb7a 	bl	1a001994 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0022a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0022a2:	2201      	movs	r2, #1
1a0022a4:	409a      	lsls	r2, r3
1a0022a6:	4914      	ldr	r1, [pc, #80]	; (1a0022f8 <xTaskRemoveFromEventList+0x78>)
1a0022a8:	6808      	ldr	r0, [r1, #0]
1a0022aa:	4302      	orrs	r2, r0
1a0022ac:	600a      	str	r2, [r1, #0]
1a0022ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0022b2:	009a      	lsls	r2, r3, #2
1a0022b4:	4629      	mov	r1, r5
1a0022b6:	4811      	ldr	r0, [pc, #68]	; (1a0022fc <xTaskRemoveFromEventList+0x7c>)
1a0022b8:	4410      	add	r0, r2
1a0022ba:	f7ff fb46 	bl	1a00194a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0022be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0022c0:	4b0f      	ldr	r3, [pc, #60]	; (1a002300 <xTaskRemoveFromEventList+0x80>)
1a0022c2:	681b      	ldr	r3, [r3, #0]
1a0022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0022c6:	429a      	cmp	r2, r3
1a0022c8:	d911      	bls.n	1a0022ee <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0022ca:	2001      	movs	r0, #1
1a0022cc:	4b0d      	ldr	r3, [pc, #52]	; (1a002304 <xTaskRemoveFromEventList+0x84>)
1a0022ce:	6018      	str	r0, [r3, #0]
1a0022d0:	e00e      	b.n	1a0022f0 <xTaskRemoveFromEventList+0x70>
1a0022d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022d6:	f383 8811 	msr	BASEPRI, r3
1a0022da:	f3bf 8f6f 	isb	sy
1a0022de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a0022e2:	e7fe      	b.n	1a0022e2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0022e4:	4629      	mov	r1, r5
1a0022e6:	4808      	ldr	r0, [pc, #32]	; (1a002308 <xTaskRemoveFromEventList+0x88>)
1a0022e8:	f7ff fb2f 	bl	1a00194a <vListInsertEnd>
1a0022ec:	e7e7      	b.n	1a0022be <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a0022ee:	2000      	movs	r0, #0
}
1a0022f0:	bd38      	pop	{r3, r4, r5, pc}
1a0022f2:	bf00      	nop
1a0022f4:	100029c0 	.word	0x100029c0
1a0022f8:	100029c8 	.word	0x100029c8
1a0022fc:	10002928 	.word	0x10002928
1a002300:	1000291c 	.word	0x1000291c
1a002304:	10002a40 	.word	0x10002a40
1a002308:	100029fc 	.word	0x100029fc

1a00230c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a00230c:	4b03      	ldr	r3, [pc, #12]	; (1a00231c <vTaskInternalSetTimeOutState+0x10>)
1a00230e:	681b      	ldr	r3, [r3, #0]
1a002310:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a002312:	4b03      	ldr	r3, [pc, #12]	; (1a002320 <vTaskInternalSetTimeOutState+0x14>)
1a002314:	681b      	ldr	r3, [r3, #0]
1a002316:	6043      	str	r3, [r0, #4]
}
1a002318:	4770      	bx	lr
1a00231a:	bf00      	nop
1a00231c:	100029f8 	.word	0x100029f8
1a002320:	10002a3c 	.word	0x10002a3c

1a002324 <xTaskCheckForTimeOut>:
{
1a002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a002326:	b1c8      	cbz	r0, 1a00235c <xTaskCheckForTimeOut+0x38>
1a002328:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00232a:	b301      	cbz	r1, 1a00236e <xTaskCheckForTimeOut+0x4a>
1a00232c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a00232e:	f000 fbf9 	bl	1a002b24 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a002332:	4b1b      	ldr	r3, [pc, #108]	; (1a0023a0 <xTaskCheckForTimeOut+0x7c>)
1a002334:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a002336:	686b      	ldr	r3, [r5, #4]
1a002338:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a00233a:	6822      	ldr	r2, [r4, #0]
1a00233c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a002340:	d026      	beq.n	1a002390 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002342:	682f      	ldr	r7, [r5, #0]
1a002344:	4e17      	ldr	r6, [pc, #92]	; (1a0023a4 <xTaskCheckForTimeOut+0x80>)
1a002346:	6836      	ldr	r6, [r6, #0]
1a002348:	42b7      	cmp	r7, r6
1a00234a:	d001      	beq.n	1a002350 <xTaskCheckForTimeOut+0x2c>
1a00234c:	428b      	cmp	r3, r1
1a00234e:	d924      	bls.n	1a00239a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002350:	4282      	cmp	r2, r0
1a002352:	d815      	bhi.n	1a002380 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002354:	2300      	movs	r3, #0
1a002356:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002358:	2401      	movs	r4, #1
1a00235a:	e01a      	b.n	1a002392 <xTaskCheckForTimeOut+0x6e>
1a00235c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002360:	f383 8811 	msr	BASEPRI, r3
1a002364:	f3bf 8f6f 	isb	sy
1a002368:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a00236c:	e7fe      	b.n	1a00236c <xTaskCheckForTimeOut+0x48>
1a00236e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002372:	f383 8811 	msr	BASEPRI, r3
1a002376:	f3bf 8f6f 	isb	sy
1a00237a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a00237e:	e7fe      	b.n	1a00237e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a002380:	1a5b      	subs	r3, r3, r1
1a002382:	4413      	add	r3, r2
1a002384:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002386:	4628      	mov	r0, r5
1a002388:	f7ff ffc0 	bl	1a00230c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00238c:	2400      	movs	r4, #0
1a00238e:	e000      	b.n	1a002392 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a002390:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002392:	f000 fbe9 	bl	1a002b68 <vPortExitCritical>
}
1a002396:	4620      	mov	r0, r4
1a002398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a00239a:	2401      	movs	r4, #1
1a00239c:	e7f9      	b.n	1a002392 <xTaskCheckForTimeOut+0x6e>
1a00239e:	bf00      	nop
1a0023a0:	10002a3c 	.word	0x10002a3c
1a0023a4:	100029f8 	.word	0x100029f8

1a0023a8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0023a8:	4b01      	ldr	r3, [pc, #4]	; (1a0023b0 <vTaskMissedYield+0x8>)
1a0023aa:	2201      	movs	r2, #1
1a0023ac:	601a      	str	r2, [r3, #0]
}
1a0023ae:	4770      	bx	lr
1a0023b0:	10002a40 	.word	0x10002a40

1a0023b4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0023b4:	4b05      	ldr	r3, [pc, #20]	; (1a0023cc <xTaskGetSchedulerState+0x18>)
1a0023b6:	681b      	ldr	r3, [r3, #0]
1a0023b8:	b133      	cbz	r3, 1a0023c8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0023ba:	4b05      	ldr	r3, [pc, #20]	; (1a0023d0 <xTaskGetSchedulerState+0x1c>)
1a0023bc:	681b      	ldr	r3, [r3, #0]
1a0023be:	b10b      	cbz	r3, 1a0023c4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a0023c0:	2000      	movs	r0, #0
	}
1a0023c2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0023c4:	2002      	movs	r0, #2
1a0023c6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0023c8:	2001      	movs	r0, #1
1a0023ca:	4770      	bx	lr
1a0023cc:	10002a10 	.word	0x10002a10
1a0023d0:	100029c0 	.word	0x100029c0

1a0023d4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a0023d4:	2800      	cmp	r0, #0
1a0023d6:	d050      	beq.n	1a00247a <xTaskPriorityInherit+0xa6>
	{
1a0023d8:	b538      	push	{r3, r4, r5, lr}
1a0023da:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a0023dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a0023de:	4929      	ldr	r1, [pc, #164]	; (1a002484 <xTaskPriorityInherit+0xb0>)
1a0023e0:	6809      	ldr	r1, [r1, #0]
1a0023e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0023e4:	428a      	cmp	r2, r1
1a0023e6:	d240      	bcs.n	1a00246a <xTaskPriorityInherit+0x96>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0023e8:	6981      	ldr	r1, [r0, #24]
1a0023ea:	2900      	cmp	r1, #0
1a0023ec:	db05      	blt.n	1a0023fa <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0023ee:	4925      	ldr	r1, [pc, #148]	; (1a002484 <xTaskPriorityInherit+0xb0>)
1a0023f0:	6809      	ldr	r1, [r1, #0]
1a0023f2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0023f4:	f1c1 0107 	rsb	r1, r1, #7
1a0023f8:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a0023fa:	6960      	ldr	r0, [r4, #20]
1a0023fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a002400:	0091      	lsls	r1, r2, #2
1a002402:	4a21      	ldr	r2, [pc, #132]	; (1a002488 <xTaskPriorityInherit+0xb4>)
1a002404:	440a      	add	r2, r1
1a002406:	4290      	cmp	r0, r2
1a002408:	d005      	beq.n	1a002416 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a00240a:	4a1e      	ldr	r2, [pc, #120]	; (1a002484 <xTaskPriorityInherit+0xb0>)
1a00240c:	6812      	ldr	r2, [r2, #0]
1a00240e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a002410:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a002412:	2001      	movs	r0, #1
	}
1a002414:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002416:	1d25      	adds	r5, r4, #4
1a002418:	4628      	mov	r0, r5
1a00241a:	f7ff fabb 	bl	1a001994 <uxListRemove>
1a00241e:	b1a0      	cbz	r0, 1a00244a <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002420:	4b18      	ldr	r3, [pc, #96]	; (1a002484 <xTaskPriorityInherit+0xb0>)
1a002422:	681b      	ldr	r3, [r3, #0]
1a002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002426:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002428:	2401      	movs	r4, #1
1a00242a:	fa04 f203 	lsl.w	r2, r4, r3
1a00242e:	4917      	ldr	r1, [pc, #92]	; (1a00248c <xTaskPriorityInherit+0xb8>)
1a002430:	6808      	ldr	r0, [r1, #0]
1a002432:	4302      	orrs	r2, r0
1a002434:	600a      	str	r2, [r1, #0]
1a002436:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00243a:	009a      	lsls	r2, r3, #2
1a00243c:	4629      	mov	r1, r5
1a00243e:	4812      	ldr	r0, [pc, #72]	; (1a002488 <xTaskPriorityInherit+0xb4>)
1a002440:	4410      	add	r0, r2
1a002442:	f7ff fa82 	bl	1a00194a <vListInsertEnd>
				xReturn = pdTRUE;
1a002446:	4620      	mov	r0, r4
1a002448:	e7e4      	b.n	1a002414 <xTaskPriorityInherit+0x40>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a00244a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00244c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002450:	008a      	lsls	r2, r1, #2
1a002452:	490d      	ldr	r1, [pc, #52]	; (1a002488 <xTaskPriorityInherit+0xb4>)
1a002454:	588a      	ldr	r2, [r1, r2]
1a002456:	2a00      	cmp	r2, #0
1a002458:	d1e2      	bne.n	1a002420 <xTaskPriorityInherit+0x4c>
1a00245a:	2201      	movs	r2, #1
1a00245c:	409a      	lsls	r2, r3
1a00245e:	490b      	ldr	r1, [pc, #44]	; (1a00248c <xTaskPriorityInherit+0xb8>)
1a002460:	680b      	ldr	r3, [r1, #0]
1a002462:	ea23 0302 	bic.w	r3, r3, r2
1a002466:	600b      	str	r3, [r1, #0]
1a002468:	e7da      	b.n	1a002420 <xTaskPriorityInherit+0x4c>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a00246a:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a00246c:	4b05      	ldr	r3, [pc, #20]	; (1a002484 <xTaskPriorityInherit+0xb0>)
1a00246e:	681b      	ldr	r3, [r3, #0]
1a002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002472:	429a      	cmp	r2, r3
1a002474:	d303      	bcc.n	1a00247e <xTaskPriorityInherit+0xaa>
	BaseType_t xReturn = pdFALSE;
1a002476:	2000      	movs	r0, #0
1a002478:	e7cc      	b.n	1a002414 <xTaskPriorityInherit+0x40>
1a00247a:	2000      	movs	r0, #0
	}
1a00247c:	4770      	bx	lr
					xReturn = pdTRUE;
1a00247e:	2001      	movs	r0, #1
		return xReturn;
1a002480:	e7c8      	b.n	1a002414 <xTaskPriorityInherit+0x40>
1a002482:	bf00      	nop
1a002484:	1000291c 	.word	0x1000291c
1a002488:	10002928 	.word	0x10002928
1a00248c:	100029c8 	.word	0x100029c8

1a002490 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002490:	2800      	cmp	r0, #0
1a002492:	d04c      	beq.n	1a00252e <xTaskPriorityDisinherit+0x9e>
	{
1a002494:	b538      	push	{r3, r4, r5, lr}
1a002496:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002498:	4a27      	ldr	r2, [pc, #156]	; (1a002538 <xTaskPriorityDisinherit+0xa8>)
1a00249a:	6812      	ldr	r2, [r2, #0]
1a00249c:	4282      	cmp	r2, r0
1a00249e:	d008      	beq.n	1a0024b2 <xTaskPriorityDisinherit+0x22>
1a0024a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024a4:	f383 8811 	msr	BASEPRI, r3
1a0024a8:	f3bf 8f6f 	isb	sy
1a0024ac:	f3bf 8f4f 	dsb	sy
1a0024b0:	e7fe      	b.n	1a0024b0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0024b2:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0024b4:	b942      	cbnz	r2, 1a0024c8 <xTaskPriorityDisinherit+0x38>
1a0024b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024ba:	f383 8811 	msr	BASEPRI, r3
1a0024be:	f3bf 8f6f 	isb	sy
1a0024c2:	f3bf 8f4f 	dsb	sy
1a0024c6:	e7fe      	b.n	1a0024c6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0024c8:	3a01      	subs	r2, #1
1a0024ca:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0024cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0024ce:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0024d0:	4288      	cmp	r0, r1
1a0024d2:	d02e      	beq.n	1a002532 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0024d4:	b10a      	cbz	r2, 1a0024da <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a0024d6:	2000      	movs	r0, #0
	}
1a0024d8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0024da:	1d25      	adds	r5, r4, #4
1a0024dc:	4628      	mov	r0, r5
1a0024de:	f7ff fa59 	bl	1a001994 <uxListRemove>
1a0024e2:	b970      	cbnz	r0, 1a002502 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0024e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0024e6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0024ea:	008b      	lsls	r3, r1, #2
1a0024ec:	4913      	ldr	r1, [pc, #76]	; (1a00253c <xTaskPriorityDisinherit+0xac>)
1a0024ee:	58cb      	ldr	r3, [r1, r3]
1a0024f0:	b93b      	cbnz	r3, 1a002502 <xTaskPriorityDisinherit+0x72>
1a0024f2:	2301      	movs	r3, #1
1a0024f4:	fa03 f202 	lsl.w	r2, r3, r2
1a0024f8:	4911      	ldr	r1, [pc, #68]	; (1a002540 <xTaskPriorityDisinherit+0xb0>)
1a0024fa:	680b      	ldr	r3, [r1, #0]
1a0024fc:	ea23 0302 	bic.w	r3, r3, r2
1a002500:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002502:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002504:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002506:	f1c3 0207 	rsb	r2, r3, #7
1a00250a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a00250c:	2401      	movs	r4, #1
1a00250e:	fa04 f203 	lsl.w	r2, r4, r3
1a002512:	490b      	ldr	r1, [pc, #44]	; (1a002540 <xTaskPriorityDisinherit+0xb0>)
1a002514:	6808      	ldr	r0, [r1, #0]
1a002516:	4302      	orrs	r2, r0
1a002518:	600a      	str	r2, [r1, #0]
1a00251a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00251e:	009a      	lsls	r2, r3, #2
1a002520:	4629      	mov	r1, r5
1a002522:	4806      	ldr	r0, [pc, #24]	; (1a00253c <xTaskPriorityDisinherit+0xac>)
1a002524:	4410      	add	r0, r2
1a002526:	f7ff fa10 	bl	1a00194a <vListInsertEnd>
					xReturn = pdTRUE;
1a00252a:	4620      	mov	r0, r4
1a00252c:	e7d4      	b.n	1a0024d8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a00252e:	2000      	movs	r0, #0
	}
1a002530:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002532:	2000      	movs	r0, #0
1a002534:	e7d0      	b.n	1a0024d8 <xTaskPriorityDisinherit+0x48>
1a002536:	bf00      	nop
1a002538:	1000291c 	.word	0x1000291c
1a00253c:	10002928 	.word	0x10002928
1a002540:	100029c8 	.word	0x100029c8

1a002544 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a002544:	2800      	cmp	r0, #0
1a002546:	d056      	beq.n	1a0025f6 <vTaskPriorityDisinheritAfterTimeout+0xb2>
	{
1a002548:	b538      	push	{r3, r4, r5, lr}
1a00254a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a00254c:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a00254e:	b940      	cbnz	r0, 1a002562 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002550:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002554:	f383 8811 	msr	BASEPRI, r3
1a002558:	f3bf 8f6f 	isb	sy
1a00255c:	f3bf 8f4f 	dsb	sy
1a002560:	e7fe      	b.n	1a002560 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002562:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a002564:	428a      	cmp	r2, r1
1a002566:	d200      	bcs.n	1a00256a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a002568:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a00256a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a00256c:	4291      	cmp	r1, r2
1a00256e:	d001      	beq.n	1a002574 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002570:	2801      	cmp	r0, #1
1a002572:	d000      	beq.n	1a002576 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a002574:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a002576:	4820      	ldr	r0, [pc, #128]	; (1a0025f8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a002578:	6800      	ldr	r0, [r0, #0]
1a00257a:	42a0      	cmp	r0, r4
1a00257c:	d032      	beq.n	1a0025e4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					pxTCB->uxPriority = uxPriorityToUse;
1a00257e:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002580:	69a0      	ldr	r0, [r4, #24]
1a002582:	2800      	cmp	r0, #0
1a002584:	db02      	blt.n	1a00258c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002586:	f1c2 0207 	rsb	r2, r2, #7
1a00258a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a00258c:	6963      	ldr	r3, [r4, #20]
1a00258e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a002592:	0088      	lsls	r0, r1, #2
1a002594:	4a19      	ldr	r2, [pc, #100]	; (1a0025fc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002596:	4402      	add	r2, r0
1a002598:	4293      	cmp	r3, r2
1a00259a:	d1eb      	bne.n	1a002574 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00259c:	1d25      	adds	r5, r4, #4
1a00259e:	4628      	mov	r0, r5
1a0025a0:	f7ff f9f8 	bl	1a001994 <uxListRemove>
1a0025a4:	b970      	cbnz	r0, 1a0025c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0025a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0025a8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0025ac:	008b      	lsls	r3, r1, #2
1a0025ae:	4913      	ldr	r1, [pc, #76]	; (1a0025fc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0025b0:	58cb      	ldr	r3, [r1, r3]
1a0025b2:	b93b      	cbnz	r3, 1a0025c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
1a0025b4:	2301      	movs	r3, #1
1a0025b6:	fa03 f202 	lsl.w	r2, r3, r2
1a0025ba:	4911      	ldr	r1, [pc, #68]	; (1a002600 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0025bc:	680b      	ldr	r3, [r1, #0]
1a0025be:	ea23 0302 	bic.w	r3, r3, r2
1a0025c2:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a0025c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0025c6:	2201      	movs	r2, #1
1a0025c8:	409a      	lsls	r2, r3
1a0025ca:	490d      	ldr	r1, [pc, #52]	; (1a002600 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0025cc:	6808      	ldr	r0, [r1, #0]
1a0025ce:	4302      	orrs	r2, r0
1a0025d0:	600a      	str	r2, [r1, #0]
1a0025d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0025d6:	009a      	lsls	r2, r3, #2
1a0025d8:	4629      	mov	r1, r5
1a0025da:	4808      	ldr	r0, [pc, #32]	; (1a0025fc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0025dc:	4410      	add	r0, r2
1a0025de:	f7ff f9b4 	bl	1a00194a <vListInsertEnd>
	}
1a0025e2:	e7c7      	b.n	1a002574 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0025e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025e8:	f383 8811 	msr	BASEPRI, r3
1a0025ec:	f3bf 8f6f 	isb	sy
1a0025f0:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
1a0025f4:	e7fe      	b.n	1a0025f4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
1a0025f6:	4770      	bx	lr
1a0025f8:	1000291c 	.word	0x1000291c
1a0025fc:	10002928 	.word	0x10002928
1a002600:	100029c8 	.word	0x100029c8

1a002604 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a002604:	4b05      	ldr	r3, [pc, #20]	; (1a00261c <pvTaskIncrementMutexHeldCount+0x18>)
1a002606:	681b      	ldr	r3, [r3, #0]
1a002608:	b123      	cbz	r3, 1a002614 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a00260a:	4b04      	ldr	r3, [pc, #16]	; (1a00261c <pvTaskIncrementMutexHeldCount+0x18>)
1a00260c:	681a      	ldr	r2, [r3, #0]
1a00260e:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002610:	3301      	adds	r3, #1
1a002612:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a002614:	4b01      	ldr	r3, [pc, #4]	; (1a00261c <pvTaskIncrementMutexHeldCount+0x18>)
1a002616:	6818      	ldr	r0, [r3, #0]
	}
1a002618:	4770      	bx	lr
1a00261a:	bf00      	nop
1a00261c:	1000291c 	.word	0x1000291c

1a002620 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002620:	4b06      	ldr	r3, [pc, #24]	; (1a00263c <prvGetNextExpireTime+0x1c>)
1a002622:	681a      	ldr	r2, [r3, #0]
1a002624:	6813      	ldr	r3, [r2, #0]
1a002626:	fab3 f383 	clz	r3, r3
1a00262a:	095b      	lsrs	r3, r3, #5
1a00262c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00262e:	b913      	cbnz	r3, 1a002636 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002630:	68d3      	ldr	r3, [r2, #12]
1a002632:	6818      	ldr	r0, [r3, #0]
1a002634:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002636:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002638:	4770      	bx	lr
1a00263a:	bf00      	nop
1a00263c:	10002a44 	.word	0x10002a44

1a002640 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002640:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002642:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002644:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002646:	4291      	cmp	r1, r2
1a002648:	d80c      	bhi.n	1a002664 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00264a:	1ad2      	subs	r2, r2, r3
1a00264c:	6983      	ldr	r3, [r0, #24]
1a00264e:	429a      	cmp	r2, r3
1a002650:	d301      	bcc.n	1a002656 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002652:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a002654:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002656:	1d01      	adds	r1, r0, #4
1a002658:	4b09      	ldr	r3, [pc, #36]	; (1a002680 <prvInsertTimerInActiveList+0x40>)
1a00265a:	6818      	ldr	r0, [r3, #0]
1a00265c:	f7ff f980 	bl	1a001960 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002660:	2000      	movs	r0, #0
1a002662:	e7f7      	b.n	1a002654 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002664:	429a      	cmp	r2, r3
1a002666:	d201      	bcs.n	1a00266c <prvInsertTimerInActiveList+0x2c>
1a002668:	4299      	cmp	r1, r3
1a00266a:	d206      	bcs.n	1a00267a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00266c:	1d01      	adds	r1, r0, #4
1a00266e:	4b05      	ldr	r3, [pc, #20]	; (1a002684 <prvInsertTimerInActiveList+0x44>)
1a002670:	6818      	ldr	r0, [r3, #0]
1a002672:	f7ff f975 	bl	1a001960 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002676:	2000      	movs	r0, #0
1a002678:	e7ec      	b.n	1a002654 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a00267a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a00267c:	e7ea      	b.n	1a002654 <prvInsertTimerInActiveList+0x14>
1a00267e:	bf00      	nop
1a002680:	10002a48 	.word	0x10002a48
1a002684:	10002a44 	.word	0x10002a44

1a002688 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002688:	b530      	push	{r4, r5, lr}
1a00268a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a00268c:	f000 fa4a 	bl	1a002b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002690:	4b11      	ldr	r3, [pc, #68]	; (1a0026d8 <prvCheckForValidListAndQueue+0x50>)
1a002692:	681b      	ldr	r3, [r3, #0]
1a002694:	b11b      	cbz	r3, 1a00269e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002696:	f000 fa67 	bl	1a002b68 <vPortExitCritical>
}
1a00269a:	b003      	add	sp, #12
1a00269c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a00269e:	4d0f      	ldr	r5, [pc, #60]	; (1a0026dc <prvCheckForValidListAndQueue+0x54>)
1a0026a0:	4628      	mov	r0, r5
1a0026a2:	f7ff f944 	bl	1a00192e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0026a6:	4c0e      	ldr	r4, [pc, #56]	; (1a0026e0 <prvCheckForValidListAndQueue+0x58>)
1a0026a8:	4620      	mov	r0, r4
1a0026aa:	f7ff f940 	bl	1a00192e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0026ae:	4b0d      	ldr	r3, [pc, #52]	; (1a0026e4 <prvCheckForValidListAndQueue+0x5c>)
1a0026b0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0026b2:	4b0d      	ldr	r3, [pc, #52]	; (1a0026e8 <prvCheckForValidListAndQueue+0x60>)
1a0026b4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0026b6:	2300      	movs	r3, #0
1a0026b8:	9300      	str	r3, [sp, #0]
1a0026ba:	4b0c      	ldr	r3, [pc, #48]	; (1a0026ec <prvCheckForValidListAndQueue+0x64>)
1a0026bc:	4a0c      	ldr	r2, [pc, #48]	; (1a0026f0 <prvCheckForValidListAndQueue+0x68>)
1a0026be:	2110      	movs	r1, #16
1a0026c0:	200a      	movs	r0, #10
1a0026c2:	f7fe fd18 	bl	1a0010f6 <xQueueGenericCreateStatic>
1a0026c6:	4b04      	ldr	r3, [pc, #16]	; (1a0026d8 <prvCheckForValidListAndQueue+0x50>)
1a0026c8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0026ca:	2800      	cmp	r0, #0
1a0026cc:	d0e3      	beq.n	1a002696 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0026ce:	4909      	ldr	r1, [pc, #36]	; (1a0026f4 <prvCheckForValidListAndQueue+0x6c>)
1a0026d0:	f7ff f8f0 	bl	1a0018b4 <vQueueAddToRegistry>
1a0026d4:	e7df      	b.n	1a002696 <prvCheckForValidListAndQueue+0xe>
1a0026d6:	bf00      	nop
1a0026d8:	10002b68 	.word	0x10002b68
1a0026dc:	10002aec 	.word	0x10002aec
1a0026e0:	10002b00 	.word	0x10002b00
1a0026e4:	10002a44 	.word	0x10002a44
1a0026e8:	10002a48 	.word	0x10002a48
1a0026ec:	10002b18 	.word	0x10002b18
1a0026f0:	10002a4c 	.word	0x10002a4c
1a0026f4:	1a0060bc 	.word	0x1a0060bc

1a0026f8 <xTimerCreateTimerTask>:
{
1a0026f8:	b510      	push	{r4, lr}
1a0026fa:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0026fc:	f7ff ffc4 	bl	1a002688 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002700:	4b12      	ldr	r3, [pc, #72]	; (1a00274c <xTimerCreateTimerTask+0x54>)
1a002702:	681b      	ldr	r3, [r3, #0]
1a002704:	b1cb      	cbz	r3, 1a00273a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002706:	2400      	movs	r4, #0
1a002708:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a00270a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a00270c:	aa07      	add	r2, sp, #28
1a00270e:	a906      	add	r1, sp, #24
1a002710:	a805      	add	r0, sp, #20
1a002712:	f7ff f95f 	bl	1a0019d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002716:	9b05      	ldr	r3, [sp, #20]
1a002718:	9302      	str	r3, [sp, #8]
1a00271a:	9b06      	ldr	r3, [sp, #24]
1a00271c:	9301      	str	r3, [sp, #4]
1a00271e:	2304      	movs	r3, #4
1a002720:	9300      	str	r3, [sp, #0]
1a002722:	4623      	mov	r3, r4
1a002724:	9a07      	ldr	r2, [sp, #28]
1a002726:	490a      	ldr	r1, [pc, #40]	; (1a002750 <xTimerCreateTimerTask+0x58>)
1a002728:	480a      	ldr	r0, [pc, #40]	; (1a002754 <xTimerCreateTimerTask+0x5c>)
1a00272a:	f7ff fb1b 	bl	1a001d64 <xTaskCreateStatic>
1a00272e:	4b0a      	ldr	r3, [pc, #40]	; (1a002758 <xTimerCreateTimerTask+0x60>)
1a002730:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002732:	b110      	cbz	r0, 1a00273a <xTimerCreateTimerTask+0x42>
}
1a002734:	2001      	movs	r0, #1
1a002736:	b008      	add	sp, #32
1a002738:	bd10      	pop	{r4, pc}
1a00273a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00273e:	f383 8811 	msr	BASEPRI, r3
1a002742:	f3bf 8f6f 	isb	sy
1a002746:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a00274a:	e7fe      	b.n	1a00274a <xTimerCreateTimerTask+0x52>
1a00274c:	10002b68 	.word	0x10002b68
1a002750:	1a0060c4 	.word	0x1a0060c4
1a002754:	1a002a3d 	.word	0x1a002a3d
1a002758:	10002b6c 	.word	0x10002b6c

1a00275c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a00275c:	b1c0      	cbz	r0, 1a002790 <xTimerGenericCommand+0x34>
{
1a00275e:	b530      	push	{r4, r5, lr}
1a002760:	b085      	sub	sp, #20
1a002762:	4615      	mov	r5, r2
1a002764:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002766:	4a17      	ldr	r2, [pc, #92]	; (1a0027c4 <xTimerGenericCommand+0x68>)
1a002768:	6810      	ldr	r0, [r2, #0]
1a00276a:	b340      	cbz	r0, 1a0027be <xTimerGenericCommand+0x62>
1a00276c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a00276e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002770:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002772:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002774:	2905      	cmp	r1, #5
1a002776:	dc1c      	bgt.n	1a0027b2 <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002778:	f7ff fe1c 	bl	1a0023b4 <xTaskGetSchedulerState>
1a00277c:	2802      	cmp	r0, #2
1a00277e:	d010      	beq.n	1a0027a2 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002780:	2300      	movs	r3, #0
1a002782:	461a      	mov	r2, r3
1a002784:	4669      	mov	r1, sp
1a002786:	480f      	ldr	r0, [pc, #60]	; (1a0027c4 <xTimerGenericCommand+0x68>)
1a002788:	6800      	ldr	r0, [r0, #0]
1a00278a:	f7fe fd25 	bl	1a0011d8 <xQueueGenericSend>
1a00278e:	e014      	b.n	1a0027ba <xTimerGenericCommand+0x5e>
1a002790:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002794:	f383 8811 	msr	BASEPRI, r3
1a002798:	f3bf 8f6f 	isb	sy
1a00279c:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a0027a0:	e7fe      	b.n	1a0027a0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0027a2:	2300      	movs	r3, #0
1a0027a4:	9a08      	ldr	r2, [sp, #32]
1a0027a6:	4669      	mov	r1, sp
1a0027a8:	4806      	ldr	r0, [pc, #24]	; (1a0027c4 <xTimerGenericCommand+0x68>)
1a0027aa:	6800      	ldr	r0, [r0, #0]
1a0027ac:	f7fe fd14 	bl	1a0011d8 <xQueueGenericSend>
1a0027b0:	e003      	b.n	1a0027ba <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0027b2:	2300      	movs	r3, #0
1a0027b4:	4669      	mov	r1, sp
1a0027b6:	f7fe fde6 	bl	1a001386 <xQueueGenericSendFromISR>
}
1a0027ba:	b005      	add	sp, #20
1a0027bc:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a0027be:	2000      	movs	r0, #0
	return xReturn;
1a0027c0:	e7fb      	b.n	1a0027ba <xTimerGenericCommand+0x5e>
1a0027c2:	bf00      	nop
1a0027c4:	10002b68 	.word	0x10002b68

1a0027c8 <prvSwitchTimerLists>:
{
1a0027c8:	b570      	push	{r4, r5, r6, lr}
1a0027ca:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0027cc:	4b1a      	ldr	r3, [pc, #104]	; (1a002838 <prvSwitchTimerLists+0x70>)
1a0027ce:	681b      	ldr	r3, [r3, #0]
1a0027d0:	681a      	ldr	r2, [r3, #0]
1a0027d2:	b352      	cbz	r2, 1a00282a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0027d4:	68db      	ldr	r3, [r3, #12]
1a0027d6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0027d8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0027da:	1d25      	adds	r5, r4, #4
1a0027dc:	4628      	mov	r0, r5
1a0027de:	f7ff f8d9 	bl	1a001994 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0027e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0027e4:	4620      	mov	r0, r4
1a0027e6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0027e8:	69e3      	ldr	r3, [r4, #28]
1a0027ea:	2b01      	cmp	r3, #1
1a0027ec:	d1ee      	bne.n	1a0027cc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a0027ee:	69a3      	ldr	r3, [r4, #24]
1a0027f0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a0027f2:	429e      	cmp	r6, r3
1a0027f4:	d207      	bcs.n	1a002806 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a0027f6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0027f8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0027fa:	4629      	mov	r1, r5
1a0027fc:	4b0e      	ldr	r3, [pc, #56]	; (1a002838 <prvSwitchTimerLists+0x70>)
1a0027fe:	6818      	ldr	r0, [r3, #0]
1a002800:	f7ff f8ae 	bl	1a001960 <vListInsert>
1a002804:	e7e2      	b.n	1a0027cc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002806:	2100      	movs	r1, #0
1a002808:	9100      	str	r1, [sp, #0]
1a00280a:	460b      	mov	r3, r1
1a00280c:	4632      	mov	r2, r6
1a00280e:	4620      	mov	r0, r4
1a002810:	f7ff ffa4 	bl	1a00275c <xTimerGenericCommand>
				configASSERT( xResult );
1a002814:	2800      	cmp	r0, #0
1a002816:	d1d9      	bne.n	1a0027cc <prvSwitchTimerLists+0x4>
1a002818:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00281c:	f383 8811 	msr	BASEPRI, r3
1a002820:	f3bf 8f6f 	isb	sy
1a002824:	f3bf 8f4f 	dsb	sy
1a002828:	e7fe      	b.n	1a002828 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a00282a:	4a04      	ldr	r2, [pc, #16]	; (1a00283c <prvSwitchTimerLists+0x74>)
1a00282c:	6810      	ldr	r0, [r2, #0]
1a00282e:	4902      	ldr	r1, [pc, #8]	; (1a002838 <prvSwitchTimerLists+0x70>)
1a002830:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002832:	6013      	str	r3, [r2, #0]
}
1a002834:	b002      	add	sp, #8
1a002836:	bd70      	pop	{r4, r5, r6, pc}
1a002838:	10002a44 	.word	0x10002a44
1a00283c:	10002a48 	.word	0x10002a48

1a002840 <prvSampleTimeNow>:
{
1a002840:	b538      	push	{r3, r4, r5, lr}
1a002842:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002844:	f7ff fb4c 	bl	1a001ee0 <xTaskGetTickCount>
1a002848:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a00284a:	4b07      	ldr	r3, [pc, #28]	; (1a002868 <prvSampleTimeNow+0x28>)
1a00284c:	681b      	ldr	r3, [r3, #0]
1a00284e:	4283      	cmp	r3, r0
1a002850:	d805      	bhi.n	1a00285e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002852:	2300      	movs	r3, #0
1a002854:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002856:	4b04      	ldr	r3, [pc, #16]	; (1a002868 <prvSampleTimeNow+0x28>)
1a002858:	601c      	str	r4, [r3, #0]
}
1a00285a:	4620      	mov	r0, r4
1a00285c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a00285e:	f7ff ffb3 	bl	1a0027c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002862:	2301      	movs	r3, #1
1a002864:	602b      	str	r3, [r5, #0]
1a002866:	e7f6      	b.n	1a002856 <prvSampleTimeNow+0x16>
1a002868:	10002b14 	.word	0x10002b14

1a00286c <prvProcessExpiredTimer>:
{
1a00286c:	b570      	push	{r4, r5, r6, lr}
1a00286e:	b082      	sub	sp, #8
1a002870:	4605      	mov	r5, r0
1a002872:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002874:	4b14      	ldr	r3, [pc, #80]	; (1a0028c8 <prvProcessExpiredTimer+0x5c>)
1a002876:	681b      	ldr	r3, [r3, #0]
1a002878:	68db      	ldr	r3, [r3, #12]
1a00287a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00287c:	1d20      	adds	r0, r4, #4
1a00287e:	f7ff f889 	bl	1a001994 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002882:	69e3      	ldr	r3, [r4, #28]
1a002884:	2b01      	cmp	r3, #1
1a002886:	d004      	beq.n	1a002892 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002888:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00288a:	4620      	mov	r0, r4
1a00288c:	4798      	blx	r3
}
1a00288e:	b002      	add	sp, #8
1a002890:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002892:	69a1      	ldr	r1, [r4, #24]
1a002894:	462b      	mov	r3, r5
1a002896:	4632      	mov	r2, r6
1a002898:	4429      	add	r1, r5
1a00289a:	4620      	mov	r0, r4
1a00289c:	f7ff fed0 	bl	1a002640 <prvInsertTimerInActiveList>
1a0028a0:	2800      	cmp	r0, #0
1a0028a2:	d0f1      	beq.n	1a002888 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0028a4:	2100      	movs	r1, #0
1a0028a6:	9100      	str	r1, [sp, #0]
1a0028a8:	460b      	mov	r3, r1
1a0028aa:	462a      	mov	r2, r5
1a0028ac:	4620      	mov	r0, r4
1a0028ae:	f7ff ff55 	bl	1a00275c <xTimerGenericCommand>
			configASSERT( xResult );
1a0028b2:	2800      	cmp	r0, #0
1a0028b4:	d1e8      	bne.n	1a002888 <prvProcessExpiredTimer+0x1c>
1a0028b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028ba:	f383 8811 	msr	BASEPRI, r3
1a0028be:	f3bf 8f6f 	isb	sy
1a0028c2:	f3bf 8f4f 	dsb	sy
1a0028c6:	e7fe      	b.n	1a0028c6 <prvProcessExpiredTimer+0x5a>
1a0028c8:	10002a44 	.word	0x10002a44

1a0028cc <prvProcessTimerOrBlockTask>:
{
1a0028cc:	b570      	push	{r4, r5, r6, lr}
1a0028ce:	b082      	sub	sp, #8
1a0028d0:	4606      	mov	r6, r0
1a0028d2:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a0028d4:	f7ff fafc 	bl	1a001ed0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0028d8:	a801      	add	r0, sp, #4
1a0028da:	f7ff ffb1 	bl	1a002840 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0028de:	9b01      	ldr	r3, [sp, #4]
1a0028e0:	bb1b      	cbnz	r3, 1a00292a <prvProcessTimerOrBlockTask+0x5e>
1a0028e2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0028e4:	b90c      	cbnz	r4, 1a0028ea <prvProcessTimerOrBlockTask+0x1e>
1a0028e6:	42b0      	cmp	r0, r6
1a0028e8:	d218      	bcs.n	1a00291c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a0028ea:	b12c      	cbz	r4, 1a0028f8 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a0028ec:	4b11      	ldr	r3, [pc, #68]	; (1a002934 <prvProcessTimerOrBlockTask+0x68>)
1a0028ee:	681b      	ldr	r3, [r3, #0]
1a0028f0:	681c      	ldr	r4, [r3, #0]
1a0028f2:	fab4 f484 	clz	r4, r4
1a0028f6:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a0028f8:	4622      	mov	r2, r4
1a0028fa:	1b71      	subs	r1, r6, r5
1a0028fc:	4b0e      	ldr	r3, [pc, #56]	; (1a002938 <prvProcessTimerOrBlockTask+0x6c>)
1a0028fe:	6818      	ldr	r0, [r3, #0]
1a002900:	f7fe ffec 	bl	1a0018dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002904:	f7ff fb7e 	bl	1a002004 <xTaskResumeAll>
1a002908:	b988      	cbnz	r0, 1a00292e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a00290a:	4b0c      	ldr	r3, [pc, #48]	; (1a00293c <prvProcessTimerOrBlockTask+0x70>)
1a00290c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002910:	601a      	str	r2, [r3, #0]
1a002912:	f3bf 8f4f 	dsb	sy
1a002916:	f3bf 8f6f 	isb	sy
1a00291a:	e008      	b.n	1a00292e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a00291c:	f7ff fb72 	bl	1a002004 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002920:	4629      	mov	r1, r5
1a002922:	4630      	mov	r0, r6
1a002924:	f7ff ffa2 	bl	1a00286c <prvProcessExpiredTimer>
1a002928:	e001      	b.n	1a00292e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a00292a:	f7ff fb6b 	bl	1a002004 <xTaskResumeAll>
}
1a00292e:	b002      	add	sp, #8
1a002930:	bd70      	pop	{r4, r5, r6, pc}
1a002932:	bf00      	nop
1a002934:	10002a48 	.word	0x10002a48
1a002938:	10002b68 	.word	0x10002b68
1a00293c:	e000ed04 	.word	0xe000ed04

1a002940 <prvProcessReceivedCommands>:
{
1a002940:	b530      	push	{r4, r5, lr}
1a002942:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002944:	e006      	b.n	1a002954 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002946:	9907      	ldr	r1, [sp, #28]
1a002948:	9806      	ldr	r0, [sp, #24]
1a00294a:	9b05      	ldr	r3, [sp, #20]
1a00294c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00294e:	9b04      	ldr	r3, [sp, #16]
1a002950:	2b00      	cmp	r3, #0
1a002952:	da0b      	bge.n	1a00296c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002954:	2200      	movs	r2, #0
1a002956:	a904      	add	r1, sp, #16
1a002958:	4b37      	ldr	r3, [pc, #220]	; (1a002a38 <prvProcessReceivedCommands+0xf8>)
1a00295a:	6818      	ldr	r0, [r3, #0]
1a00295c:	f7fe fdd4 	bl	1a001508 <xQueueReceive>
1a002960:	2800      	cmp	r0, #0
1a002962:	d066      	beq.n	1a002a32 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002964:	9b04      	ldr	r3, [sp, #16]
1a002966:	2b00      	cmp	r3, #0
1a002968:	daf1      	bge.n	1a00294e <prvProcessReceivedCommands+0xe>
1a00296a:	e7ec      	b.n	1a002946 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a00296c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00296e:	6963      	ldr	r3, [r4, #20]
1a002970:	b113      	cbz	r3, 1a002978 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002972:	1d20      	adds	r0, r4, #4
1a002974:	f7ff f80e 	bl	1a001994 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002978:	a803      	add	r0, sp, #12
1a00297a:	f7ff ff61 	bl	1a002840 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a00297e:	9b04      	ldr	r3, [sp, #16]
1a002980:	2b09      	cmp	r3, #9
1a002982:	d8e7      	bhi.n	1a002954 <prvProcessReceivedCommands+0x14>
1a002984:	a201      	add	r2, pc, #4	; (adr r2, 1a00298c <prvProcessReceivedCommands+0x4c>)
1a002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00298a:	bf00      	nop
1a00298c:	1a0029b5 	.word	0x1a0029b5
1a002990:	1a0029b5 	.word	0x1a0029b5
1a002994:	1a0029b5 	.word	0x1a0029b5
1a002998:	1a002955 	.word	0x1a002955
1a00299c:	1a0029fd 	.word	0x1a0029fd
1a0029a0:	1a002a23 	.word	0x1a002a23
1a0029a4:	1a0029b5 	.word	0x1a0029b5
1a0029a8:	1a0029b5 	.word	0x1a0029b5
1a0029ac:	1a002955 	.word	0x1a002955
1a0029b0:	1a0029fd 	.word	0x1a0029fd
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0029b4:	9905      	ldr	r1, [sp, #20]
1a0029b6:	69a5      	ldr	r5, [r4, #24]
1a0029b8:	460b      	mov	r3, r1
1a0029ba:	4602      	mov	r2, r0
1a0029bc:	4429      	add	r1, r5
1a0029be:	4620      	mov	r0, r4
1a0029c0:	f7ff fe3e 	bl	1a002640 <prvInsertTimerInActiveList>
1a0029c4:	2800      	cmp	r0, #0
1a0029c6:	d0c5      	beq.n	1a002954 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0029c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0029ca:	4620      	mov	r0, r4
1a0029cc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0029ce:	69e3      	ldr	r3, [r4, #28]
1a0029d0:	2b01      	cmp	r3, #1
1a0029d2:	d1bf      	bne.n	1a002954 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0029d4:	69a2      	ldr	r2, [r4, #24]
1a0029d6:	2100      	movs	r1, #0
1a0029d8:	9100      	str	r1, [sp, #0]
1a0029da:	460b      	mov	r3, r1
1a0029dc:	9805      	ldr	r0, [sp, #20]
1a0029de:	4402      	add	r2, r0
1a0029e0:	4620      	mov	r0, r4
1a0029e2:	f7ff febb 	bl	1a00275c <xTimerGenericCommand>
							configASSERT( xResult );
1a0029e6:	2800      	cmp	r0, #0
1a0029e8:	d1b4      	bne.n	1a002954 <prvProcessReceivedCommands+0x14>
1a0029ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029ee:	f383 8811 	msr	BASEPRI, r3
1a0029f2:	f3bf 8f6f 	isb	sy
1a0029f6:	f3bf 8f4f 	dsb	sy
1a0029fa:	e7fe      	b.n	1a0029fa <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a0029fc:	9905      	ldr	r1, [sp, #20]
1a0029fe:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002a00:	b131      	cbz	r1, 1a002a10 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002a02:	4603      	mov	r3, r0
1a002a04:	4602      	mov	r2, r0
1a002a06:	4401      	add	r1, r0
1a002a08:	4620      	mov	r0, r4
1a002a0a:	f7ff fe19 	bl	1a002640 <prvInsertTimerInActiveList>
					break;
1a002a0e:	e7a1      	b.n	1a002954 <prvProcessReceivedCommands+0x14>
1a002a10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a14:	f383 8811 	msr	BASEPRI, r3
1a002a18:	f3bf 8f6f 	isb	sy
1a002a1c:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002a20:	e7fe      	b.n	1a002a20 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002a22:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002a26:	2b00      	cmp	r3, #0
1a002a28:	d194      	bne.n	1a002954 <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a002a2a:	4620      	mov	r0, r4
1a002a2c:	f7fe fa5c 	bl	1a000ee8 <vPortFree>
1a002a30:	e790      	b.n	1a002954 <prvProcessReceivedCommands+0x14>
}
1a002a32:	b009      	add	sp, #36	; 0x24
1a002a34:	bd30      	pop	{r4, r5, pc}
1a002a36:	bf00      	nop
1a002a38:	10002b68 	.word	0x10002b68

1a002a3c <prvTimerTask>:
{
1a002a3c:	b500      	push	{lr}
1a002a3e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002a40:	a801      	add	r0, sp, #4
1a002a42:	f7ff fded 	bl	1a002620 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002a46:	9901      	ldr	r1, [sp, #4]
1a002a48:	f7ff ff40 	bl	1a0028cc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002a4c:	f7ff ff78 	bl	1a002940 <prvProcessReceivedCommands>
1a002a50:	e7f6      	b.n	1a002a40 <prvTimerTask+0x4>
1a002a52:	Address 0x000000001a002a52 is out of bounds.


1a002a54 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002a54:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002a56:	2300      	movs	r3, #0
1a002a58:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002a5a:	4b0d      	ldr	r3, [pc, #52]	; (1a002a90 <prvTaskExitError+0x3c>)
1a002a5c:	681b      	ldr	r3, [r3, #0]
1a002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002a62:	d008      	beq.n	1a002a76 <prvTaskExitError+0x22>
1a002a64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a68:	f383 8811 	msr	BASEPRI, r3
1a002a6c:	f3bf 8f6f 	isb	sy
1a002a70:	f3bf 8f4f 	dsb	sy
1a002a74:	e7fe      	b.n	1a002a74 <prvTaskExitError+0x20>
1a002a76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a7a:	f383 8811 	msr	BASEPRI, r3
1a002a7e:	f3bf 8f6f 	isb	sy
1a002a82:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002a86:	9b01      	ldr	r3, [sp, #4]
1a002a88:	2b00      	cmp	r3, #0
1a002a8a:	d0fc      	beq.n	1a002a86 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002a8c:	b002      	add	sp, #8
1a002a8e:	4770      	bx	lr
1a002a90:	10000054 	.word	0x10000054

1a002a94 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002a94:	4808      	ldr	r0, [pc, #32]	; (1a002ab8 <prvPortStartFirstTask+0x24>)
1a002a96:	6800      	ldr	r0, [r0, #0]
1a002a98:	6800      	ldr	r0, [r0, #0]
1a002a9a:	f380 8808 	msr	MSP, r0
1a002a9e:	f04f 0000 	mov.w	r0, #0
1a002aa2:	f380 8814 	msr	CONTROL, r0
1a002aa6:	b662      	cpsie	i
1a002aa8:	b661      	cpsie	f
1a002aaa:	f3bf 8f4f 	dsb	sy
1a002aae:	f3bf 8f6f 	isb	sy
1a002ab2:	df00      	svc	0
1a002ab4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a002ab6:	0000      	.short	0x0000
1a002ab8:	e000ed08 	.word	0xe000ed08

1a002abc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002abc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002acc <vPortEnableVFP+0x10>
1a002ac0:	6801      	ldr	r1, [r0, #0]
1a002ac2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002ac6:	6001      	str	r1, [r0, #0]
1a002ac8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a002aca:	0000      	.short	0x0000
1a002acc:	e000ed88 	.word	0xe000ed88

1a002ad0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002ad4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002ad8:	f021 0101 	bic.w	r1, r1, #1
1a002adc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002ae0:	4b05      	ldr	r3, [pc, #20]	; (1a002af8 <pxPortInitialiseStack+0x28>)
1a002ae2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002ae6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002aea:	f06f 0302 	mvn.w	r3, #2
1a002aee:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002af2:	3844      	subs	r0, #68	; 0x44
1a002af4:	4770      	bx	lr
1a002af6:	bf00      	nop
1a002af8:	1a002a55 	.word	0x1a002a55
1a002afc:	ffffffff 	.word	0xffffffff

1a002b00 <SVC_Handler>:
	__asm volatile (
1a002b00:	4b07      	ldr	r3, [pc, #28]	; (1a002b20 <pxCurrentTCBConst2>)
1a002b02:	6819      	ldr	r1, [r3, #0]
1a002b04:	6808      	ldr	r0, [r1, #0]
1a002b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002b0a:	f380 8809 	msr	PSP, r0
1a002b0e:	f3bf 8f6f 	isb	sy
1a002b12:	f04f 0000 	mov.w	r0, #0
1a002b16:	f380 8811 	msr	BASEPRI, r0
1a002b1a:	4770      	bx	lr
1a002b1c:	f3af 8000 	nop.w

1a002b20 <pxCurrentTCBConst2>:
1a002b20:	1000291c 	.word	0x1000291c

1a002b24 <vPortEnterCritical>:
1a002b24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b28:	f383 8811 	msr	BASEPRI, r3
1a002b2c:	f3bf 8f6f 	isb	sy
1a002b30:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002b34:	4a0a      	ldr	r2, [pc, #40]	; (1a002b60 <vPortEnterCritical+0x3c>)
1a002b36:	6813      	ldr	r3, [r2, #0]
1a002b38:	3301      	adds	r3, #1
1a002b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002b3c:	2b01      	cmp	r3, #1
1a002b3e:	d000      	beq.n	1a002b42 <vPortEnterCritical+0x1e>
}
1a002b40:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002b42:	4b08      	ldr	r3, [pc, #32]	; (1a002b64 <vPortEnterCritical+0x40>)
1a002b44:	681b      	ldr	r3, [r3, #0]
1a002b46:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002b4a:	d0f9      	beq.n	1a002b40 <vPortEnterCritical+0x1c>
1a002b4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b50:	f383 8811 	msr	BASEPRI, r3
1a002b54:	f3bf 8f6f 	isb	sy
1a002b58:	f3bf 8f4f 	dsb	sy
1a002b5c:	e7fe      	b.n	1a002b5c <vPortEnterCritical+0x38>
1a002b5e:	bf00      	nop
1a002b60:	10000054 	.word	0x10000054
1a002b64:	e000ed04 	.word	0xe000ed04

1a002b68 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002b68:	4b09      	ldr	r3, [pc, #36]	; (1a002b90 <vPortExitCritical+0x28>)
1a002b6a:	681b      	ldr	r3, [r3, #0]
1a002b6c:	b943      	cbnz	r3, 1a002b80 <vPortExitCritical+0x18>
1a002b6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b72:	f383 8811 	msr	BASEPRI, r3
1a002b76:	f3bf 8f6f 	isb	sy
1a002b7a:	f3bf 8f4f 	dsb	sy
1a002b7e:	e7fe      	b.n	1a002b7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002b80:	3b01      	subs	r3, #1
1a002b82:	4a03      	ldr	r2, [pc, #12]	; (1a002b90 <vPortExitCritical+0x28>)
1a002b84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002b86:	b90b      	cbnz	r3, 1a002b8c <vPortExitCritical+0x24>
	__asm volatile
1a002b88:	f383 8811 	msr	BASEPRI, r3
}
1a002b8c:	4770      	bx	lr
1a002b8e:	bf00      	nop
1a002b90:	10000054 	.word	0x10000054
1a002b94:	ffffffff 	.word	0xffffffff
1a002b98:	ffffffff 	.word	0xffffffff
1a002b9c:	ffffffff 	.word	0xffffffff

1a002ba0 <PendSV_Handler>:
	__asm volatile
1a002ba0:	f3ef 8009 	mrs	r0, PSP
1a002ba4:	f3bf 8f6f 	isb	sy
1a002ba8:	4b15      	ldr	r3, [pc, #84]	; (1a002c00 <pxCurrentTCBConst>)
1a002baa:	681a      	ldr	r2, [r3, #0]
1a002bac:	f01e 0f10 	tst.w	lr, #16
1a002bb0:	bf08      	it	eq
1a002bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002bba:	6010      	str	r0, [r2, #0]
1a002bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002bc0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002bc4:	f380 8811 	msr	BASEPRI, r0
1a002bc8:	f3bf 8f4f 	dsb	sy
1a002bcc:	f3bf 8f6f 	isb	sy
1a002bd0:	f7ff fabc 	bl	1a00214c <vTaskSwitchContext>
1a002bd4:	f04f 0000 	mov.w	r0, #0
1a002bd8:	f380 8811 	msr	BASEPRI, r0
1a002bdc:	bc09      	pop	{r0, r3}
1a002bde:	6819      	ldr	r1, [r3, #0]
1a002be0:	6808      	ldr	r0, [r1, #0]
1a002be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002be6:	f01e 0f10 	tst.w	lr, #16
1a002bea:	bf08      	it	eq
1a002bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002bf0:	f380 8809 	msr	PSP, r0
1a002bf4:	f3bf 8f6f 	isb	sy
1a002bf8:	4770      	bx	lr
1a002bfa:	bf00      	nop
1a002bfc:	f3af 8000 	nop.w

1a002c00 <pxCurrentTCBConst>:
1a002c00:	1000291c 	.word	0x1000291c

1a002c04 <SysTick_Handler>:
{
1a002c04:	b508      	push	{r3, lr}
	__asm volatile
1a002c06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c0a:	f383 8811 	msr	BASEPRI, r3
1a002c0e:	f3bf 8f6f 	isb	sy
1a002c12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002c16:	f7ff f969 	bl	1a001eec <xTaskIncrementTick>
1a002c1a:	b118      	cbz	r0, 1a002c24 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002c1c:	4b03      	ldr	r3, [pc, #12]	; (1a002c2c <SysTick_Handler+0x28>)
1a002c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002c22:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002c24:	2300      	movs	r3, #0
1a002c26:	f383 8811 	msr	BASEPRI, r3
}
1a002c2a:	bd08      	pop	{r3, pc}
1a002c2c:	e000ed04 	.word	0xe000ed04

1a002c30 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002c30:	4a08      	ldr	r2, [pc, #32]	; (1a002c54 <vPortSetupTimerInterrupt+0x24>)
1a002c32:	2300      	movs	r3, #0
1a002c34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002c36:	4908      	ldr	r1, [pc, #32]	; (1a002c58 <vPortSetupTimerInterrupt+0x28>)
1a002c38:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002c3a:	4b08      	ldr	r3, [pc, #32]	; (1a002c5c <vPortSetupTimerInterrupt+0x2c>)
1a002c3c:	681b      	ldr	r3, [r3, #0]
1a002c3e:	4908      	ldr	r1, [pc, #32]	; (1a002c60 <vPortSetupTimerInterrupt+0x30>)
1a002c40:	fba1 1303 	umull	r1, r3, r1, r3
1a002c44:	099b      	lsrs	r3, r3, #6
1a002c46:	3b01      	subs	r3, #1
1a002c48:	4906      	ldr	r1, [pc, #24]	; (1a002c64 <vPortSetupTimerInterrupt+0x34>)
1a002c4a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002c4c:	2307      	movs	r3, #7
1a002c4e:	6013      	str	r3, [r2, #0]
}
1a002c50:	4770      	bx	lr
1a002c52:	bf00      	nop
1a002c54:	e000e010 	.word	0xe000e010
1a002c58:	e000e018 	.word	0xe000e018
1a002c5c:	10002c50 	.word	0x10002c50
1a002c60:	10624dd3 	.word	0x10624dd3
1a002c64:	e000e014 	.word	0xe000e014

1a002c68 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002c68:	4b3a      	ldr	r3, [pc, #232]	; (1a002d54 <xPortStartScheduler+0xec>)
1a002c6a:	681a      	ldr	r2, [r3, #0]
1a002c6c:	4b3a      	ldr	r3, [pc, #232]	; (1a002d58 <xPortStartScheduler+0xf0>)
1a002c6e:	429a      	cmp	r2, r3
1a002c70:	d029      	beq.n	1a002cc6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002c72:	4b38      	ldr	r3, [pc, #224]	; (1a002d54 <xPortStartScheduler+0xec>)
1a002c74:	681a      	ldr	r2, [r3, #0]
1a002c76:	4b39      	ldr	r3, [pc, #228]	; (1a002d5c <xPortStartScheduler+0xf4>)
1a002c78:	429a      	cmp	r2, r3
1a002c7a:	d02d      	beq.n	1a002cd8 <xPortStartScheduler+0x70>
{
1a002c7c:	b510      	push	{r4, lr}
1a002c7e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002c80:	4b37      	ldr	r3, [pc, #220]	; (1a002d60 <xPortStartScheduler+0xf8>)
1a002c82:	781a      	ldrb	r2, [r3, #0]
1a002c84:	b2d2      	uxtb	r2, r2
1a002c86:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002c88:	22ff      	movs	r2, #255	; 0xff
1a002c8a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002c8c:	781b      	ldrb	r3, [r3, #0]
1a002c8e:	b2db      	uxtb	r3, r3
1a002c90:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002c94:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002c98:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002c9c:	4a31      	ldr	r2, [pc, #196]	; (1a002d64 <xPortStartScheduler+0xfc>)
1a002c9e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002ca0:	4b31      	ldr	r3, [pc, #196]	; (1a002d68 <xPortStartScheduler+0x100>)
1a002ca2:	2207      	movs	r2, #7
1a002ca4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002ca6:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002caa:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002cae:	d01c      	beq.n	1a002cea <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a002cb0:	4a2d      	ldr	r2, [pc, #180]	; (1a002d68 <xPortStartScheduler+0x100>)
1a002cb2:	6813      	ldr	r3, [r2, #0]
1a002cb4:	3b01      	subs	r3, #1
1a002cb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002cb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002cbc:	005b      	lsls	r3, r3, #1
1a002cbe:	b2db      	uxtb	r3, r3
1a002cc0:	f88d 3003 	strb.w	r3, [sp, #3]
1a002cc4:	e7ef      	b.n	1a002ca6 <xPortStartScheduler+0x3e>
	__asm volatile
1a002cc6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cca:	f383 8811 	msr	BASEPRI, r3
1a002cce:	f3bf 8f6f 	isb	sy
1a002cd2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002cd6:	e7fe      	b.n	1a002cd6 <xPortStartScheduler+0x6e>
1a002cd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cdc:	f383 8811 	msr	BASEPRI, r3
1a002ce0:	f3bf 8f6f 	isb	sy
1a002ce4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002ce8:	e7fe      	b.n	1a002ce8 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002cea:	4b1f      	ldr	r3, [pc, #124]	; (1a002d68 <xPortStartScheduler+0x100>)
1a002cec:	681b      	ldr	r3, [r3, #0]
1a002cee:	2b04      	cmp	r3, #4
1a002cf0:	d008      	beq.n	1a002d04 <xPortStartScheduler+0x9c>
1a002cf2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cf6:	f383 8811 	msr	BASEPRI, r3
1a002cfa:	f3bf 8f6f 	isb	sy
1a002cfe:	f3bf 8f4f 	dsb	sy
1a002d02:	e7fe      	b.n	1a002d02 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002d04:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002d0a:	4a17      	ldr	r2, [pc, #92]	; (1a002d68 <xPortStartScheduler+0x100>)
1a002d0c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002d0e:	9b01      	ldr	r3, [sp, #4]
1a002d10:	b2db      	uxtb	r3, r3
1a002d12:	4a13      	ldr	r2, [pc, #76]	; (1a002d60 <xPortStartScheduler+0xf8>)
1a002d14:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002d16:	4b15      	ldr	r3, [pc, #84]	; (1a002d6c <xPortStartScheduler+0x104>)
1a002d18:	681a      	ldr	r2, [r3, #0]
1a002d1a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002d1e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002d20:	681a      	ldr	r2, [r3, #0]
1a002d22:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002d26:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002d28:	f7ff ff82 	bl	1a002c30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002d2c:	2400      	movs	r4, #0
1a002d2e:	4b10      	ldr	r3, [pc, #64]	; (1a002d70 <xPortStartScheduler+0x108>)
1a002d30:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002d32:	f7ff fec3 	bl	1a002abc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002d36:	4a0f      	ldr	r2, [pc, #60]	; (1a002d74 <xPortStartScheduler+0x10c>)
1a002d38:	6813      	ldr	r3, [r2, #0]
1a002d3a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002d3e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002d40:	f7ff fea8 	bl	1a002a94 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002d44:	f7ff fa02 	bl	1a00214c <vTaskSwitchContext>
	prvTaskExitError();
1a002d48:	f7ff fe84 	bl	1a002a54 <prvTaskExitError>
}
1a002d4c:	4620      	mov	r0, r4
1a002d4e:	b002      	add	sp, #8
1a002d50:	bd10      	pop	{r4, pc}
1a002d52:	bf00      	nop
1a002d54:	e000ed00 	.word	0xe000ed00
1a002d58:	410fc271 	.word	0x410fc271
1a002d5c:	410fc270 	.word	0x410fc270
1a002d60:	e000e400 	.word	0xe000e400
1a002d64:	10002b70 	.word	0x10002b70
1a002d68:	10002b74 	.word	0x10002b74
1a002d6c:	e000ed20 	.word	0xe000ed20
1a002d70:	10000054 	.word	0x10000054
1a002d74:	e000ef34 	.word	0xe000ef34

1a002d78 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002d78:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002d7c:	2b0f      	cmp	r3, #15
1a002d7e:	d90f      	bls.n	1a002da0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002d80:	4a10      	ldr	r2, [pc, #64]	; (1a002dc4 <vPortValidateInterruptPriority+0x4c>)
1a002d82:	5c9b      	ldrb	r3, [r3, r2]
1a002d84:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002d86:	4a10      	ldr	r2, [pc, #64]	; (1a002dc8 <vPortValidateInterruptPriority+0x50>)
1a002d88:	7812      	ldrb	r2, [r2, #0]
1a002d8a:	429a      	cmp	r2, r3
1a002d8c:	d908      	bls.n	1a002da0 <vPortValidateInterruptPriority+0x28>
1a002d8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d92:	f383 8811 	msr	BASEPRI, r3
1a002d96:	f3bf 8f6f 	isb	sy
1a002d9a:	f3bf 8f4f 	dsb	sy
1a002d9e:	e7fe      	b.n	1a002d9e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002da0:	4b0a      	ldr	r3, [pc, #40]	; (1a002dcc <vPortValidateInterruptPriority+0x54>)
1a002da2:	681b      	ldr	r3, [r3, #0]
1a002da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002da8:	4a09      	ldr	r2, [pc, #36]	; (1a002dd0 <vPortValidateInterruptPriority+0x58>)
1a002daa:	6812      	ldr	r2, [r2, #0]
1a002dac:	4293      	cmp	r3, r2
1a002dae:	d908      	bls.n	1a002dc2 <vPortValidateInterruptPriority+0x4a>
1a002db0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002db4:	f383 8811 	msr	BASEPRI, r3
1a002db8:	f3bf 8f6f 	isb	sy
1a002dbc:	f3bf 8f4f 	dsb	sy
1a002dc0:	e7fe      	b.n	1a002dc0 <vPortValidateInterruptPriority+0x48>
	}
1a002dc2:	4770      	bx	lr
1a002dc4:	e000e3f0 	.word	0xe000e3f0
1a002dc8:	10002b70 	.word	0x10002b70
1a002dcc:	e000ed0c 	.word	0xe000ed0c
1a002dd0:	10002b74 	.word	0x10002b74

1a002dd4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002dd4:	b508      	push	{r3, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002dd6:	4b05      	ldr	r3, [pc, #20]	; (1a002dec <DAC_IRQHandler+0x18>)
1a002dd8:	2201      	movs	r2, #1
1a002dda:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a002dde:	4b04      	ldr	r3, [pc, #16]	; (1a002df0 <DAC_IRQHandler+0x1c>)
1a002de0:	681b      	ldr	r3, [r3, #0]
1a002de2:	b113      	cbz	r3, 1a002dea <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002de4:	4b02      	ldr	r3, [pc, #8]	; (1a002df0 <DAC_IRQHandler+0x1c>)
1a002de6:	681b      	ldr	r3, [r3, #0]
1a002de8:	4798      	blx	r3
   }
}
1a002dea:	bd08      	pop	{r3, pc}
1a002dec:	e000e100 	.word	0xe000e100
1a002df0:	10002b78 	.word	0x10002b78

1a002df4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002df4:	2200      	movs	r2, #0
1a002df6:	2a05      	cmp	r2, #5
1a002df8:	d819      	bhi.n	1a002e2e <Board_LED_Init+0x3a>
{
1a002dfa:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002dfc:	490c      	ldr	r1, [pc, #48]	; (1a002e30 <Board_LED_Init+0x3c>)
1a002dfe:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002e02:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002e06:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002e08:	4b0a      	ldr	r3, [pc, #40]	; (1a002e34 <Board_LED_Init+0x40>)
1a002e0a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002e0e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002e12:	2001      	movs	r0, #1
1a002e14:	40a0      	lsls	r0, r4
1a002e16:	4301      	orrs	r1, r0
1a002e18:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002e1c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002e20:	2100      	movs	r1, #0
1a002e22:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002e24:	3201      	adds	r2, #1
1a002e26:	2a05      	cmp	r2, #5
1a002e28:	d9e8      	bls.n	1a002dfc <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a002e2a:	bc70      	pop	{r4, r5, r6}
1a002e2c:	4770      	bx	lr
1a002e2e:	4770      	bx	lr
1a002e30:	1a0060d8 	.word	0x1a0060d8
1a002e34:	400f4000 	.word	0x400f4000

1a002e38 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002e38:	2300      	movs	r3, #0
1a002e3a:	2b03      	cmp	r3, #3
1a002e3c:	d816      	bhi.n	1a002e6c <Board_TEC_Init+0x34>
{
1a002e3e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002e40:	490b      	ldr	r1, [pc, #44]	; (1a002e70 <Board_TEC_Init+0x38>)
1a002e42:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002e46:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002e4a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002e4c:	4c09      	ldr	r4, [pc, #36]	; (1a002e74 <Board_TEC_Init+0x3c>)
1a002e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002e52:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002e56:	2001      	movs	r0, #1
1a002e58:	40a8      	lsls	r0, r5
1a002e5a:	ea21 0100 	bic.w	r1, r1, r0
1a002e5e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002e62:	3301      	adds	r3, #1
1a002e64:	2b03      	cmp	r3, #3
1a002e66:	d9eb      	bls.n	1a002e40 <Board_TEC_Init+0x8>
   }
}
1a002e68:	bc30      	pop	{r4, r5}
1a002e6a:	4770      	bx	lr
1a002e6c:	4770      	bx	lr
1a002e6e:	bf00      	nop
1a002e70:	1a0060d0 	.word	0x1a0060d0
1a002e74:	400f4000 	.word	0x400f4000

1a002e78 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002e78:	2300      	movs	r3, #0
1a002e7a:	2b08      	cmp	r3, #8
1a002e7c:	d816      	bhi.n	1a002eac <Board_GPIO_Init+0x34>
{
1a002e7e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002e80:	490b      	ldr	r1, [pc, #44]	; (1a002eb0 <Board_GPIO_Init+0x38>)
1a002e82:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002e86:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002e8a:	784d      	ldrb	r5, [r1, #1]
1a002e8c:	4c09      	ldr	r4, [pc, #36]	; (1a002eb4 <Board_GPIO_Init+0x3c>)
1a002e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002e92:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002e96:	2001      	movs	r0, #1
1a002e98:	40a8      	lsls	r0, r5
1a002e9a:	ea21 0100 	bic.w	r1, r1, r0
1a002e9e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002ea2:	3301      	adds	r3, #1
1a002ea4:	2b08      	cmp	r3, #8
1a002ea6:	d9eb      	bls.n	1a002e80 <Board_GPIO_Init+0x8>
   }
}
1a002ea8:	bc30      	pop	{r4, r5}
1a002eaa:	4770      	bx	lr
1a002eac:	4770      	bx	lr
1a002eae:	bf00      	nop
1a002eb0:	1a0060e4 	.word	0x1a0060e4
1a002eb4:	400f4000 	.word	0x400f4000

1a002eb8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002eb8:	b510      	push	{r4, lr}
1a002eba:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002ebc:	4c08      	ldr	r4, [pc, #32]	; (1a002ee0 <Board_ADC_Init+0x28>)
1a002ebe:	4669      	mov	r1, sp
1a002ec0:	4620      	mov	r0, r4
1a002ec2:	f000 f9d9 	bl	1a003278 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002ec6:	4a07      	ldr	r2, [pc, #28]	; (1a002ee4 <Board_ADC_Init+0x2c>)
1a002ec8:	4669      	mov	r1, sp
1a002eca:	4620      	mov	r0, r4
1a002ecc:	f000 f9f4 	bl	1a0032b8 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002ed0:	2200      	movs	r2, #0
1a002ed2:	4669      	mov	r1, sp
1a002ed4:	4620      	mov	r0, r4
1a002ed6:	f000 fa08 	bl	1a0032ea <Chip_ADC_SetResolution>
}
1a002eda:	b002      	add	sp, #8
1a002edc:	bd10      	pop	{r4, pc}
1a002ede:	bf00      	nop
1a002ee0:	400e3000 	.word	0x400e3000
1a002ee4:	00061a80 	.word	0x00061a80

1a002ee8 <Board_SPI_Init>:
{
1a002ee8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a002eea:	4c0b      	ldr	r4, [pc, #44]	; (1a002f18 <Board_SPI_Init+0x30>)
1a002eec:	4620      	mov	r0, r4
1a002eee:	f000 fe57 	bl	1a003ba0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002ef2:	6863      	ldr	r3, [r4, #4]
1a002ef4:	f023 0304 	bic.w	r3, r3, #4
1a002ef8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002efa:	6823      	ldr	r3, [r4, #0]
1a002efc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002f00:	f043 0307 	orr.w	r3, r3, #7
1a002f04:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002f06:	4905      	ldr	r1, [pc, #20]	; (1a002f1c <Board_SPI_Init+0x34>)
1a002f08:	4620      	mov	r0, r4
1a002f0a:	f000 fe2a 	bl	1a003b62 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002f0e:	6863      	ldr	r3, [r4, #4]
1a002f10:	f043 0302 	orr.w	r3, r3, #2
1a002f14:	6063      	str	r3, [r4, #4]
}
1a002f16:	bd10      	pop	{r4, pc}
1a002f18:	400c5000 	.word	0x400c5000
1a002f1c:	000186a0 	.word	0x000186a0

1a002f20 <Board_I2C_Init>:
{
1a002f20:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002f22:	2000      	movs	r0, #0
1a002f24:	f000 fef8 	bl	1a003d18 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002f28:	4b04      	ldr	r3, [pc, #16]	; (1a002f3c <Board_I2C_Init+0x1c>)
1a002f2a:	f640 0208 	movw	r2, #2056	; 0x808
1a002f2e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002f32:	4903      	ldr	r1, [pc, #12]	; (1a002f40 <Board_I2C_Init+0x20>)
1a002f34:	2000      	movs	r0, #0
1a002f36:	f000 ff01 	bl	1a003d3c <Chip_I2C_SetClockRate>
}
1a002f3a:	bd08      	pop	{r3, pc}
1a002f3c:	40086000 	.word	0x40086000
1a002f40:	000f4240 	.word	0x000f4240

1a002f44 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002f44:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002f46:	4c07      	ldr	r4, [pc, #28]	; (1a002f64 <Board_Debug_Init+0x20>)
1a002f48:	4620      	mov	r0, r4
1a002f4a:	f000 f8b9 	bl	1a0030c0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002f4e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002f52:	4620      	mov	r0, r4
1a002f54:	f000 f8fe 	bl	1a003154 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002f58:	2303      	movs	r3, #3
1a002f5a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002f5c:	2301      	movs	r3, #1
1a002f5e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002f60:	bd10      	pop	{r4, pc}
1a002f62:	bf00      	nop
1a002f64:	400c1000 	.word	0x400c1000

1a002f68 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002f68:	4b03      	ldr	r3, [pc, #12]	; (1a002f78 <Board_UARTPutChar+0x10>)
1a002f6a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002f6c:	f013 0f20 	tst.w	r3, #32
1a002f70:	d0fa      	beq.n	1a002f68 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002f72:	4b01      	ldr	r3, [pc, #4]	; (1a002f78 <Board_UARTPutChar+0x10>)
1a002f74:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002f76:	4770      	bx	lr
1a002f78:	400c1000 	.word	0x400c1000

1a002f7c <Board_UARTGetChar>:
	return pUART->LSR;
1a002f7c:	4b05      	ldr	r3, [pc, #20]	; (1a002f94 <Board_UARTGetChar+0x18>)
1a002f7e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002f80:	f013 0f01 	tst.w	r3, #1
1a002f84:	d003      	beq.n	1a002f8e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002f86:	4b03      	ldr	r3, [pc, #12]	; (1a002f94 <Board_UARTGetChar+0x18>)
1a002f88:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002f8a:	b2c0      	uxtb	r0, r0
1a002f8c:	4770      	bx	lr
   }
   return EOF;
1a002f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002f92:	4770      	bx	lr
1a002f94:	400c1000 	.word	0x400c1000

1a002f98 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002f98:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002f9a:	f7ff ffd3 	bl	1a002f44 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002f9e:	4809      	ldr	r0, [pc, #36]	; (1a002fc4 <Board_Init+0x2c>)
1a002fa0:	f000 fdbf 	bl	1a003b22 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002fa4:	f7ff ff68 	bl	1a002e78 <Board_GPIO_Init>
   Board_ADC_Init();
1a002fa8:	f7ff ff86 	bl	1a002eb8 <Board_ADC_Init>
   Board_SPI_Init();
1a002fac:	f7ff ff9c 	bl	1a002ee8 <Board_SPI_Init>
   Board_I2C_Init();
1a002fb0:	f7ff ffb6 	bl	1a002f20 <Board_I2C_Init>

   Board_LED_Init();
1a002fb4:	f7ff ff1e 	bl	1a002df4 <Board_LED_Init>
   Board_TEC_Init();
1a002fb8:	f7ff ff3e 	bl	1a002e38 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002fbc:	f000 fc62 	bl	1a003884 <SystemCoreClockUpdate>
}
1a002fc0:	bd08      	pop	{r3, pc}
1a002fc2:	bf00      	nop
1a002fc4:	400f4000 	.word	0x400f4000

1a002fc8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002fc8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002fca:	b2c0      	uxtb	r0, r0
1a002fcc:	f7ff ffcc 	bl	1a002f68 <Board_UARTPutChar>
}
1a002fd0:	bd08      	pop	{r3, pc}

1a002fd2 <__stdio_getchar>:

int __stdio_getchar()
{
1a002fd2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002fd4:	f7ff ffd2 	bl	1a002f7c <Board_UARTGetChar>
}
1a002fd8:	bd08      	pop	{r3, pc}

1a002fda <__stdio_init>:

void __stdio_init()
{
1a002fda:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002fdc:	f7ff ffb2 	bl	1a002f44 <Board_Debug_Init>
1a002fe0:	bd08      	pop	{r3, pc}
1a002fe2:	Address 0x000000001a002fe2 is out of bounds.


1a002fe4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002fe4:	2300      	movs	r3, #0
1a002fe6:	2b1c      	cmp	r3, #28
1a002fe8:	d812      	bhi.n	1a003010 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002fea:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002fec:	4a09      	ldr	r2, [pc, #36]	; (1a003014 <Board_SetupMuxing+0x30>)
1a002fee:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002ff2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002ff6:	784a      	ldrb	r2, [r1, #1]
1a002ff8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002ffa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002ffe:	4906      	ldr	r1, [pc, #24]	; (1a003018 <Board_SetupMuxing+0x34>)
1a003000:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003004:	3301      	adds	r3, #1
1a003006:	2b1c      	cmp	r3, #28
1a003008:	d9f0      	bls.n	1a002fec <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00300a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00300e:	4770      	bx	lr
1a003010:	4770      	bx	lr
1a003012:	bf00      	nop
1a003014:	1a006100 	.word	0x1a006100
1a003018:	40086000 	.word	0x40086000

1a00301c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00301c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00301e:	4a17      	ldr	r2, [pc, #92]	; (1a00307c <Board_SetupClocking+0x60>)
1a003020:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003028:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00302c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003030:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003038:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00303c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003040:	2201      	movs	r2, #1
1a003042:	490f      	ldr	r1, [pc, #60]	; (1a003080 <Board_SetupClocking+0x64>)
1a003044:	2006      	movs	r0, #6
1a003046:	f000 fc27 	bl	1a003898 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00304a:	2400      	movs	r4, #0
1a00304c:	b14c      	cbz	r4, 1a003062 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00304e:	4b0b      	ldr	r3, [pc, #44]	; (1a00307c <Board_SetupClocking+0x60>)
1a003050:	685a      	ldr	r2, [r3, #4]
1a003052:	f022 020c 	bic.w	r2, r2, #12
1a003056:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003058:	685a      	ldr	r2, [r3, #4]
1a00305a:	f042 0203 	orr.w	r2, r2, #3
1a00305e:	605a      	str	r2, [r3, #4]
}
1a003060:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003062:	4808      	ldr	r0, [pc, #32]	; (1a003084 <Board_SetupClocking+0x68>)
1a003064:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003068:	2301      	movs	r3, #1
1a00306a:	788a      	ldrb	r2, [r1, #2]
1a00306c:	7849      	ldrb	r1, [r1, #1]
1a00306e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003072:	f000 fb63 	bl	1a00373c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003076:	3401      	adds	r4, #1
1a003078:	e7e8      	b.n	1a00304c <Board_SetupClocking+0x30>
1a00307a:	bf00      	nop
1a00307c:	40043000 	.word	0x40043000
1a003080:	0c28cb00 	.word	0x0c28cb00
1a003084:	1a0060fc 	.word	0x1a0060fc

1a003088 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003088:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00308a:	f7ff ffab 	bl	1a002fe4 <Board_SetupMuxing>
    Board_SetupClocking();
1a00308e:	f7ff ffc5 	bl	1a00301c <Board_SetupClocking>
}
1a003092:	bd08      	pop	{r3, pc}

1a003094 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003094:	4b09      	ldr	r3, [pc, #36]	; (1a0030bc <Chip_UART_GetIndex+0x28>)
1a003096:	4298      	cmp	r0, r3
1a003098:	d009      	beq.n	1a0030ae <Chip_UART_GetIndex+0x1a>
1a00309a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00309e:	4298      	cmp	r0, r3
1a0030a0:	d007      	beq.n	1a0030b2 <Chip_UART_GetIndex+0x1e>
1a0030a2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0030a6:	4298      	cmp	r0, r3
1a0030a8:	d005      	beq.n	1a0030b6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0030aa:	2000      	movs	r0, #0
1a0030ac:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0030ae:	2002      	movs	r0, #2
1a0030b0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0030b2:	2003      	movs	r0, #3
1a0030b4:	4770      	bx	lr
			return 1;
1a0030b6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0030b8:	4770      	bx	lr
1a0030ba:	bf00      	nop
1a0030bc:	400c1000 	.word	0x400c1000

1a0030c0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0030c0:	b530      	push	{r4, r5, lr}
1a0030c2:	b083      	sub	sp, #12
1a0030c4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0030c6:	f7ff ffe5 	bl	1a003094 <Chip_UART_GetIndex>
1a0030ca:	2301      	movs	r3, #1
1a0030cc:	461a      	mov	r2, r3
1a0030ce:	4619      	mov	r1, r3
1a0030d0:	4d0e      	ldr	r5, [pc, #56]	; (1a00310c <Chip_UART_Init+0x4c>)
1a0030d2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0030d6:	f000 fb77 	bl	1a0037c8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0030da:	2307      	movs	r3, #7
1a0030dc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0030de:	2300      	movs	r3, #0
1a0030e0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0030e2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0030e4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0030e6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0030e8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0030ea:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0030ec:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0030ee:	4b08      	ldr	r3, [pc, #32]	; (1a003110 <Chip_UART_Init+0x50>)
1a0030f0:	429c      	cmp	r4, r3
1a0030f2:	d006      	beq.n	1a003102 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0030f4:	2303      	movs	r3, #3
1a0030f6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0030f8:	2310      	movs	r3, #16
1a0030fa:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0030fc:	9b01      	ldr	r3, [sp, #4]
}
1a0030fe:	b003      	add	sp, #12
1a003100:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a003102:	2300      	movs	r3, #0
1a003104:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003106:	69a3      	ldr	r3, [r4, #24]
1a003108:	9301      	str	r3, [sp, #4]
1a00310a:	e7f3      	b.n	1a0030f4 <Chip_UART_Init+0x34>
1a00310c:	1a00617c 	.word	0x1a00617c
1a003110:	40082000 	.word	0x40082000

1a003114 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003114:	b538      	push	{r3, r4, r5, lr}
1a003116:	4605      	mov	r5, r0
1a003118:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00311a:	f7ff ffbb 	bl	1a003094 <Chip_UART_GetIndex>
1a00311e:	4b0c      	ldr	r3, [pc, #48]	; (1a003150 <Chip_UART_SetBaud+0x3c>)
1a003120:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003124:	f000 fb88 	bl	1a003838 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003128:	0123      	lsls	r3, r4, #4
1a00312a:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00312e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003130:	68ea      	ldr	r2, [r5, #12]
1a003132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003136:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003138:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00313a:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00313e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003140:	68ea      	ldr	r2, [r5, #12]
1a003142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003146:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003148:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00314c:	0900      	lsrs	r0, r0, #4
1a00314e:	bd38      	pop	{r3, r4, r5, pc}
1a003150:	1a006174 	.word	0x1a006174

1a003154 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003158:	b083      	sub	sp, #12
1a00315a:	9001      	str	r0, [sp, #4]
1a00315c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00315e:	f7ff ff99 	bl	1a003094 <Chip_UART_GetIndex>
1a003162:	4b32      	ldr	r3, [pc, #200]	; (1a00322c <Chip_UART_SetBaudFDR+0xd8>)
1a003164:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003168:	f000 fb66 	bl	1a003838 <Chip_Clock_GetRate>
1a00316c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00316e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003172:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003174:	f04f 0b00 	mov.w	fp, #0
1a003178:	46a2      	mov	sl, r4
1a00317a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a00317c:	e02a      	b.n	1a0031d4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00317e:	4242      	negs	r2, r0
				div ++;
1a003180:	1c4b      	adds	r3, r1, #1
1a003182:	e017      	b.n	1a0031b4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003184:	b30a      	cbz	r2, 1a0031ca <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003186:	4617      	mov	r7, r2
			sd = d;
1a003188:	46ab      	mov	fp, r5
			sm = m;
1a00318a:	46a2      	mov	sl, r4
			sdiv = div;
1a00318c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00318e:	3501      	adds	r5, #1
1a003190:	42ac      	cmp	r4, r5
1a003192:	d91e      	bls.n	1a0031d2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003194:	0933      	lsrs	r3, r6, #4
1a003196:	0730      	lsls	r0, r6, #28
1a003198:	fba4 0100 	umull	r0, r1, r4, r0
1a00319c:	fb04 1103 	mla	r1, r4, r3, r1
1a0031a0:	1962      	adds	r2, r4, r5
1a0031a2:	fb08 f202 	mul.w	r2, r8, r2
1a0031a6:	2300      	movs	r3, #0
1a0031a8:	f001 fc82 	bl	1a004ab0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0031ac:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0031ae:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0031b0:	2800      	cmp	r0, #0
1a0031b2:	dbe4      	blt.n	1a00317e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0031b4:	4297      	cmp	r7, r2
1a0031b6:	d3ea      	bcc.n	1a00318e <Chip_UART_SetBaudFDR+0x3a>
1a0031b8:	2b00      	cmp	r3, #0
1a0031ba:	d0e8      	beq.n	1a00318e <Chip_UART_SetBaudFDR+0x3a>
1a0031bc:	0c19      	lsrs	r1, r3, #16
1a0031be:	d1e6      	bne.n	1a00318e <Chip_UART_SetBaudFDR+0x3a>
1a0031c0:	2b02      	cmp	r3, #2
1a0031c2:	d8df      	bhi.n	1a003184 <Chip_UART_SetBaudFDR+0x30>
1a0031c4:	2d00      	cmp	r5, #0
1a0031c6:	d0dd      	beq.n	1a003184 <Chip_UART_SetBaudFDR+0x30>
1a0031c8:	e7e1      	b.n	1a00318e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0031ca:	4617      	mov	r7, r2
			sd = d;
1a0031cc:	46ab      	mov	fp, r5
			sm = m;
1a0031ce:	46a2      	mov	sl, r4
			sdiv = div;
1a0031d0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0031d2:	3401      	adds	r4, #1
1a0031d4:	b11f      	cbz	r7, 1a0031de <Chip_UART_SetBaudFDR+0x8a>
1a0031d6:	2c0f      	cmp	r4, #15
1a0031d8:	d801      	bhi.n	1a0031de <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0031da:	2500      	movs	r5, #0
1a0031dc:	e7d8      	b.n	1a003190 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0031de:	f1b9 0f00 	cmp.w	r9, #0
1a0031e2:	d01e      	beq.n	1a003222 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0031e4:	9a01      	ldr	r2, [sp, #4]
1a0031e6:	4611      	mov	r1, r2
1a0031e8:	68d3      	ldr	r3, [r2, #12]
1a0031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0031ee:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0031f0:	fa5f f389 	uxtb.w	r3, r9
1a0031f4:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0031f6:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0031fa:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0031fc:	68d3      	ldr	r3, [r2, #12]
1a0031fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003202:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003204:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003208:	b2db      	uxtb	r3, r3
1a00320a:	f00b 020f 	and.w	r2, fp, #15
1a00320e:	4313      	orrs	r3, r2
1a003210:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003212:	0933      	lsrs	r3, r6, #4
1a003214:	fb0a f303 	mul.w	r3, sl, r3
1a003218:	44da      	add	sl, fp
1a00321a:	fb09 f90a 	mul.w	r9, r9, sl
1a00321e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a003222:	4648      	mov	r0, r9
1a003224:	b003      	add	sp, #12
1a003226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00322a:	bf00      	nop
1a00322c:	1a006174 	.word	0x1a006174

1a003230 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003230:	4b03      	ldr	r3, [pc, #12]	; (1a003240 <Chip_ADC_GetClockIndex+0x10>)
1a003232:	4298      	cmp	r0, r3
1a003234:	d001      	beq.n	1a00323a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003236:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003238:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00323a:	2004      	movs	r0, #4
1a00323c:	4770      	bx	lr
1a00323e:	bf00      	nop
1a003240:	400e4000 	.word	0x400e4000

1a003244 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a003244:	b570      	push	{r4, r5, r6, lr}
1a003246:	460d      	mov	r5, r1
1a003248:	4614      	mov	r4, r2
1a00324a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00324c:	f7ff fff0 	bl	1a003230 <Chip_ADC_GetClockIndex>
1a003250:	f000 faf2 	bl	1a003838 <Chip_Clock_GetRate>
	if (burstMode) {
1a003254:	b155      	cbz	r5, 1a00326c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a003256:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00325a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00325e:	0064      	lsls	r4, r4, #1
1a003260:	fbb0 f0f4 	udiv	r0, r0, r4
1a003264:	b2c0      	uxtb	r0, r0
1a003266:	3801      	subs	r0, #1
	return div;
}
1a003268:	b2c0      	uxtb	r0, r0
1a00326a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a00326c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003270:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a003274:	e7f1      	b.n	1a00325a <getClkDiv+0x16>
1a003276:	Address 0x000000001a003276 is out of bounds.


1a003278 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003278:	b538      	push	{r3, r4, r5, lr}
1a00327a:	4605      	mov	r5, r0
1a00327c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00327e:	f7ff ffd7 	bl	1a003230 <Chip_ADC_GetClockIndex>
1a003282:	2301      	movs	r3, #1
1a003284:	461a      	mov	r2, r3
1a003286:	4619      	mov	r1, r3
1a003288:	f000 fa9e 	bl	1a0037c8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00328c:	2100      	movs	r1, #0
1a00328e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003290:	4a08      	ldr	r2, [pc, #32]	; (1a0032b4 <Chip_ADC_Init+0x3c>)
1a003292:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003294:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003296:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003298:	230b      	movs	r3, #11
1a00329a:	4628      	mov	r0, r5
1a00329c:	f7ff ffd2 	bl	1a003244 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0032a0:	0200      	lsls	r0, r0, #8
1a0032a2:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0032a6:	7920      	ldrb	r0, [r4, #4]
1a0032a8:	0440      	lsls	r0, r0, #17
1a0032aa:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0032ae:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0032b0:	6028      	str	r0, [r5, #0]
}
1a0032b2:	bd38      	pop	{r3, r4, r5, pc}
1a0032b4:	00061a80 	.word	0x00061a80

1a0032b8 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0032b8:	b570      	push	{r4, r5, r6, lr}
1a0032ba:	4605      	mov	r5, r0
1a0032bc:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0032be:	6804      	ldr	r4, [r0, #0]
1a0032c0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0032c4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0032c8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0032ca:	790b      	ldrb	r3, [r1, #4]
1a0032cc:	f1c3 030b 	rsb	r3, r3, #11
1a0032d0:	b2db      	uxtb	r3, r3
1a0032d2:	7949      	ldrb	r1, [r1, #5]
1a0032d4:	f7ff ffb6 	bl	1a003244 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0032d8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0032dc:	7933      	ldrb	r3, [r6, #4]
1a0032de:	045b      	lsls	r3, r3, #17
1a0032e0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0032e4:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0032e6:	602b      	str	r3, [r5, #0]
}
1a0032e8:	bd70      	pop	{r4, r5, r6, pc}

1a0032ea <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0032ea:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0032ec:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0032ee:	680a      	ldr	r2, [r1, #0]
1a0032f0:	f7ff ffe2 	bl	1a0032b8 <Chip_ADC_SetSampleRate>
}
1a0032f4:	bd08      	pop	{r3, pc}
1a0032f6:	Address 0x000000001a0032f6 is out of bounds.


1a0032f8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0032f8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0032fa:	680b      	ldr	r3, [r1, #0]
1a0032fc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003300:	d002      	beq.n	1a003308 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003306:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003308:	4607      	mov	r7, r0
1a00330a:	2501      	movs	r5, #1
1a00330c:	e03a      	b.n	1a003384 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00330e:	694b      	ldr	r3, [r1, #20]
1a003310:	fb03 f302 	mul.w	r3, r3, r2
1a003314:	fbb3 f3f5 	udiv	r3, r3, r5
1a003318:	e01c      	b.n	1a003354 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00331a:	461c      	mov	r4, r3
	if (val < 0)
1a00331c:	ebb0 0c04 	subs.w	ip, r0, r4
1a003320:	d427      	bmi.n	1a003372 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a003322:	4567      	cmp	r7, ip
1a003324:	d906      	bls.n	1a003334 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a003326:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003328:	1c77      	adds	r7, r6, #1
1a00332a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00332c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00332e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a003330:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a003332:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a003334:	3201      	adds	r2, #1
1a003336:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00333a:	dc1d      	bgt.n	1a003378 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a00333c:	680c      	ldr	r4, [r1, #0]
1a00333e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a003342:	d0e4      	beq.n	1a00330e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003344:	1c73      	adds	r3, r6, #1
1a003346:	fa02 fc03 	lsl.w	ip, r2, r3
1a00334a:	694b      	ldr	r3, [r1, #20]
1a00334c:	fb03 f30c 	mul.w	r3, r3, ip
1a003350:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003354:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a003390 <pll_calc_divs+0x98>
1a003358:	4563      	cmp	r3, ip
1a00335a:	d9eb      	bls.n	1a003334 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00335c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a003394 <pll_calc_divs+0x9c>
1a003360:	4563      	cmp	r3, ip
1a003362:	d809      	bhi.n	1a003378 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a003364:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003368:	d1d7      	bne.n	1a00331a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00336a:	1c74      	adds	r4, r6, #1
1a00336c:	fa23 f404 	lsr.w	r4, r3, r4
1a003370:	e7d4      	b.n	1a00331c <pll_calc_divs+0x24>
		return -val;
1a003372:	f1cc 0c00 	rsb	ip, ip, #0
1a003376:	e7d4      	b.n	1a003322 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a003378:	3601      	adds	r6, #1
1a00337a:	2e03      	cmp	r6, #3
1a00337c:	dc01      	bgt.n	1a003382 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00337e:	2201      	movs	r2, #1
1a003380:	e7d9      	b.n	1a003336 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a003382:	3501      	adds	r5, #1
1a003384:	2d04      	cmp	r5, #4
1a003386:	dc01      	bgt.n	1a00338c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a003388:	2600      	movs	r6, #0
1a00338a:	e7f6      	b.n	1a00337a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a00338c:	bcf0      	pop	{r4, r5, r6, r7}
1a00338e:	4770      	bx	lr
1a003390:	094c5eff 	.word	0x094c5eff
1a003394:	1312d000 	.word	0x1312d000

1a003398 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003398:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00339a:	b099      	sub	sp, #100	; 0x64
1a00339c:	4605      	mov	r5, r0
1a00339e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0033a0:	225c      	movs	r2, #92	; 0x5c
1a0033a2:	2100      	movs	r1, #0
1a0033a4:	a801      	add	r0, sp, #4
1a0033a6:	f001 fef0 	bl	1a00518a <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0033aa:	2380      	movs	r3, #128	; 0x80
1a0033ac:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0033ae:	6963      	ldr	r3, [r4, #20]
1a0033b0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0033b2:	7923      	ldrb	r3, [r4, #4]
1a0033b4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0033b8:	4669      	mov	r1, sp
1a0033ba:	4628      	mov	r0, r5
1a0033bc:	f7ff ff9c 	bl	1a0032f8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0033c0:	9b06      	ldr	r3, [sp, #24]
1a0033c2:	42ab      	cmp	r3, r5
1a0033c4:	d027      	beq.n	1a003416 <pll_get_frac+0x7e>
	if (val < 0)
1a0033c6:	1aeb      	subs	r3, r5, r3
1a0033c8:	d42e      	bmi.n	1a003428 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0033ca:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0033cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0033ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0033d2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0033d4:	6963      	ldr	r3, [r4, #20]
1a0033d6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0033d8:	7923      	ldrb	r3, [r4, #4]
1a0033da:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0033de:	a910      	add	r1, sp, #64	; 0x40
1a0033e0:	4628      	mov	r0, r5
1a0033e2:	f7ff ff89 	bl	1a0032f8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0033e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0033e8:	42ab      	cmp	r3, r5
1a0033ea:	d01f      	beq.n	1a00342c <pll_get_frac+0x94>
	if (val < 0)
1a0033ec:	1aeb      	subs	r3, r5, r3
1a0033ee:	d425      	bmi.n	1a00343c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0033f0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0033f2:	4b2b      	ldr	r3, [pc, #172]	; (1a0034a0 <pll_get_frac+0x108>)
1a0033f4:	429d      	cmp	r5, r3
1a0033f6:	d923      	bls.n	1a003440 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0033f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0033fa:	1aed      	subs	r5, r5, r3
1a0033fc:	d433      	bmi.n	1a003466 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0033fe:	42ae      	cmp	r6, r5
1a003400:	dc3b      	bgt.n	1a00347a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003402:	42be      	cmp	r6, r7
1a003404:	dc31      	bgt.n	1a00346a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003406:	466d      	mov	r5, sp
1a003408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00340a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00340c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003414:	e006      	b.n	1a003424 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003416:	466d      	mov	r5, sp
1a003418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00341a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00341c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003424:	b019      	add	sp, #100	; 0x64
1a003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003428:	425b      	negs	r3, r3
1a00342a:	e7ce      	b.n	1a0033ca <pll_get_frac+0x32>
		*ppll = pll[2];
1a00342c:	ad10      	add	r5, sp, #64	; 0x40
1a00342e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003432:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00343a:	e7f3      	b.n	1a003424 <pll_get_frac+0x8c>
		return -val;
1a00343c:	425b      	negs	r3, r3
1a00343e:	e7d7      	b.n	1a0033f0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003440:	2340      	movs	r3, #64	; 0x40
1a003442:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003444:	6963      	ldr	r3, [r4, #20]
1a003446:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003448:	a908      	add	r1, sp, #32
1a00344a:	4628      	mov	r0, r5
1a00344c:	f7ff ff54 	bl	1a0032f8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003452:	42ab      	cmp	r3, r5
1a003454:	d1d0      	bne.n	1a0033f8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003456:	ad08      	add	r5, sp, #32
1a003458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00345a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00345c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003464:	e7de      	b.n	1a003424 <pll_get_frac+0x8c>
		return -val;
1a003466:	426d      	negs	r5, r5
1a003468:	e7c9      	b.n	1a0033fe <pll_get_frac+0x66>
			*ppll = pll[2];
1a00346a:	ad10      	add	r5, sp, #64	; 0x40
1a00346c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00346e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003470:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003478:	e7d4      	b.n	1a003424 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00347a:	42af      	cmp	r7, r5
1a00347c:	db07      	blt.n	1a00348e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00347e:	ad08      	add	r5, sp, #32
1a003480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003484:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00348c:	e7ca      	b.n	1a003424 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00348e:	ad10      	add	r5, sp, #64	; 0x40
1a003490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003494:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00349c:	e7c2      	b.n	1a003424 <pll_get_frac+0x8c>
1a00349e:	bf00      	nop
1a0034a0:	068e7780 	.word	0x068e7780

1a0034a4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0034a4:	b430      	push	{r4, r5}
1a0034a6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0034a8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0034aa:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0034ac:	e000      	b.n	1a0034b0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0034ae:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0034b0:	281c      	cmp	r0, #28
1a0034b2:	d118      	bne.n	1a0034e6 <Chip_Clock_FindBaseClock+0x42>
1a0034b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0034b8:	0051      	lsls	r1, r2, #1
1a0034ba:	4a0c      	ldr	r2, [pc, #48]	; (1a0034ec <Chip_Clock_FindBaseClock+0x48>)
1a0034bc:	440a      	add	r2, r1
1a0034be:	7914      	ldrb	r4, [r2, #4]
1a0034c0:	4284      	cmp	r4, r0
1a0034c2:	d010      	beq.n	1a0034e6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0034c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0034c8:	004a      	lsls	r2, r1, #1
1a0034ca:	4908      	ldr	r1, [pc, #32]	; (1a0034ec <Chip_Clock_FindBaseClock+0x48>)
1a0034cc:	5a8a      	ldrh	r2, [r1, r2]
1a0034ce:	42aa      	cmp	r2, r5
1a0034d0:	d8ed      	bhi.n	1a0034ae <Chip_Clock_FindBaseClock+0xa>
1a0034d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0034d6:	0051      	lsls	r1, r2, #1
1a0034d8:	4a04      	ldr	r2, [pc, #16]	; (1a0034ec <Chip_Clock_FindBaseClock+0x48>)
1a0034da:	440a      	add	r2, r1
1a0034dc:	8852      	ldrh	r2, [r2, #2]
1a0034de:	42aa      	cmp	r2, r5
1a0034e0:	d3e5      	bcc.n	1a0034ae <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0034e2:	4620      	mov	r0, r4
1a0034e4:	e7e4      	b.n	1a0034b0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0034e6:	bc30      	pop	{r4, r5}
1a0034e8:	4770      	bx	lr
1a0034ea:	bf00      	nop
1a0034ec:	1a006190 	.word	0x1a006190

1a0034f0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0034f0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0034f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0034f6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0034f8:	4a0d      	ldr	r2, [pc, #52]	; (1a003530 <Chip_Clock_EnableCrystal+0x40>)
1a0034fa:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0034fc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003500:	6992      	ldr	r2, [r2, #24]
1a003502:	428a      	cmp	r2, r1
1a003504:	d001      	beq.n	1a00350a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003506:	4a0a      	ldr	r2, [pc, #40]	; (1a003530 <Chip_Clock_EnableCrystal+0x40>)
1a003508:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00350a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00350e:	4a09      	ldr	r2, [pc, #36]	; (1a003534 <Chip_Clock_EnableCrystal+0x44>)
1a003510:	6811      	ldr	r1, [r2, #0]
1a003512:	4a09      	ldr	r2, [pc, #36]	; (1a003538 <Chip_Clock_EnableCrystal+0x48>)
1a003514:	4291      	cmp	r1, r2
1a003516:	d901      	bls.n	1a00351c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003518:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00351c:	4a04      	ldr	r2, [pc, #16]	; (1a003530 <Chip_Clock_EnableCrystal+0x40>)
1a00351e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003520:	9b01      	ldr	r3, [sp, #4]
1a003522:	1e5a      	subs	r2, r3, #1
1a003524:	9201      	str	r2, [sp, #4]
1a003526:	2b00      	cmp	r3, #0
1a003528:	d1fa      	bne.n	1a003520 <Chip_Clock_EnableCrystal+0x30>
}
1a00352a:	b002      	add	sp, #8
1a00352c:	4770      	bx	lr
1a00352e:	bf00      	nop
1a003530:	40050000 	.word	0x40050000
1a003534:	1a0060f8 	.word	0x1a0060f8
1a003538:	01312cff 	.word	0x01312cff

1a00353c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00353c:	3012      	adds	r0, #18
1a00353e:	4b05      	ldr	r3, [pc, #20]	; (1a003554 <Chip_Clock_GetDividerSource+0x18>)
1a003540:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003544:	f010 0f01 	tst.w	r0, #1
1a003548:	d102      	bne.n	1a003550 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00354a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00354e:	4770      	bx	lr
		return CLKINPUT_PD;
1a003550:	2011      	movs	r0, #17
}
1a003552:	4770      	bx	lr
1a003554:	40050000 	.word	0x40050000

1a003558 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003558:	f100 0212 	add.w	r2, r0, #18
1a00355c:	4b03      	ldr	r3, [pc, #12]	; (1a00356c <Chip_Clock_GetDividerDivisor+0x14>)
1a00355e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003562:	4b03      	ldr	r3, [pc, #12]	; (1a003570 <Chip_Clock_GetDividerDivisor+0x18>)
1a003564:	5c18      	ldrb	r0, [r3, r0]
}
1a003566:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00356a:	4770      	bx	lr
1a00356c:	40050000 	.word	0x40050000
1a003570:	1a006188 	.word	0x1a006188

1a003574 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003574:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003576:	2810      	cmp	r0, #16
1a003578:	d80a      	bhi.n	1a003590 <Chip_Clock_GetClockInputHz+0x1c>
1a00357a:	e8df f000 	tbb	[pc, r0]
1a00357e:	0b44      	.short	0x0b44
1a003580:	0921180d 	.word	0x0921180d
1a003584:	2d2a2724 	.word	0x2d2a2724
1a003588:	34300909 	.word	0x34300909
1a00358c:	3c38      	.short	0x3c38
1a00358e:	40          	.byte	0x40
1a00358f:	00          	.byte	0x00
	uint32_t rate = 0;
1a003590:	2000      	movs	r0, #0
1a003592:	e03a      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003594:	481e      	ldr	r0, [pc, #120]	; (1a003610 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003596:	e038      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003598:	4b1e      	ldr	r3, [pc, #120]	; (1a003614 <Chip_Clock_GetClockInputHz+0xa0>)
1a00359a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00359e:	f003 0307 	and.w	r3, r3, #7
1a0035a2:	2b04      	cmp	r3, #4
1a0035a4:	d001      	beq.n	1a0035aa <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0035a6:	481c      	ldr	r0, [pc, #112]	; (1a003618 <Chip_Clock_GetClockInputHz+0xa4>)
1a0035a8:	e02f      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a0035aa:	2000      	movs	r0, #0
1a0035ac:	e02d      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0035ae:	4b19      	ldr	r3, [pc, #100]	; (1a003614 <Chip_Clock_GetClockInputHz+0xa0>)
1a0035b0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0035b4:	f003 0307 	and.w	r3, r3, #7
1a0035b8:	2b04      	cmp	r3, #4
1a0035ba:	d027      	beq.n	1a00360c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0035bc:	4816      	ldr	r0, [pc, #88]	; (1a003618 <Chip_Clock_GetClockInputHz+0xa4>)
1a0035be:	e024      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0035c0:	4b16      	ldr	r3, [pc, #88]	; (1a00361c <Chip_Clock_GetClockInputHz+0xa8>)
1a0035c2:	6818      	ldr	r0, [r3, #0]
		break;
1a0035c4:	e021      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0035c6:	4b16      	ldr	r3, [pc, #88]	; (1a003620 <Chip_Clock_GetClockInputHz+0xac>)
1a0035c8:	6818      	ldr	r0, [r3, #0]
		break;
1a0035ca:	e01e      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0035cc:	4b15      	ldr	r3, [pc, #84]	; (1a003624 <Chip_Clock_GetClockInputHz+0xb0>)
1a0035ce:	6818      	ldr	r0, [r3, #0]
		break;
1a0035d0:	e01b      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0035d2:	4b14      	ldr	r3, [pc, #80]	; (1a003624 <Chip_Clock_GetClockInputHz+0xb0>)
1a0035d4:	6858      	ldr	r0, [r3, #4]
		break;
1a0035d6:	e018      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0035d8:	f000 f868 	bl	1a0036ac <Chip_Clock_GetMainPLLHz>
		break;
1a0035dc:	e015      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0035de:	2100      	movs	r1, #0
1a0035e0:	f000 f89a 	bl	1a003718 <Chip_Clock_GetDivRate>
		break;
1a0035e4:	e011      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0035e6:	2101      	movs	r1, #1
1a0035e8:	f000 f896 	bl	1a003718 <Chip_Clock_GetDivRate>
		break;
1a0035ec:	e00d      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0035ee:	2102      	movs	r1, #2
1a0035f0:	f000 f892 	bl	1a003718 <Chip_Clock_GetDivRate>
		break;
1a0035f4:	e009      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0035f6:	2103      	movs	r1, #3
1a0035f8:	f000 f88e 	bl	1a003718 <Chip_Clock_GetDivRate>
		break;
1a0035fc:	e005      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0035fe:	2104      	movs	r1, #4
1a003600:	f000 f88a 	bl	1a003718 <Chip_Clock_GetDivRate>
		break;
1a003604:	e001      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a003606:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00360a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a00360c:	4806      	ldr	r0, [pc, #24]	; (1a003628 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00360e:	e7fc      	b.n	1a00360a <Chip_Clock_GetClockInputHz+0x96>
1a003610:	00b71b00 	.word	0x00b71b00
1a003614:	40043000 	.word	0x40043000
1a003618:	017d7840 	.word	0x017d7840
1a00361c:	1a0060cc 	.word	0x1a0060cc
1a003620:	1a0060f8 	.word	0x1a0060f8
1a003624:	10002b7c 	.word	0x10002b7c
1a003628:	02faf080 	.word	0x02faf080

1a00362c <Chip_Clock_CalcMainPLLValue>:
{
1a00362c:	b538      	push	{r3, r4, r5, lr}
1a00362e:	4605      	mov	r5, r0
1a003630:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003632:	7908      	ldrb	r0, [r1, #4]
1a003634:	f7ff ff9e 	bl	1a003574 <Chip_Clock_GetClockInputHz>
1a003638:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00363a:	4b19      	ldr	r3, [pc, #100]	; (1a0036a0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00363c:	442b      	add	r3, r5
1a00363e:	4a19      	ldr	r2, [pc, #100]	; (1a0036a4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003640:	4293      	cmp	r3, r2
1a003642:	d821      	bhi.n	1a003688 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003644:	b318      	cbz	r0, 1a00368e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003646:	2380      	movs	r3, #128	; 0x80
1a003648:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00364a:	2300      	movs	r3, #0
1a00364c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00364e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003650:	fbb5 f3f0 	udiv	r3, r5, r0
1a003654:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003656:	4a14      	ldr	r2, [pc, #80]	; (1a0036a8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003658:	4295      	cmp	r5, r2
1a00365a:	d903      	bls.n	1a003664 <Chip_Clock_CalcMainPLLValue+0x38>
1a00365c:	fb03 f000 	mul.w	r0, r3, r0
1a003660:	42a8      	cmp	r0, r5
1a003662:	d007      	beq.n	1a003674 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003664:	4621      	mov	r1, r4
1a003666:	4628      	mov	r0, r5
1a003668:	f7ff fe96 	bl	1a003398 <pll_get_frac>
		if (!ppll->nsel) {
1a00366c:	68a3      	ldr	r3, [r4, #8]
1a00366e:	b18b      	cbz	r3, 1a003694 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003670:	3b01      	subs	r3, #1
1a003672:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003674:	6923      	ldr	r3, [r4, #16]
1a003676:	b183      	cbz	r3, 1a00369a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003678:	68e2      	ldr	r2, [r4, #12]
1a00367a:	b10a      	cbz	r2, 1a003680 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00367c:	3a01      	subs	r2, #1
1a00367e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003680:	3b01      	subs	r3, #1
1a003682:	6123      	str	r3, [r4, #16]
	return 0;
1a003684:	2000      	movs	r0, #0
}
1a003686:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00368c:	e7fb      	b.n	1a003686 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00368e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003692:	e7f8      	b.n	1a003686 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003698:	e7f5      	b.n	1a003686 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00369a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00369e:	e7f2      	b.n	1a003686 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0036a0:	ff6b3a10 	.word	0xff6b3a10
1a0036a4:	0b940510 	.word	0x0b940510
1a0036a8:	094c5eff 	.word	0x094c5eff

1a0036ac <Chip_Clock_GetMainPLLHz>:
{
1a0036ac:	b530      	push	{r4, r5, lr}
1a0036ae:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0036b0:	4d17      	ldr	r5, [pc, #92]	; (1a003710 <Chip_Clock_GetMainPLLHz+0x64>)
1a0036b2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0036b4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0036b8:	f7ff ff5c 	bl	1a003574 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0036bc:	4b15      	ldr	r3, [pc, #84]	; (1a003714 <Chip_Clock_GetMainPLLHz+0x68>)
1a0036be:	681b      	ldr	r3, [r3, #0]
1a0036c0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0036c2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0036c4:	f013 0f01 	tst.w	r3, #1
1a0036c8:	d020      	beq.n	1a00370c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0036ca:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0036ce:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0036d2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0036d6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0036da:	3301      	adds	r3, #1
	n = nsel + 1;
1a0036dc:	3201      	adds	r2, #1
	p = ptab[psel];
1a0036de:	f10d 0c08 	add.w	ip, sp, #8
1a0036e2:	4461      	add	r1, ip
1a0036e4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0036e8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0036ec:	d108      	bne.n	1a003700 <Chip_Clock_GetMainPLLHz+0x54>
1a0036ee:	b93d      	cbnz	r5, 1a003700 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0036f0:	0049      	lsls	r1, r1, #1
1a0036f2:	fbb3 f3f1 	udiv	r3, r3, r1
1a0036f6:	fbb0 f0f2 	udiv	r0, r0, r2
1a0036fa:	fb00 f003 	mul.w	r0, r0, r3
1a0036fe:	e003      	b.n	1a003708 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a003700:	fbb0 f0f2 	udiv	r0, r0, r2
1a003704:	fb03 f000 	mul.w	r0, r3, r0
}
1a003708:	b003      	add	sp, #12
1a00370a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a00370c:	2000      	movs	r0, #0
1a00370e:	e7fb      	b.n	1a003708 <Chip_Clock_GetMainPLLHz+0x5c>
1a003710:	40050000 	.word	0x40050000
1a003714:	1a006184 	.word	0x1a006184

1a003718 <Chip_Clock_GetDivRate>:
{
1a003718:	b538      	push	{r3, r4, r5, lr}
1a00371a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00371c:	4608      	mov	r0, r1
1a00371e:	f7ff ff0d 	bl	1a00353c <Chip_Clock_GetDividerSource>
1a003722:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003724:	4620      	mov	r0, r4
1a003726:	f7ff ff17 	bl	1a003558 <Chip_Clock_GetDividerDivisor>
1a00372a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00372c:	4628      	mov	r0, r5
1a00372e:	f7ff ff21 	bl	1a003574 <Chip_Clock_GetClockInputHz>
1a003732:	3401      	adds	r4, #1
}
1a003734:	fbb0 f0f4 	udiv	r0, r0, r4
1a003738:	bd38      	pop	{r3, r4, r5, pc}
1a00373a:	Address 0x000000001a00373a is out of bounds.


1a00373c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00373c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00373e:	f100 0416 	add.w	r4, r0, #22
1a003742:	00a4      	lsls	r4, r4, #2
1a003744:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003748:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00374c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00374e:	281b      	cmp	r0, #27
1a003750:	d813      	bhi.n	1a00377a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003752:	2911      	cmp	r1, #17
1a003754:	d01a      	beq.n	1a00378c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003756:	4d0e      	ldr	r5, [pc, #56]	; (1a003790 <Chip_Clock_SetBaseClock+0x54>)
1a003758:	4025      	ands	r5, r4

			if (autoblocken) {
1a00375a:	b10a      	cbz	r2, 1a003760 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00375c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003760:	b10b      	cbz	r3, 1a003766 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003762:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003766:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00376a:	3016      	adds	r0, #22
1a00376c:	0080      	lsls	r0, r0, #2
1a00376e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003772:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003776:	6045      	str	r5, [r0, #4]
1a003778:	e008      	b.n	1a00378c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00377a:	f044 0401 	orr.w	r4, r4, #1
1a00377e:	3016      	adds	r0, #22
1a003780:	0080      	lsls	r0, r0, #2
1a003782:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003786:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00378a:	6044      	str	r4, [r0, #4]
	}
}
1a00378c:	bc30      	pop	{r4, r5}
1a00378e:	4770      	bx	lr
1a003790:	e0fff7fe 	.word	0xe0fff7fe

1a003794 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003794:	281b      	cmp	r0, #27
1a003796:	d80c      	bhi.n	1a0037b2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003798:	3016      	adds	r0, #22
1a00379a:	0080      	lsls	r0, r0, #2
1a00379c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0037a0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0037a4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0037a6:	f010 0f01 	tst.w	r0, #1
1a0037aa:	d104      	bne.n	1a0037b6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0037ac:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0037b0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0037b2:	2011      	movs	r0, #17
1a0037b4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0037b6:	2011      	movs	r0, #17
}
1a0037b8:	4770      	bx	lr

1a0037ba <Chip_Clock_GetBaseClocktHz>:
{
1a0037ba:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0037bc:	f7ff ffea 	bl	1a003794 <Chip_Clock_GetBaseClock>
1a0037c0:	f7ff fed8 	bl	1a003574 <Chip_Clock_GetClockInputHz>
}
1a0037c4:	bd08      	pop	{r3, pc}
1a0037c6:	Address 0x000000001a0037c6 is out of bounds.


1a0037c8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0037c8:	b971      	cbnz	r1, 1a0037e8 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0037ca:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0037cc:	b10a      	cbz	r2, 1a0037d2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0037ce:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0037d2:	2b02      	cmp	r3, #2
1a0037d4:	d00a      	beq.n	1a0037ec <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0037d6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0037da:	d30a      	bcc.n	1a0037f2 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0037dc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0037e0:	4b06      	ldr	r3, [pc, #24]	; (1a0037fc <Chip_Clock_EnableOpts+0x34>)
1a0037e2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0037e6:	4770      	bx	lr
		reg |= (1 << 1);
1a0037e8:	2103      	movs	r1, #3
1a0037ea:	e7ef      	b.n	1a0037cc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0037ec:	f041 0120 	orr.w	r1, r1, #32
1a0037f0:	e7f1      	b.n	1a0037d6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0037f2:	3020      	adds	r0, #32
1a0037f4:	4b02      	ldr	r3, [pc, #8]	; (1a003800 <Chip_Clock_EnableOpts+0x38>)
1a0037f6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0037fa:	4770      	bx	lr
1a0037fc:	40052000 	.word	0x40052000
1a003800:	40051000 	.word	0x40051000

1a003804 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003804:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003808:	d309      	bcc.n	1a00381e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00380a:	4a09      	ldr	r2, [pc, #36]	; (1a003830 <Chip_Clock_Enable+0x2c>)
1a00380c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003810:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003814:	f043 0301 	orr.w	r3, r3, #1
1a003818:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00381c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00381e:	4a05      	ldr	r2, [pc, #20]	; (1a003834 <Chip_Clock_Enable+0x30>)
1a003820:	3020      	adds	r0, #32
1a003822:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003826:	f043 0301 	orr.w	r3, r3, #1
1a00382a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00382e:	4770      	bx	lr
1a003830:	40052000 	.word	0x40052000
1a003834:	40051000 	.word	0x40051000

1a003838 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003838:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00383a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00383e:	d309      	bcc.n	1a003854 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003840:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003844:	4a0d      	ldr	r2, [pc, #52]	; (1a00387c <Chip_Clock_GetRate+0x44>)
1a003846:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00384a:	f014 0f01 	tst.w	r4, #1
1a00384e:	d107      	bne.n	1a003860 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003850:	2000      	movs	r0, #0
	}

	return rate;
}
1a003852:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003854:	f100 0320 	add.w	r3, r0, #32
1a003858:	4a09      	ldr	r2, [pc, #36]	; (1a003880 <Chip_Clock_GetRate+0x48>)
1a00385a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00385e:	e7f4      	b.n	1a00384a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003860:	f7ff fe20 	bl	1a0034a4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003864:	f7ff ffa9 	bl	1a0037ba <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003868:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00386c:	d103      	bne.n	1a003876 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00386e:	2301      	movs	r3, #1
		rate = rate / div;
1a003870:	fbb0 f0f3 	udiv	r0, r0, r3
1a003874:	e7ed      	b.n	1a003852 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003876:	2302      	movs	r3, #2
1a003878:	e7fa      	b.n	1a003870 <Chip_Clock_GetRate+0x38>
1a00387a:	bf00      	nop
1a00387c:	40052000 	.word	0x40052000
1a003880:	40051000 	.word	0x40051000

1a003884 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003884:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003886:	2069      	movs	r0, #105	; 0x69
1a003888:	f7ff ffd6 	bl	1a003838 <Chip_Clock_GetRate>
1a00388c:	4b01      	ldr	r3, [pc, #4]	; (1a003894 <SystemCoreClockUpdate+0x10>)
1a00388e:	6018      	str	r0, [r3, #0]
}
1a003890:	bd08      	pop	{r3, pc}
1a003892:	bf00      	nop
1a003894:	10002c50 	.word	0x10002c50

1a003898 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003898:	b570      	push	{r4, r5, r6, lr}
1a00389a:	b08a      	sub	sp, #40	; 0x28
1a00389c:	4605      	mov	r5, r0
1a00389e:	460e      	mov	r6, r1
1a0038a0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0038a2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0038a6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0038a8:	2806      	cmp	r0, #6
1a0038aa:	d018      	beq.n	1a0038de <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0038ac:	2300      	movs	r3, #0
1a0038ae:	2201      	movs	r2, #1
1a0038b0:	4629      	mov	r1, r5
1a0038b2:	2004      	movs	r0, #4
1a0038b4:	f7ff ff42 	bl	1a00373c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0038b8:	4a4a      	ldr	r2, [pc, #296]	; (1a0039e4 <Chip_SetupCoreClock+0x14c>)
1a0038ba:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0038bc:	f043 0301 	orr.w	r3, r3, #1
1a0038c0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0038c2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0038c6:	a901      	add	r1, sp, #4
1a0038c8:	4630      	mov	r0, r6
1a0038ca:	f7ff feaf 	bl	1a00362c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0038ce:	4b46      	ldr	r3, [pc, #280]	; (1a0039e8 <Chip_SetupCoreClock+0x150>)
1a0038d0:	429e      	cmp	r6, r3
1a0038d2:	d916      	bls.n	1a003902 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0038d4:	9b01      	ldr	r3, [sp, #4]
1a0038d6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0038da:	d003      	beq.n	1a0038e4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0038dc:	e7fe      	b.n	1a0038dc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0038de:	f7ff fe07 	bl	1a0034f0 <Chip_Clock_EnableCrystal>
1a0038e2:	e7e3      	b.n	1a0038ac <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0038e4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0038e8:	d005      	beq.n	1a0038f6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0038ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0038ee:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0038f0:	2500      	movs	r5, #0
			direct = 1;
1a0038f2:	2601      	movs	r6, #1
1a0038f4:	e007      	b.n	1a003906 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0038f6:	9b04      	ldr	r3, [sp, #16]
1a0038f8:	3301      	adds	r3, #1
1a0038fa:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0038fc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0038fe:	2600      	movs	r6, #0
1a003900:	e001      	b.n	1a003906 <Chip_SetupCoreClock+0x6e>
1a003902:	2500      	movs	r5, #0
1a003904:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003906:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00390a:	9b01      	ldr	r3, [sp, #4]
1a00390c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003910:	9a05      	ldr	r2, [sp, #20]
1a003912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003916:	9a03      	ldr	r2, [sp, #12]
1a003918:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00391c:	9a04      	ldr	r2, [sp, #16]
1a00391e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003922:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003926:	4a2f      	ldr	r2, [pc, #188]	; (1a0039e4 <Chip_SetupCoreClock+0x14c>)
1a003928:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00392a:	4b2e      	ldr	r3, [pc, #184]	; (1a0039e4 <Chip_SetupCoreClock+0x14c>)
1a00392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00392e:	f013 0f01 	tst.w	r3, #1
1a003932:	d0fa      	beq.n	1a00392a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003934:	2300      	movs	r3, #0
1a003936:	2201      	movs	r2, #1
1a003938:	2109      	movs	r1, #9
1a00393a:	2004      	movs	r0, #4
1a00393c:	f7ff fefe 	bl	1a00373c <Chip_Clock_SetBaseClock>

	if (direct) {
1a003940:	b306      	cbz	r6, 1a003984 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003942:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003946:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003948:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00394a:	1e5a      	subs	r2, r3, #1
1a00394c:	9209      	str	r2, [sp, #36]	; 0x24
1a00394e:	2b00      	cmp	r3, #0
1a003950:	d1fa      	bne.n	1a003948 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003952:	9b01      	ldr	r3, [sp, #4]
1a003954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003958:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00395a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00395e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003962:	9a05      	ldr	r2, [sp, #20]
1a003964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003968:	9a03      	ldr	r2, [sp, #12]
1a00396a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00396e:	9a04      	ldr	r2, [sp, #16]
1a003970:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003978:	4a1a      	ldr	r2, [pc, #104]	; (1a0039e4 <Chip_SetupCoreClock+0x14c>)
1a00397a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00397c:	2c00      	cmp	r4, #0
1a00397e:	d12e      	bne.n	1a0039de <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003980:	b00a      	add	sp, #40	; 0x28
1a003982:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a003984:	2d00      	cmp	r5, #0
1a003986:	d0f9      	beq.n	1a00397c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003988:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00398c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00398e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003990:	1e5a      	subs	r2, r3, #1
1a003992:	9209      	str	r2, [sp, #36]	; 0x24
1a003994:	2b00      	cmp	r3, #0
1a003996:	d1fa      	bne.n	1a00398e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a003998:	9b04      	ldr	r3, [sp, #16]
1a00399a:	1e5a      	subs	r2, r3, #1
1a00399c:	9204      	str	r2, [sp, #16]
1a00399e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0039a2:	9b01      	ldr	r3, [sp, #4]
1a0039a4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0039a8:	9905      	ldr	r1, [sp, #20]
1a0039aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0039ae:	9903      	ldr	r1, [sp, #12]
1a0039b0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0039b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0039b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0039bc:	4a09      	ldr	r2, [pc, #36]	; (1a0039e4 <Chip_SetupCoreClock+0x14c>)
1a0039be:	6453      	str	r3, [r2, #68]	; 0x44
1a0039c0:	e7dc      	b.n	1a00397c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0039c2:	480a      	ldr	r0, [pc, #40]	; (1a0039ec <Chip_SetupCoreClock+0x154>)
1a0039c4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0039c8:	78cb      	ldrb	r3, [r1, #3]
1a0039ca:	788a      	ldrb	r2, [r1, #2]
1a0039cc:	7849      	ldrb	r1, [r1, #1]
1a0039ce:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0039d2:	f7ff feb3 	bl	1a00373c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0039d6:	3401      	adds	r4, #1
1a0039d8:	2c11      	cmp	r4, #17
1a0039da:	d9f2      	bls.n	1a0039c2 <Chip_SetupCoreClock+0x12a>
1a0039dc:	e7d0      	b.n	1a003980 <Chip_SetupCoreClock+0xe8>
1a0039de:	2400      	movs	r4, #0
1a0039e0:	e7fa      	b.n	1a0039d8 <Chip_SetupCoreClock+0x140>
1a0039e2:	bf00      	nop
1a0039e4:	40050000 	.word	0x40050000
1a0039e8:	068e7780 	.word	0x068e7780
1a0039ec:	1a0061fc 	.word	0x1a0061fc

1a0039f0 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0039f0:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a0039f2:	6843      	ldr	r3, [r0, #4]
1a0039f4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0039f8:	2b30      	cmp	r3, #48	; 0x30
1a0039fa:	d04c      	beq.n	1a003a96 <Chip_I2CM_XferHandler+0xa6>
1a0039fc:	d908      	bls.n	1a003a10 <Chip_I2CM_XferHandler+0x20>
1a0039fe:	2b48      	cmp	r3, #72	; 0x48
1a003a00:	d06c      	beq.n	1a003adc <Chip_I2CM_XferHandler+0xec>
1a003a02:	d934      	bls.n	1a003a6e <Chip_I2CM_XferHandler+0x7e>
1a003a04:	2b58      	cmp	r3, #88	; 0x58
1a003a06:	d058      	beq.n	1a003aba <Chip_I2CM_XferHandler+0xca>
1a003a08:	2bf8      	cmp	r3, #248	; 0xf8
1a003a0a:	d13e      	bne.n	1a003a8a <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a003a0c:	2000      	movs	r0, #0
1a003a0e:	e02b      	b.n	1a003a68 <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a10:	2b10      	cmp	r3, #16
1a003a12:	d016      	beq.n	1a003a42 <Chip_I2CM_XferHandler+0x52>
1a003a14:	d90e      	bls.n	1a003a34 <Chip_I2CM_XferHandler+0x44>
1a003a16:	2b20      	cmp	r3, #32
1a003a18:	d03d      	beq.n	1a003a96 <Chip_I2CM_XferHandler+0xa6>
1a003a1a:	2b28      	cmp	r3, #40	; 0x28
1a003a1c:	d001      	beq.n	1a003a22 <Chip_I2CM_XferHandler+0x32>
1a003a1e:	2b18      	cmp	r3, #24
1a003a20:	d135      	bne.n	1a003a8e <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a003a22:	888b      	ldrh	r3, [r1, #4]
1a003a24:	2b00      	cmp	r3, #0
1a003a26:	d13e      	bne.n	1a003aa6 <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a003a28:	88cb      	ldrh	r3, [r1, #6]
1a003a2a:	2b00      	cmp	r3, #0
1a003a2c:	d15e      	bne.n	1a003aec <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a003a2e:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a003a30:	232c      	movs	r3, #44	; 0x2c
1a003a32:	e00f      	b.n	1a003a54 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a34:	b91b      	cbnz	r3, 1a003a3e <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a003a36:	2303      	movs	r3, #3
1a003a38:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003a3a:	232c      	movs	r3, #44	; 0x2c
        break;
1a003a3c:	e00a      	b.n	1a003a54 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a3e:	2b08      	cmp	r3, #8
1a003a40:	d125      	bne.n	1a003a8e <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003a42:	780a      	ldrb	r2, [r1, #0]
1a003a44:	888b      	ldrh	r3, [r1, #4]
1a003a46:	fab3 f383 	clz	r3, r3
1a003a4a:	095b      	lsrs	r3, r3, #5
1a003a4c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003a50:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003a52:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003a54:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003a58:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a003a5a:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a003a5e:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a003a60:	8848      	ldrh	r0, [r1, #2]
1a003a62:	38ff      	subs	r0, #255	; 0xff
1a003a64:	bf18      	it	ne
1a003a66:	2001      	movne	r0, #1
}
1a003a68:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003a6c:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a6e:	2b38      	cmp	r3, #56	; 0x38
1a003a70:	d038      	beq.n	1a003ae4 <Chip_I2CM_XferHandler+0xf4>
1a003a72:	2b40      	cmp	r3, #64	; 0x40
1a003a74:	d10b      	bne.n	1a003a8e <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003a76:	88ca      	ldrh	r2, [r1, #6]
1a003a78:	2a01      	cmp	r2, #1
1a003a7a:	d927      	bls.n	1a003acc <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a003a7c:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a003a7e:	2a00      	cmp	r2, #0
1a003a80:	d1e8      	bne.n	1a003a54 <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a003a82:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003a84:	f023 0310 	bic.w	r3, r3, #16
1a003a88:	e7e4      	b.n	1a003a54 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a8a:	2b50      	cmp	r3, #80	; 0x50
1a003a8c:	d015      	beq.n	1a003aba <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a003a8e:	2301      	movs	r3, #1
1a003a90:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003a92:	232c      	movs	r3, #44	; 0x2c
        break;
1a003a94:	e7de      	b.n	1a003a54 <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a003a96:	784b      	ldrb	r3, [r1, #1]
1a003a98:	f013 0f01 	tst.w	r3, #1
1a003a9c:	d1c1      	bne.n	1a003a22 <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a003a9e:	2302      	movs	r3, #2
1a003aa0:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003aa2:	232c      	movs	r3, #44	; 0x2c
			break;
1a003aa4:	e7d6      	b.n	1a003a54 <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a003aa6:	688b      	ldr	r3, [r1, #8]
1a003aa8:	1c5a      	adds	r2, r3, #1
1a003aaa:	608a      	str	r2, [r1, #8]
1a003aac:	781b      	ldrb	r3, [r3, #0]
1a003aae:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003ab0:	888b      	ldrh	r3, [r1, #4]
1a003ab2:	3b01      	subs	r3, #1
1a003ab4:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a003ab6:	233c      	movs	r3, #60	; 0x3c
1a003ab8:	e7cc      	b.n	1a003a54 <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a003aba:	6882      	ldr	r2, [r0, #8]
1a003abc:	68cb      	ldr	r3, [r1, #12]
1a003abe:	1c5c      	adds	r4, r3, #1
1a003ac0:	60cc      	str	r4, [r1, #12]
1a003ac2:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a003ac4:	88cb      	ldrh	r3, [r1, #6]
1a003ac6:	3b01      	subs	r3, #1
1a003ac8:	80cb      	strh	r3, [r1, #6]
1a003aca:	e7d4      	b.n	1a003a76 <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003acc:	784b      	ldrb	r3, [r1, #1]
1a003ace:	f013 0f02 	tst.w	r3, #2
1a003ad2:	d101      	bne.n	1a003ad8 <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a003ad4:	233c      	movs	r3, #60	; 0x3c
1a003ad6:	e7d2      	b.n	1a003a7e <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a003ad8:	2338      	movs	r3, #56	; 0x38
1a003ada:	e7d0      	b.n	1a003a7e <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a003adc:	2304      	movs	r3, #4
1a003ade:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003ae0:	232c      	movs	r3, #44	; 0x2c
		break;
1a003ae2:	e7b7      	b.n	1a003a54 <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a003ae4:	2305      	movs	r3, #5
1a003ae6:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a003ae8:	233c      	movs	r3, #60	; 0x3c
		break;
1a003aea:	e7b3      	b.n	1a003a54 <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a003aec:	231c      	movs	r3, #28
1a003aee:	e7b1      	b.n	1a003a54 <Chip_I2CM_XferHandler+0x64>

1a003af0 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a003af0:	23ff      	movs	r3, #255	; 0xff
1a003af2:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a003af4:	232c      	movs	r3, #44	; 0x2c
1a003af6:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a003af8:	2360      	movs	r3, #96	; 0x60
1a003afa:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a003afc:	4770      	bx	lr

1a003afe <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003afe:	b538      	push	{r3, r4, r5, lr}
1a003b00:	4604      	mov	r4, r0
1a003b02:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a003b04:	f7ff fff4 	bl	1a003af0 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a003b08:	2000      	movs	r0, #0

	while (ret == 0) {
1a003b0a:	e003      	b.n	1a003b14 <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a003b0c:	4629      	mov	r1, r5
1a003b0e:	4620      	mov	r0, r4
1a003b10:	f7ff ff6e 	bl	1a0039f0 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a003b14:	b920      	cbnz	r0, 1a003b20 <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a003b16:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a003b18:	f013 0f08 	tst.w	r3, #8
1a003b1c:	d0fb      	beq.n	1a003b16 <Chip_I2CM_XferBlocking+0x18>
1a003b1e:	e7f5      	b.n	1a003b0c <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a003b20:	bd38      	pop	{r3, r4, r5, pc}

1a003b22 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003b22:	4770      	bx	lr

1a003b24 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003b24:	4b03      	ldr	r3, [pc, #12]	; (1a003b34 <Chip_SSP_GetClockIndex+0x10>)
1a003b26:	4298      	cmp	r0, r3
1a003b28:	d001      	beq.n	1a003b2e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003b2a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003b2c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003b2e:	20a5      	movs	r0, #165	; 0xa5
1a003b30:	4770      	bx	lr
1a003b32:	bf00      	nop
1a003b34:	400c5000 	.word	0x400c5000

1a003b38 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003b38:	4b04      	ldr	r3, [pc, #16]	; (1a003b4c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003b3a:	4298      	cmp	r0, r3
1a003b3c:	d002      	beq.n	1a003b44 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003b3e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003b42:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003b44:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003b48:	4770      	bx	lr
1a003b4a:	bf00      	nop
1a003b4c:	400c5000 	.word	0x400c5000

1a003b50 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003b50:	6803      	ldr	r3, [r0, #0]
1a003b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003b56:	0209      	lsls	r1, r1, #8
1a003b58:	b289      	uxth	r1, r1
1a003b5a:	4319      	orrs	r1, r3
1a003b5c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003b5e:	6102      	str	r2, [r0, #16]
}
1a003b60:	4770      	bx	lr

1a003b62 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003b62:	b570      	push	{r4, r5, r6, lr}
1a003b64:	4606      	mov	r6, r0
1a003b66:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003b68:	f7ff ffe6 	bl	1a003b38 <Chip_SSP_GetPeriphClockIndex>
1a003b6c:	f7ff fe64 	bl	1a003838 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003b70:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003b76:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003b78:	e000      	b.n	1a003b7c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003b7a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003b7c:	42ab      	cmp	r3, r5
1a003b7e:	d90b      	bls.n	1a003b98 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003b80:	1c4c      	adds	r4, r1, #1
1a003b82:	fb02 f304 	mul.w	r3, r2, r4
1a003b86:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003b8a:	429d      	cmp	r5, r3
1a003b8c:	d2f6      	bcs.n	1a003b7c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003b8e:	2cff      	cmp	r4, #255	; 0xff
1a003b90:	d9f3      	bls.n	1a003b7a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003b92:	3202      	adds	r2, #2
				cr0_div = 0;
1a003b94:	2100      	movs	r1, #0
1a003b96:	e7f1      	b.n	1a003b7c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003b98:	4630      	mov	r0, r6
1a003b9a:	f7ff ffd9 	bl	1a003b50 <Chip_SSP_SetClockRate>
}
1a003b9e:	bd70      	pop	{r4, r5, r6, pc}

1a003ba0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003ba0:	b510      	push	{r4, lr}
1a003ba2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003ba4:	f7ff ffbe 	bl	1a003b24 <Chip_SSP_GetClockIndex>
1a003ba8:	f7ff fe2c 	bl	1a003804 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003bac:	4620      	mov	r0, r4
1a003bae:	f7ff ffc3 	bl	1a003b38 <Chip_SSP_GetPeriphClockIndex>
1a003bb2:	f7ff fe27 	bl	1a003804 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003bb6:	6863      	ldr	r3, [r4, #4]
1a003bb8:	f023 0304 	bic.w	r3, r3, #4
1a003bbc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003bbe:	6823      	ldr	r3, [r4, #0]
1a003bc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003bc4:	f043 0307 	orr.w	r3, r3, #7
1a003bc8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003bca:	4902      	ldr	r1, [pc, #8]	; (1a003bd4 <Chip_SSP_Init+0x34>)
1a003bcc:	4620      	mov	r0, r4
1a003bce:	f7ff ffc8 	bl	1a003b62 <Chip_SSP_SetBitRate>
}
1a003bd2:	bd10      	pop	{r4, pc}
1a003bd4:	000186a0 	.word	0x000186a0

1a003bd8 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003bd8:	2901      	cmp	r1, #1
1a003bda:	d109      	bne.n	1a003bf0 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a003bdc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003be0:	0082      	lsls	r2, r0, #2
1a003be2:	4b04      	ldr	r3, [pc, #16]	; (1a003bf4 <Chip_I2C_EventHandler+0x1c>)
1a003be4:	4413      	add	r3, r2
1a003be6:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a003be8:	7d13      	ldrb	r3, [r2, #20]
1a003bea:	b2db      	uxtb	r3, r3
1a003bec:	2b04      	cmp	r3, #4
1a003bee:	d0fb      	beq.n	1a003be8 <Chip_I2C_EventHandler+0x10>
}
1a003bf0:	4770      	bx	lr
1a003bf2:	bf00      	nop
1a003bf4:	10000058 	.word	0x10000058

1a003bf8 <handleMasterXferState>:
{
1a003bf8:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a003bfa:	6843      	ldr	r3, [r0, #4]
1a003bfc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a003c00:	2b58      	cmp	r3, #88	; 0x58
1a003c02:	d87f      	bhi.n	1a003d04 <handleMasterXferState+0x10c>
1a003c04:	e8df f003 	tbb	[pc, r3]
1a003c08:	7e7e7e7a 	.word	0x7e7e7e7a
1a003c0c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c10:	7e7e7e2f 	.word	0x7e7e7e2f
1a003c14:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c18:	7e7e7e2f 	.word	0x7e7e7e2f
1a003c1c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c20:	7e7e7e39 	.word	0x7e7e7e39
1a003c24:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c28:	7e7e7e6e 	.word	0x7e7e7e6e
1a003c2c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c30:	7e7e7e39 	.word	0x7e7e7e39
1a003c34:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c38:	7e7e7e72 	.word	0x7e7e7e72
1a003c3c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c40:	7e7e7e76 	.word	0x7e7e7e76
1a003c44:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c48:	7e7e7e6c 	.word	0x7e7e7e6c
1a003c4c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c50:	7e7e7e6e 	.word	0x7e7e7e6e
1a003c54:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c58:	7e7e7e2d 	.word	0x7e7e7e2d
1a003c5c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c60:	4f          	.byte	0x4f
1a003c61:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a003c62:	233c      	movs	r3, #60	; 0x3c
1a003c64:	e020      	b.n	1a003ca8 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003c66:	780a      	ldrb	r2, [r1, #0]
1a003c68:	688b      	ldr	r3, [r1, #8]
1a003c6a:	fab3 f383 	clz	r3, r3
1a003c6e:	095b      	lsrs	r3, r3, #5
1a003c70:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003c74:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003c76:	233c      	movs	r3, #60	; 0x3c
		break;
1a003c78:	e023      	b.n	1a003cc2 <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a003c7a:	688b      	ldr	r3, [r1, #8]
1a003c7c:	b94b      	cbnz	r3, 1a003c92 <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a003c7e:	690b      	ldr	r3, [r1, #16]
1a003c80:	b123      	cbz	r3, 1a003c8c <handleMasterXferState+0x94>
1a003c82:	f06f 0320 	mvn.w	r3, #32
1a003c86:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a003c8a:	e01a      	b.n	1a003cc2 <handleMasterXferState+0xca>
1a003c8c:	f06f 0310 	mvn.w	r3, #16
1a003c90:	e7f9      	b.n	1a003c86 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a003c92:	684b      	ldr	r3, [r1, #4]
1a003c94:	1c5a      	adds	r2, r3, #1
1a003c96:	604a      	str	r2, [r1, #4]
1a003c98:	781b      	ldrb	r3, [r3, #0]
1a003c9a:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003c9c:	688b      	ldr	r3, [r1, #8]
1a003c9e:	3b01      	subs	r3, #1
1a003ca0:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003ca2:	233c      	movs	r3, #60	; 0x3c
1a003ca4:	e00d      	b.n	1a003cc2 <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a003ca6:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a003ca8:	6884      	ldr	r4, [r0, #8]
1a003caa:	68ca      	ldr	r2, [r1, #12]
1a003cac:	1c55      	adds	r5, r2, #1
1a003cae:	60cd      	str	r5, [r1, #12]
1a003cb0:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a003cb2:	690a      	ldr	r2, [r1, #16]
1a003cb4:	3a01      	subs	r2, #1
1a003cb6:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a003cb8:	690a      	ldr	r2, [r1, #16]
1a003cba:	2a01      	cmp	r2, #1
1a003cbc:	dd01      	ble.n	1a003cc2 <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a003cbe:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003cc2:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003cc6:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a003cc8:	f023 0210 	bic.w	r2, r3, #16
1a003ccc:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a003cce:	f013 0f10 	tst.w	r3, #16
1a003cd2:	d019      	beq.n	1a003d08 <handleMasterXferState+0x110>
1a003cd4:	7d0b      	ldrb	r3, [r1, #20]
1a003cd6:	2b02      	cmp	r3, #2
1a003cd8:	d016      	beq.n	1a003d08 <handleMasterXferState+0x110>
	return 1;
1a003cda:	2001      	movs	r0, #1
}
1a003cdc:	bc30      	pop	{r4, r5}
1a003cde:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a003ce0:	233c      	movs	r3, #60	; 0x3c
1a003ce2:	e7e9      	b.n	1a003cb8 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a003ce4:	2305      	movs	r3, #5
1a003ce6:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003ce8:	232c      	movs	r3, #44	; 0x2c
		break;
1a003cea:	e7ea      	b.n	1a003cc2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a003cec:	2301      	movs	r3, #1
1a003cee:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003cf0:	232c      	movs	r3, #44	; 0x2c
		break;
1a003cf2:	e7e6      	b.n	1a003cc2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a003cf4:	2302      	movs	r3, #2
1a003cf6:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a003cf8:	233c      	movs	r3, #60	; 0x3c
		break;
1a003cfa:	e7e2      	b.n	1a003cc2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a003cfc:	2303      	movs	r3, #3
1a003cfe:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003d00:	232c      	movs	r3, #44	; 0x2c
1a003d02:	e7de      	b.n	1a003cc2 <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a003d04:	233c      	movs	r3, #60	; 0x3c
1a003d06:	e7dc      	b.n	1a003cc2 <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a003d08:	7d0b      	ldrb	r3, [r1, #20]
1a003d0a:	2b04      	cmp	r3, #4
1a003d0c:	d001      	beq.n	1a003d12 <handleMasterXferState+0x11a>
		return 0;
1a003d0e:	2000      	movs	r0, #0
1a003d10:	e7e4      	b.n	1a003cdc <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a003d12:	2300      	movs	r3, #0
1a003d14:	750b      	strb	r3, [r1, #20]
1a003d16:	e7fa      	b.n	1a003d0e <handleMasterXferState+0x116>

1a003d18 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003d18:	b570      	push	{r4, r5, r6, lr}
1a003d1a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003d1c:	4e06      	ldr	r6, [pc, #24]	; (1a003d38 <Chip_I2C_Init+0x20>)
1a003d1e:	00c4      	lsls	r4, r0, #3
1a003d20:	1a22      	subs	r2, r4, r0
1a003d22:	0093      	lsls	r3, r2, #2
1a003d24:	4433      	add	r3, r6
1a003d26:	8898      	ldrh	r0, [r3, #4]
1a003d28:	f7ff fd6c 	bl	1a003804 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003d2c:	1b64      	subs	r4, r4, r5
1a003d2e:	00a3      	lsls	r3, r4, #2
1a003d30:	58f3      	ldr	r3, [r6, r3]
1a003d32:	226c      	movs	r2, #108	; 0x6c
1a003d34:	619a      	str	r2, [r3, #24]
}
1a003d36:	bd70      	pop	{r4, r5, r6, pc}
1a003d38:	10000058 	.word	0x10000058

1a003d3c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003d40:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003d42:	4e0b      	ldr	r6, [pc, #44]	; (1a003d70 <Chip_I2C_SetClockRate+0x34>)
1a003d44:	00c5      	lsls	r5, r0, #3
1a003d46:	1a2b      	subs	r3, r5, r0
1a003d48:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003d4c:	eb06 0308 	add.w	r3, r6, r8
1a003d50:	8898      	ldrh	r0, [r3, #4]
1a003d52:	f7ff fd71 	bl	1a003838 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003d56:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003d5a:	f856 3008 	ldr.w	r3, [r6, r8]
1a003d5e:	0842      	lsrs	r2, r0, #1
1a003d60:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003d62:	f856 3008 	ldr.w	r3, [r6, r8]
1a003d66:	691a      	ldr	r2, [r3, #16]
1a003d68:	1a80      	subs	r0, r0, r2
1a003d6a:	6158      	str	r0, [r3, #20]
}
1a003d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003d70:	10000058 	.word	0x10000058

1a003d74 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a003d74:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003d78:	009a      	lsls	r2, r3, #2
1a003d7a:	4b09      	ldr	r3, [pc, #36]	; (1a003da0 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003d7c:	4413      	add	r3, r2
1a003d7e:	691b      	ldr	r3, [r3, #16]
1a003d80:	b153      	cbz	r3, 1a003d98 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a003d82:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003d86:	0082      	lsls	r2, r0, #2
1a003d88:	4b05      	ldr	r3, [pc, #20]	; (1a003da0 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003d8a:	4413      	add	r3, r2
1a003d8c:	6898      	ldr	r0, [r3, #8]
}
1a003d8e:	4288      	cmp	r0, r1
1a003d90:	bf14      	ite	ne
1a003d92:	2000      	movne	r0, #0
1a003d94:	2001      	moveq	r0, #1
1a003d96:	4770      	bx	lr
		iic->mEvent = event;
1a003d98:	4b01      	ldr	r3, [pc, #4]	; (1a003da0 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003d9a:	4413      	add	r3, r2
1a003d9c:	6099      	str	r1, [r3, #8]
1a003d9e:	e7f0      	b.n	1a003d82 <Chip_I2C_SetMasterEventHandler+0xe>
1a003da0:	10000058 	.word	0x10000058

1a003da4 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a003da4:	b510      	push	{r4, lr}
1a003da6:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a003da8:	4809      	ldr	r0, [pc, #36]	; (1a003dd0 <Chip_I2C_MasterStateHandler+0x2c>)
1a003daa:	00e3      	lsls	r3, r4, #3
1a003dac:	1b1b      	subs	r3, r3, r4
1a003dae:	009a      	lsls	r2, r3, #2
1a003db0:	1883      	adds	r3, r0, r2
1a003db2:	6919      	ldr	r1, [r3, #16]
1a003db4:	5880      	ldr	r0, [r0, r2]
1a003db6:	f7ff ff1f 	bl	1a003bf8 <handleMasterXferState>
1a003dba:	b940      	cbnz	r0, 1a003dce <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a003dbc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a003dc0:	009a      	lsls	r2, r3, #2
1a003dc2:	4b03      	ldr	r3, [pc, #12]	; (1a003dd0 <Chip_I2C_MasterStateHandler+0x2c>)
1a003dc4:	4413      	add	r3, r2
1a003dc6:	689b      	ldr	r3, [r3, #8]
1a003dc8:	2102      	movs	r1, #2
1a003dca:	4620      	mov	r0, r4
1a003dcc:	4798      	blx	r3
	}
}
1a003dce:	bd10      	pop	{r4, pc}
1a003dd0:	10000058 	.word	0x10000058

1a003dd4 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a003dd4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003dd8:	0083      	lsls	r3, r0, #2
1a003dda:	4a03      	ldr	r2, [pc, #12]	; (1a003de8 <Chip_I2C_IsStateChanged+0x14>)
1a003ddc:	58d3      	ldr	r3, [r2, r3]
1a003dde:	6818      	ldr	r0, [r3, #0]
}
1a003de0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a003de4:	4770      	bx	lr
1a003de6:	bf00      	nop
1a003de8:	10000058 	.word	0x10000058

1a003dec <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a003dec:	2901      	cmp	r1, #1
1a003dee:	d115      	bne.n	1a003e1c <Chip_I2C_EventHandlerPolling+0x30>
{
1a003df0:	b538      	push	{r3, r4, r5, lr}
1a003df2:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a003df4:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003df8:	009a      	lsls	r2, r3, #2
1a003dfa:	4b09      	ldr	r3, [pc, #36]	; (1a003e20 <Chip_I2C_EventHandlerPolling+0x34>)
1a003dfc:	4413      	add	r3, r2
1a003dfe:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a003e00:	7d2b      	ldrb	r3, [r5, #20]
1a003e02:	b2db      	uxtb	r3, r3
1a003e04:	2b04      	cmp	r3, #4
1a003e06:	d108      	bne.n	1a003e1a <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a003e08:	4620      	mov	r0, r4
1a003e0a:	f7ff ffe3 	bl	1a003dd4 <Chip_I2C_IsStateChanged>
1a003e0e:	2800      	cmp	r0, #0
1a003e10:	d0f6      	beq.n	1a003e00 <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a003e12:	4620      	mov	r0, r4
1a003e14:	f7ff ffc6 	bl	1a003da4 <Chip_I2C_MasterStateHandler>
1a003e18:	e7f2      	b.n	1a003e00 <Chip_I2C_EventHandlerPolling+0x14>
}
1a003e1a:	bd38      	pop	{r3, r4, r5, pc}
1a003e1c:	4770      	bx	lr
1a003e1e:	bf00      	nop
1a003e20:	10000058 	.word	0x10000058

1a003e24 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003e24:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003e26:	4a0b      	ldr	r2, [pc, #44]	; (1a003e54 <SystemInit+0x30>)
1a003e28:	4b0b      	ldr	r3, [pc, #44]	; (1a003e58 <SystemInit+0x34>)
1a003e2a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003e2c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003e30:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003e32:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003e36:	2b20      	cmp	r3, #32
1a003e38:	d004      	beq.n	1a003e44 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003e3a:	f7ff f925 	bl	1a003088 <Board_SystemInit>
   Board_Init();
1a003e3e:	f7ff f8ab 	bl	1a002f98 <Board_Init>
}
1a003e42:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003e44:	4a04      	ldr	r2, [pc, #16]	; (1a003e58 <SystemInit+0x34>)
1a003e46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003e4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003e4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003e52:	e7f2      	b.n	1a003e3a <SystemInit+0x16>
1a003e54:	1a000000 	.word	0x1a000000
1a003e58:	e000ed00 	.word	0xe000ed00

1a003e5c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003e5c:	4b04      	ldr	r3, [pc, #16]	; (1a003e70 <cyclesCounterInit+0x14>)
1a003e5e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003e60:	4a04      	ldr	r2, [pc, #16]	; (1a003e74 <cyclesCounterInit+0x18>)
1a003e62:	6813      	ldr	r3, [r2, #0]
1a003e64:	f043 0301 	orr.w	r3, r3, #1
1a003e68:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003e6a:	2001      	movs	r0, #1
1a003e6c:	4770      	bx	lr
1a003e6e:	bf00      	nop
1a003e70:	10000090 	.word	0x10000090
1a003e74:	e0001000 	.word	0xe0001000

1a003e78 <uartProcessIRQ>:
{
1a003e78:	b570      	push	{r4, r5, r6, lr}
1a003e7a:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003e7c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003e80:	0093      	lsls	r3, r2, #2
1a003e82:	4a22      	ldr	r2, [pc, #136]	; (1a003f0c <uartProcessIRQ+0x94>)
1a003e84:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a003e86:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003e88:	b2ed      	uxtb	r5, r5
1a003e8a:	f015 0f01 	tst.w	r5, #1
1a003e8e:	d00a      	beq.n	1a003ea6 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a003e90:	b928      	cbnz	r0, 1a003e9e <uartProcessIRQ+0x26>
1a003e92:	4b1f      	ldr	r3, [pc, #124]	; (1a003f10 <uartProcessIRQ+0x98>)
1a003e94:	681b      	ldr	r3, [r3, #0]
1a003e96:	b113      	cbz	r3, 1a003e9e <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a003e98:	4a1e      	ldr	r2, [pc, #120]	; (1a003f14 <uartProcessIRQ+0x9c>)
1a003e9a:	6810      	ldr	r0, [r2, #0]
1a003e9c:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003e9e:	2c03      	cmp	r4, #3
1a003ea0:	d014      	beq.n	1a003ecc <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003ea2:	2c05      	cmp	r4, #5
1a003ea4:	d01a      	beq.n	1a003edc <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003ea6:	f015 0f20 	tst.w	r5, #32
1a003eaa:	d00e      	beq.n	1a003eca <uartProcessIRQ+0x52>
	return pUART->IER;
1a003eac:	6873      	ldr	r3, [r6, #4]
1a003eae:	f013 0f02 	tst.w	r3, #2
1a003eb2:	d00a      	beq.n	1a003eca <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003eb4:	b92c      	cbnz	r4, 1a003ec2 <uartProcessIRQ+0x4a>
1a003eb6:	4b18      	ldr	r3, [pc, #96]	; (1a003f18 <uartProcessIRQ+0xa0>)
1a003eb8:	681b      	ldr	r3, [r3, #0]
1a003eba:	b113      	cbz	r3, 1a003ec2 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a003ebc:	4a17      	ldr	r2, [pc, #92]	; (1a003f1c <uartProcessIRQ+0xa4>)
1a003ebe:	6810      	ldr	r0, [r2, #0]
1a003ec0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003ec2:	2c03      	cmp	r4, #3
1a003ec4:	d012      	beq.n	1a003eec <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003ec6:	2c05      	cmp	r4, #5
1a003ec8:	d018      	beq.n	1a003efc <uartProcessIRQ+0x84>
}
1a003eca:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003ecc:	4b14      	ldr	r3, [pc, #80]	; (1a003f20 <uartProcessIRQ+0xa8>)
1a003ece:	681b      	ldr	r3, [r3, #0]
1a003ed0:	2b00      	cmp	r3, #0
1a003ed2:	d0e6      	beq.n	1a003ea2 <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a003ed4:	4a13      	ldr	r2, [pc, #76]	; (1a003f24 <uartProcessIRQ+0xac>)
1a003ed6:	6810      	ldr	r0, [r2, #0]
1a003ed8:	4798      	blx	r3
1a003eda:	e7e2      	b.n	1a003ea2 <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003edc:	4b12      	ldr	r3, [pc, #72]	; (1a003f28 <uartProcessIRQ+0xb0>)
1a003ede:	681b      	ldr	r3, [r3, #0]
1a003ee0:	2b00      	cmp	r3, #0
1a003ee2:	d0e0      	beq.n	1a003ea6 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a003ee4:	4a11      	ldr	r2, [pc, #68]	; (1a003f2c <uartProcessIRQ+0xb4>)
1a003ee6:	6810      	ldr	r0, [r2, #0]
1a003ee8:	4798      	blx	r3
1a003eea:	e7dc      	b.n	1a003ea6 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003eec:	4b10      	ldr	r3, [pc, #64]	; (1a003f30 <uartProcessIRQ+0xb8>)
1a003eee:	681b      	ldr	r3, [r3, #0]
1a003ef0:	2b00      	cmp	r3, #0
1a003ef2:	d0e8      	beq.n	1a003ec6 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a003ef4:	4a0f      	ldr	r2, [pc, #60]	; (1a003f34 <uartProcessIRQ+0xbc>)
1a003ef6:	6810      	ldr	r0, [r2, #0]
1a003ef8:	4798      	blx	r3
1a003efa:	e7e4      	b.n	1a003ec6 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003efc:	4b0e      	ldr	r3, [pc, #56]	; (1a003f38 <uartProcessIRQ+0xc0>)
1a003efe:	681b      	ldr	r3, [r3, #0]
1a003f00:	2b00      	cmp	r3, #0
1a003f02:	d0e2      	beq.n	1a003eca <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a003f04:	4a0d      	ldr	r2, [pc, #52]	; (1a003f3c <uartProcessIRQ+0xc4>)
1a003f06:	6810      	ldr	r0, [r2, #0]
1a003f08:	4798      	blx	r3
}
1a003f0a:	e7de      	b.n	1a003eca <uartProcessIRQ+0x52>
1a003f0c:	1a006244 	.word	0x1a006244
1a003f10:	10002b84 	.word	0x10002b84
1a003f14:	10002b88 	.word	0x10002b88
1a003f18:	10002b9c 	.word	0x10002b9c
1a003f1c:	10002ba0 	.word	0x10002ba0
1a003f20:	10002b8c 	.word	0x10002b8c
1a003f24:	10002b90 	.word	0x10002b90
1a003f28:	10002b94 	.word	0x10002b94
1a003f2c:	10002b98 	.word	0x10002b98
1a003f30:	10002ba4 	.word	0x10002ba4
1a003f34:	10002ba8 	.word	0x10002ba8
1a003f38:	10002bac 	.word	0x10002bac
1a003f3c:	10002bb0 	.word	0x10002bb0

1a003f40 <uartInterrupt>:
   if( enable ) {
1a003f40:	b341      	cbz	r1, 1a003f94 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a003f42:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a003f46:	009a      	lsls	r2, r3, #2
1a003f48:	4b1e      	ldr	r3, [pc, #120]	; (1a003fc4 <uartInterrupt+0x84>)
1a003f4a:	4413      	add	r3, r2
1a003f4c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003f50:	2b00      	cmp	r3, #0
1a003f52:	db18      	blt.n	1a003f86 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003f54:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003f58:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a003f5c:	22a0      	movs	r2, #160	; 0xa0
1a003f5e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a003f62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003f66:	0082      	lsls	r2, r0, #2
1a003f68:	4b16      	ldr	r3, [pc, #88]	; (1a003fc4 <uartInterrupt+0x84>)
1a003f6a:	4413      	add	r3, r2
1a003f6c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003f70:	2b00      	cmp	r3, #0
1a003f72:	db25      	blt.n	1a003fc0 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003f74:	f003 011f 	and.w	r1, r3, #31
1a003f78:	095b      	lsrs	r3, r3, #5
1a003f7a:	2201      	movs	r2, #1
1a003f7c:	408a      	lsls	r2, r1
1a003f7e:	4912      	ldr	r1, [pc, #72]	; (1a003fc8 <uartInterrupt+0x88>)
1a003f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003f84:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003f86:	f003 030f 	and.w	r3, r3, #15
1a003f8a:	4a10      	ldr	r2, [pc, #64]	; (1a003fcc <uartInterrupt+0x8c>)
1a003f8c:	441a      	add	r2, r3
1a003f8e:	23a0      	movs	r3, #160	; 0xa0
1a003f90:	7613      	strb	r3, [r2, #24]
1a003f92:	e7e6      	b.n	1a003f62 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a003f94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003f98:	0082      	lsls	r2, r0, #2
1a003f9a:	4b0a      	ldr	r3, [pc, #40]	; (1a003fc4 <uartInterrupt+0x84>)
1a003f9c:	4413      	add	r3, r2
1a003f9e:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003fa2:	2b00      	cmp	r3, #0
1a003fa4:	db0c      	blt.n	1a003fc0 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003fa6:	f003 011f 	and.w	r1, r3, #31
1a003faa:	095b      	lsrs	r3, r3, #5
1a003fac:	2201      	movs	r2, #1
1a003fae:	408a      	lsls	r2, r1
1a003fb0:	3320      	adds	r3, #32
1a003fb2:	4905      	ldr	r1, [pc, #20]	; (1a003fc8 <uartInterrupt+0x88>)
1a003fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
1a003fb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a003fbc:	f3bf 8f6f 	isb	sy
}
1a003fc0:	4770      	bx	lr
1a003fc2:	bf00      	nop
1a003fc4:	1a006244 	.word	0x1a006244
1a003fc8:	e000e100 	.word	0xe000e100
1a003fcc:	e000ecfc 	.word	0xe000ecfc

1a003fd0 <uartCallbackSet>:
{   
1a003fd0:	b410      	push	{r4}
   switch(event){
1a003fd2:	b161      	cbz	r1, 1a003fee <uartCallbackSet+0x1e>
1a003fd4:	2901      	cmp	r1, #1
1a003fd6:	d11c      	bne.n	1a004012 <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a003fd8:	b1da      	cbz	r2, 1a004012 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a003fda:	2801      	cmp	r0, #1
1a003fdc:	d92c      	bls.n	1a004038 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a003fde:	1ec1      	subs	r1, r0, #3
1a003fe0:	b2c9      	uxtb	r1, r1
1a003fe2:	2901      	cmp	r1, #1
1a003fe4:	d92d      	bls.n	1a004042 <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a003fe6:	2805      	cmp	r0, #5
1a003fe8:	d030      	beq.n	1a00404c <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a003fea:	2302      	movs	r3, #2
1a003fec:	e009      	b.n	1a004002 <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a003fee:	b182      	cbz	r2, 1a004012 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a003ff0:	2801      	cmp	r0, #1
1a003ff2:	d911      	bls.n	1a004018 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a003ff4:	1ec1      	subs	r1, r0, #3
1a003ff6:	b2c9      	uxtb	r1, r1
1a003ff8:	2901      	cmp	r1, #1
1a003ffa:	d912      	bls.n	1a004022 <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a003ffc:	2805      	cmp	r0, #5
1a003ffe:	d015      	beq.n	1a00402c <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004000:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a004002:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004006:	0082      	lsls	r2, r0, #2
1a004008:	4913      	ldr	r1, [pc, #76]	; (1a004058 <uartCallbackSet+0x88>)
1a00400a:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a00400c:	6851      	ldr	r1, [r2, #4]
1a00400e:	430b      	orrs	r3, r1
1a004010:	6053      	str	r3, [r2, #4]
}
1a004012:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004016:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a004018:	4910      	ldr	r1, [pc, #64]	; (1a00405c <uartCallbackSet+0x8c>)
1a00401a:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a00401c:	4910      	ldr	r1, [pc, #64]	; (1a004060 <uartCallbackSet+0x90>)
1a00401e:	600b      	str	r3, [r1, #0]
1a004020:	e7e8      	b.n	1a003ff4 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a004022:	4910      	ldr	r1, [pc, #64]	; (1a004064 <uartCallbackSet+0x94>)
1a004024:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a004026:	4910      	ldr	r1, [pc, #64]	; (1a004068 <uartCallbackSet+0x98>)
1a004028:	600b      	str	r3, [r1, #0]
1a00402a:	e7e7      	b.n	1a003ffc <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a00402c:	490f      	ldr	r1, [pc, #60]	; (1a00406c <uartCallbackSet+0x9c>)
1a00402e:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a004030:	4a0f      	ldr	r2, [pc, #60]	; (1a004070 <uartCallbackSet+0xa0>)
1a004032:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004034:	2305      	movs	r3, #5
1a004036:	e7e4      	b.n	1a004002 <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a004038:	490e      	ldr	r1, [pc, #56]	; (1a004074 <uartCallbackSet+0xa4>)
1a00403a:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a00403c:	490e      	ldr	r1, [pc, #56]	; (1a004078 <uartCallbackSet+0xa8>)
1a00403e:	600b      	str	r3, [r1, #0]
1a004040:	e7cd      	b.n	1a003fde <uartCallbackSet+0xe>
               txIsrCallbackUART2 = callbackFunc;
1a004042:	490e      	ldr	r1, [pc, #56]	; (1a00407c <uartCallbackSet+0xac>)
1a004044:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART2Params = callbackParam;
1a004046:	490e      	ldr	r1, [pc, #56]	; (1a004080 <uartCallbackSet+0xb0>)
1a004048:	600b      	str	r3, [r1, #0]
1a00404a:	e7cc      	b.n	1a003fe6 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a00404c:	490d      	ldr	r1, [pc, #52]	; (1a004084 <uartCallbackSet+0xb4>)
1a00404e:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a004050:	4a0d      	ldr	r2, [pc, #52]	; (1a004088 <uartCallbackSet+0xb8>)
1a004052:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a004054:	2302      	movs	r3, #2
1a004056:	e7d4      	b.n	1a004002 <uartCallbackSet+0x32>
1a004058:	1a006244 	.word	0x1a006244
1a00405c:	10002b84 	.word	0x10002b84
1a004060:	10002b88 	.word	0x10002b88
1a004064:	10002b8c 	.word	0x10002b8c
1a004068:	10002b90 	.word	0x10002b90
1a00406c:	10002b94 	.word	0x10002b94
1a004070:	10002b98 	.word	0x10002b98
1a004074:	10002b9c 	.word	0x10002b9c
1a004078:	10002ba0 	.word	0x10002ba0
1a00407c:	10002ba4 	.word	0x10002ba4
1a004080:	10002ba8 	.word	0x10002ba8
1a004084:	10002bac 	.word	0x10002bac
1a004088:	10002bb0 	.word	0x10002bb0

1a00408c <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a00408c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004090:	0083      	lsls	r3, r0, #2
1a004092:	4a03      	ldr	r2, [pc, #12]	; (1a0040a0 <uartRxReady+0x14>)
1a004094:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a004096:	6958      	ldr	r0, [r3, #20]
}
1a004098:	f000 0001 	and.w	r0, r0, #1
1a00409c:	4770      	bx	lr
1a00409e:	bf00      	nop
1a0040a0:	1a006244 	.word	0x1a006244

1a0040a4 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0040a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040a8:	0083      	lsls	r3, r0, #2
1a0040aa:	4a03      	ldr	r2, [pc, #12]	; (1a0040b8 <uartTxReady+0x14>)
1a0040ac:	58d3      	ldr	r3, [r2, r3]
1a0040ae:	6958      	ldr	r0, [r3, #20]
}
1a0040b0:	f000 0020 	and.w	r0, r0, #32
1a0040b4:	4770      	bx	lr
1a0040b6:	bf00      	nop
1a0040b8:	1a006244 	.word	0x1a006244

1a0040bc <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a0040bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040c0:	0083      	lsls	r3, r0, #2
1a0040c2:	4a02      	ldr	r2, [pc, #8]	; (1a0040cc <uartRxRead+0x10>)
1a0040c4:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0040c6:	6818      	ldr	r0, [r3, #0]
}
1a0040c8:	b2c0      	uxtb	r0, r0
1a0040ca:	4770      	bx	lr
1a0040cc:	1a006244 	.word	0x1a006244

1a0040d0 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0040d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040d4:	0083      	lsls	r3, r0, #2
1a0040d6:	4a02      	ldr	r2, [pc, #8]	; (1a0040e0 <uartTxWrite+0x10>)
1a0040d8:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0040da:	6019      	str	r1, [r3, #0]
}
1a0040dc:	4770      	bx	lr
1a0040de:	bf00      	nop
1a0040e0:	1a006244 	.word	0x1a006244

1a0040e4 <uartInit>:
{
1a0040e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0040e8:	4680      	mov	r8, r0
1a0040ea:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0040ec:	4c19      	ldr	r4, [pc, #100]	; (1a004154 <uartInit+0x70>)
1a0040ee:	0045      	lsls	r5, r0, #1
1a0040f0:	182a      	adds	r2, r5, r0
1a0040f2:	0093      	lsls	r3, r2, #2
1a0040f4:	18e6      	adds	r6, r4, r3
1a0040f6:	58e7      	ldr	r7, [r4, r3]
1a0040f8:	4638      	mov	r0, r7
1a0040fa:	f7fe ffe1 	bl	1a0030c0 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0040fe:	4649      	mov	r1, r9
1a004100:	4638      	mov	r0, r7
1a004102:	f7ff f807 	bl	1a003114 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a004106:	2307      	movs	r3, #7
1a004108:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00410a:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a00410c:	2301      	movs	r3, #1
1a00410e:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a004110:	7930      	ldrb	r0, [r6, #4]
1a004112:	7973      	ldrb	r3, [r6, #5]
1a004114:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004116:	f042 0218 	orr.w	r2, r2, #24
1a00411a:	490f      	ldr	r1, [pc, #60]	; (1a004158 <uartInit+0x74>)
1a00411c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a004124:	79f0      	ldrb	r0, [r6, #7]
1a004126:	7a33      	ldrb	r3, [r6, #8]
1a004128:	7a72      	ldrb	r2, [r6, #9]
1a00412a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00412e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a004136:	f1b8 0f01 	cmp.w	r8, #1
1a00413a:	d001      	beq.n	1a004140 <uartInit+0x5c>
}
1a00413c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a004140:	4a06      	ldr	r2, [pc, #24]	; (1a00415c <uartInit+0x78>)
1a004142:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a004144:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a004148:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00414a:	221a      	movs	r2, #26
1a00414c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a004150:	e7f4      	b.n	1a00413c <uartInit+0x58>
1a004152:	bf00      	nop
1a004154:	1a006244 	.word	0x1a006244
1a004158:	40086000 	.word	0x40086000
1a00415c:	40081000 	.word	0x40081000

1a004160 <uartReadByte>:
{
1a004160:	b538      	push	{r3, r4, r5, lr}
1a004162:	4605      	mov	r5, r0
1a004164:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a004166:	f7ff ff91 	bl	1a00408c <uartRxReady>
1a00416a:	4603      	mov	r3, r0
1a00416c:	b908      	cbnz	r0, 1a004172 <uartReadByte+0x12>
}
1a00416e:	4618      	mov	r0, r3
1a004170:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a004172:	4628      	mov	r0, r5
1a004174:	f7ff ffa2 	bl	1a0040bc <uartRxRead>
1a004178:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a00417a:	2301      	movs	r3, #1
1a00417c:	e7f7      	b.n	1a00416e <uartReadByte+0xe>

1a00417e <waitForReceiveStringOrTimeout>:
{
1a00417e:	b510      	push	{r4, lr}
1a004180:	b082      	sub	sp, #8
1a004182:	460c      	mov	r4, r1
   switch( instance->state ) {
1a004184:	780b      	ldrb	r3, [r1, #0]
1a004186:	2b04      	cmp	r3, #4
1a004188:	d836      	bhi.n	1a0041f8 <waitForReceiveStringOrTimeout+0x7a>
1a00418a:	e8df f003 	tbb	[pc, r3]
1a00418e:	1003      	.short	0x1003
1a004190:	352f      	.short	0x352f
1a004192:	32          	.byte	0x32
1a004193:	00          	.byte	0x00
      delayInit( &(instance->delay), instance->timeout );
1a004194:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a004198:	f101 0018 	add.w	r0, r1, #24
1a00419c:	f000 fb0c 	bl	1a0047b8 <delayInit>
      instance->stringIndex = 0;
1a0041a0:	2300      	movs	r3, #0
1a0041a2:	8163      	strh	r3, [r4, #10]
      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a0041a4:	2301      	movs	r3, #1
1a0041a6:	7023      	strb	r3, [r4, #0]
}
1a0041a8:	7820      	ldrb	r0, [r4, #0]
1a0041aa:	b002      	add	sp, #8
1a0041ac:	bd10      	pop	{r4, pc}
      if( uartReadByte( uart, &receiveByte ) ) {
1a0041ae:	f10d 0107 	add.w	r1, sp, #7
1a0041b2:	f7ff ffd5 	bl	1a004160 <uartReadByte>
1a0041b6:	b130      	cbz	r0, 1a0041c6 <waitForReceiveStringOrTimeout+0x48>
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a0041b8:	6862      	ldr	r2, [r4, #4]
1a0041ba:	8963      	ldrh	r3, [r4, #10]
1a0041bc:	5cd1      	ldrb	r1, [r2, r3]
1a0041be:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a0041c2:	4291      	cmp	r1, r2
1a0041c4:	d008      	beq.n	1a0041d8 <waitForReceiveStringOrTimeout+0x5a>
      if( delayRead( &(instance->delay) ) ) {
1a0041c6:	f104 0018 	add.w	r0, r4, #24
1a0041ca:	f000 fb05 	bl	1a0047d8 <delayRead>
1a0041ce:	2800      	cmp	r0, #0
1a0041d0:	d0ea      	beq.n	1a0041a8 <waitForReceiveStringOrTimeout+0x2a>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a0041d2:	2304      	movs	r3, #4
1a0041d4:	7023      	strb	r3, [r4, #0]
1a0041d6:	e7e7      	b.n	1a0041a8 <waitForReceiveStringOrTimeout+0x2a>
            (instance->stringIndex)++;
1a0041d8:	3301      	adds	r3, #1
1a0041da:	b29b      	uxth	r3, r3
1a0041dc:	8163      	strh	r3, [r4, #10]
            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a0041de:	8922      	ldrh	r2, [r4, #8]
1a0041e0:	3a01      	subs	r2, #1
1a0041e2:	4293      	cmp	r3, r2
1a0041e4:	d1ef      	bne.n	1a0041c6 <waitForReceiveStringOrTimeout+0x48>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a0041e6:	2302      	movs	r3, #2
1a0041e8:	7023      	strb	r3, [r4, #0]
1a0041ea:	e7ec      	b.n	1a0041c6 <waitForReceiveStringOrTimeout+0x48>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a0041ec:	2300      	movs	r3, #0
1a0041ee:	700b      	strb	r3, [r1, #0]
      break;
1a0041f0:	e7da      	b.n	1a0041a8 <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a0041f2:	2300      	movs	r3, #0
1a0041f4:	700b      	strb	r3, [r1, #0]
      break;
1a0041f6:	e7d7      	b.n	1a0041a8 <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a0041f8:	2300      	movs	r3, #0
1a0041fa:	700b      	strb	r3, [r1, #0]
      break;
1a0041fc:	e7d4      	b.n	1a0041a8 <waitForReceiveStringOrTimeout+0x2a>

1a0041fe <waitForReceiveStringOrTimeoutBlocking>:
{
1a0041fe:	b510      	push	{r4, lr}
1a004200:	b08c      	sub	sp, #48	; 0x30
1a004202:	4604      	mov	r4, r0
   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a004204:	2000      	movs	r0, #0
1a004206:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a00420a:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a00420c:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a004210:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a004214:	e9cd 2304 	strd	r2, r3, [sp, #16]
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a004218:	2802      	cmp	r0, #2
1a00421a:	d006      	beq.n	1a00422a <waitForReceiveStringOrTimeoutBlocking+0x2c>
1a00421c:	2804      	cmp	r0, #4
1a00421e:	d004      	beq.n	1a00422a <waitForReceiveStringOrTimeoutBlocking+0x2c>
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a004220:	4669      	mov	r1, sp
1a004222:	4620      	mov	r0, r4
1a004224:	f7ff ffab 	bl	1a00417e <waitForReceiveStringOrTimeout>
1a004228:	e7f6      	b.n	1a004218 <waitForReceiveStringOrTimeoutBlocking+0x1a>
   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a00422a:	2804      	cmp	r0, #4
1a00422c:	d002      	beq.n	1a004234 <waitForReceiveStringOrTimeoutBlocking+0x36>
   bool_t retVal = TRUE; // True if OK
1a00422e:	2001      	movs	r0, #1
}
1a004230:	b00c      	add	sp, #48	; 0x30
1a004232:	bd10      	pop	{r4, pc}
      retVal = FALSE;
1a004234:	2000      	movs	r0, #0
1a004236:	e7fb      	b.n	1a004230 <waitForReceiveStringOrTimeoutBlocking+0x32>

1a004238 <uartWriteByte>:
{
1a004238:	b538      	push	{r3, r4, r5, lr}
1a00423a:	4604      	mov	r4, r0
1a00423c:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a00423e:	4620      	mov	r0, r4
1a004240:	f7ff ff30 	bl	1a0040a4 <uartTxReady>
1a004244:	2800      	cmp	r0, #0
1a004246:	d0fa      	beq.n	1a00423e <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a004248:	4629      	mov	r1, r5
1a00424a:	4620      	mov	r0, r4
1a00424c:	f7ff ff40 	bl	1a0040d0 <uartTxWrite>
}
1a004250:	bd38      	pop	{r3, r4, r5, pc}

1a004252 <uartWriteString>:
{
1a004252:	b538      	push	{r3, r4, r5, lr}
1a004254:	4605      	mov	r5, r0
1a004256:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a004258:	7821      	ldrb	r1, [r4, #0]
1a00425a:	b121      	cbz	r1, 1a004266 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a00425c:	4628      	mov	r0, r5
1a00425e:	f7ff ffeb 	bl	1a004238 <uartWriteByte>
      str++;
1a004262:	3401      	adds	r4, #1
1a004264:	e7f8      	b.n	1a004258 <uartWriteString+0x6>
}
1a004266:	bd38      	pop	{r3, r4, r5, pc}

1a004268 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a004268:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a00426a:	2003      	movs	r0, #3
1a00426c:	f7ff fe04 	bl	1a003e78 <uartProcessIRQ>
}
1a004270:	bd08      	pop	{r3, pc}

1a004272 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a004272:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a004274:	2005      	movs	r0, #5
1a004276:	f7ff fdff 	bl	1a003e78 <uartProcessIRQ>
}
1a00427a:	bd08      	pop	{r3, pc}

1a00427c <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a00427c:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a00427e:	f7fd fe2f 	bl	1a001ee0 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a004282:	2100      	movs	r1, #0
1a004284:	bd08      	pop	{r3, pc}
1a004286:	Address 0x000000001a004286 is out of bounds.


1a004288 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a004288:	b538      	push	{r3, r4, r5, lr}
1a00428a:	4604      	mov	r4, r0
1a00428c:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00428e:	4b08      	ldr	r3, [pc, #32]	; (1a0042b0 <i2cHardwareInit+0x28>)
1a004290:	f640 0208 	movw	r2, #2056	; 0x808
1a004294:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a004298:	f7ff fd3e 	bl	1a003d18 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a00429c:	4629      	mov	r1, r5
1a00429e:	4620      	mov	r0, r4
1a0042a0:	f7ff fd4c 	bl	1a003d3c <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0042a4:	4903      	ldr	r1, [pc, #12]	; (1a0042b4 <i2cHardwareInit+0x2c>)
1a0042a6:	4620      	mov	r0, r4
1a0042a8:	f7ff fd64 	bl	1a003d74 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a0042ac:	2001      	movs	r0, #1
1a0042ae:	bd38      	pop	{r3, r4, r5, pc}
1a0042b0:	40086000 	.word	0x40086000
1a0042b4:	1a003ded 	.word	0x1a003ded

1a0042b8 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a0042b8:	b108      	cbz	r0, 1a0042be <i2cHardwareWrite+0x6>
      return FALSE;
1a0042ba:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a0042bc:	4770      	bx	lr
{
1a0042be:	b500      	push	{lr}
1a0042c0:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a0042c2:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0042c6:	2100      	movs	r1, #0
1a0042c8:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0042cc:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a0042d0:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a0042d2:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a0042d6:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a0042d8:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0042dc:	4669      	mov	r1, sp
1a0042de:	4805      	ldr	r0, [pc, #20]	; (1a0042f4 <i2cHardwareWrite+0x3c>)
1a0042e0:	f7ff fc0d 	bl	1a003afe <Chip_I2CM_XferBlocking>
1a0042e4:	b118      	cbz	r0, 1a0042ee <i2cHardwareWrite+0x36>
   return TRUE;
1a0042e6:	2001      	movs	r0, #1
}
1a0042e8:	b005      	add	sp, #20
1a0042ea:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a0042ee:	2000      	movs	r0, #0
1a0042f0:	e7fa      	b.n	1a0042e8 <i2cHardwareWrite+0x30>
1a0042f2:	bf00      	nop
1a0042f4:	400a1000 	.word	0x400a1000

1a0042f8 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0042f8:	b108      	cbz	r0, 1a0042fe <i2cInit+0x6>
      return FALSE;
1a0042fa:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a0042fc:	4770      	bx	lr
{
1a0042fe:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a004300:	f7ff ffc2 	bl	1a004288 <i2cHardwareInit>
}
1a004304:	bd08      	pop	{r3, pc}

1a004306 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a004306:	b108      	cbz	r0, 1a00430c <i2cWrite+0x6>
      return FALSE;
1a004308:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a00430a:	4770      	bx	lr
{
1a00430c:	b510      	push	{r4, lr}
1a00430e:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a004310:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a004314:	9400      	str	r4, [sp, #0]
1a004316:	f7ff ffcf 	bl	1a0042b8 <i2cHardwareWrite>
}
1a00431a:	b002      	add	sp, #8
1a00431c:	bd10      	pop	{r4, pc}

1a00431e <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a00431e:	e7fe      	b.n	1a00431e <errorOcurred>

1a004320 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a004320:	4770      	bx	lr
1a004322:	Address 0x000000001a004322 is out of bounds.


1a004324 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a004324:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004326:	2400      	movs	r4, #0
1a004328:	e001      	b.n	1a00432e <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00432a:	3401      	adds	r4, #1
1a00432c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00432e:	2c03      	cmp	r4, #3
1a004330:	d812      	bhi.n	1a004358 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a004332:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004334:	4b09      	ldr	r3, [pc, #36]	; (1a00435c <TIMER0_IRQHandler+0x38>)
1a004336:	681a      	ldr	r2, [r3, #0]
1a004338:	f004 010f 	and.w	r1, r4, #15
1a00433c:	2301      	movs	r3, #1
1a00433e:	408b      	lsls	r3, r1
1a004340:	421a      	tst	r2, r3
1a004342:	d0f2      	beq.n	1a00432a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004344:	4b06      	ldr	r3, [pc, #24]	; (1a004360 <TIMER0_IRQHandler+0x3c>)
1a004346:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00434a:	2000      	movs	r0, #0
1a00434c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00434e:	2301      	movs	r3, #1
1a004350:	40ab      	lsls	r3, r5
1a004352:	4a02      	ldr	r2, [pc, #8]	; (1a00435c <TIMER0_IRQHandler+0x38>)
1a004354:	6013      	str	r3, [r2, #0]
1a004356:	e7e8      	b.n	1a00432a <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a004358:	bd38      	pop	{r3, r4, r5, pc}
1a00435a:	bf00      	nop
1a00435c:	40084000 	.word	0x40084000
1a004360:	100000a0 	.word	0x100000a0

1a004364 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a004364:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004366:	2400      	movs	r4, #0
1a004368:	e001      	b.n	1a00436e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00436a:	3401      	adds	r4, #1
1a00436c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00436e:	2c03      	cmp	r4, #3
1a004370:	d813      	bhi.n	1a00439a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a004372:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004374:	4b09      	ldr	r3, [pc, #36]	; (1a00439c <TIMER1_IRQHandler+0x38>)
1a004376:	681a      	ldr	r2, [r3, #0]
1a004378:	f004 010f 	and.w	r1, r4, #15
1a00437c:	2301      	movs	r3, #1
1a00437e:	408b      	lsls	r3, r1
1a004380:	421a      	tst	r2, r3
1a004382:	d0f2      	beq.n	1a00436a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004384:	1d23      	adds	r3, r4, #4
1a004386:	4a06      	ldr	r2, [pc, #24]	; (1a0043a0 <TIMER1_IRQHandler+0x3c>)
1a004388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00438c:	2000      	movs	r0, #0
1a00438e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004390:	2301      	movs	r3, #1
1a004392:	40ab      	lsls	r3, r5
1a004394:	4a01      	ldr	r2, [pc, #4]	; (1a00439c <TIMER1_IRQHandler+0x38>)
1a004396:	6013      	str	r3, [r2, #0]
1a004398:	e7e7      	b.n	1a00436a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00439a:	bd38      	pop	{r3, r4, r5, pc}
1a00439c:	40085000 	.word	0x40085000
1a0043a0:	100000a0 	.word	0x100000a0

1a0043a4 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0043a4:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043a6:	2400      	movs	r4, #0
1a0043a8:	e001      	b.n	1a0043ae <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0043aa:	3401      	adds	r4, #1
1a0043ac:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043ae:	2c03      	cmp	r4, #3
1a0043b0:	d814      	bhi.n	1a0043dc <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0043b2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0043b4:	4b0a      	ldr	r3, [pc, #40]	; (1a0043e0 <TIMER2_IRQHandler+0x3c>)
1a0043b6:	681a      	ldr	r2, [r3, #0]
1a0043b8:	f004 010f 	and.w	r1, r4, #15
1a0043bc:	2301      	movs	r3, #1
1a0043be:	408b      	lsls	r3, r1
1a0043c0:	421a      	tst	r2, r3
1a0043c2:	d0f2      	beq.n	1a0043aa <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0043c4:	f104 0308 	add.w	r3, r4, #8
1a0043c8:	4a06      	ldr	r2, [pc, #24]	; (1a0043e4 <TIMER2_IRQHandler+0x40>)
1a0043ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0043ce:	2000      	movs	r0, #0
1a0043d0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0043d2:	2301      	movs	r3, #1
1a0043d4:	40ab      	lsls	r3, r5
1a0043d6:	4a02      	ldr	r2, [pc, #8]	; (1a0043e0 <TIMER2_IRQHandler+0x3c>)
1a0043d8:	6013      	str	r3, [r2, #0]
1a0043da:	e7e6      	b.n	1a0043aa <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0043dc:	bd38      	pop	{r3, r4, r5, pc}
1a0043de:	bf00      	nop
1a0043e0:	400c3000 	.word	0x400c3000
1a0043e4:	100000a0 	.word	0x100000a0

1a0043e8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0043e8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043ea:	2400      	movs	r4, #0
1a0043ec:	e001      	b.n	1a0043f2 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0043ee:	3401      	adds	r4, #1
1a0043f0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043f2:	2c03      	cmp	r4, #3
1a0043f4:	d814      	bhi.n	1a004420 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0043f6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0043f8:	4b0a      	ldr	r3, [pc, #40]	; (1a004424 <TIMER3_IRQHandler+0x3c>)
1a0043fa:	681a      	ldr	r2, [r3, #0]
1a0043fc:	f004 010f 	and.w	r1, r4, #15
1a004400:	2301      	movs	r3, #1
1a004402:	408b      	lsls	r3, r1
1a004404:	421a      	tst	r2, r3
1a004406:	d0f2      	beq.n	1a0043ee <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004408:	f104 030c 	add.w	r3, r4, #12
1a00440c:	4a06      	ldr	r2, [pc, #24]	; (1a004428 <TIMER3_IRQHandler+0x40>)
1a00440e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004412:	2000      	movs	r0, #0
1a004414:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004416:	2301      	movs	r3, #1
1a004418:	40ab      	lsls	r3, r5
1a00441a:	4a02      	ldr	r2, [pc, #8]	; (1a004424 <TIMER3_IRQHandler+0x3c>)
1a00441c:	6013      	str	r3, [r2, #0]
1a00441e:	e7e6      	b.n	1a0043ee <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a004420:	bd38      	pop	{r3, r4, r5, pc}
1a004422:	bf00      	nop
1a004424:	400c4000 	.word	0x400c4000
1a004428:	100000a0 	.word	0x100000a0

1a00442c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00442c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00442e:	4d0b      	ldr	r5, [pc, #44]	; (1a00445c <gpioObtainPinInit+0x30>)
1a004430:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004434:	182c      	adds	r4, r5, r0
1a004436:	5628      	ldrsb	r0, [r5, r0]
1a004438:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00443a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00443e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a004440:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a004444:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a004446:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00444a:	9b02      	ldr	r3, [sp, #8]
1a00444c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00444e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a004452:	9b03      	ldr	r3, [sp, #12]
1a004454:	701a      	strb	r2, [r3, #0]
}
1a004456:	bc30      	pop	{r4, r5}
1a004458:	4770      	bx	lr
1a00445a:	bf00      	nop
1a00445c:	1a00628c 	.word	0x1a00628c

1a004460 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a004460:	f110 0f02 	cmn.w	r0, #2
1a004464:	f000 80c7 	beq.w	1a0045f6 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a004468:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00446c:	f000 80c5 	beq.w	1a0045fa <gpioInit+0x19a>
{
1a004470:	b570      	push	{r4, r5, r6, lr}
1a004472:	b084      	sub	sp, #16
1a004474:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004476:	2300      	movs	r3, #0
1a004478:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00447c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004480:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004484:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004488:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00448c:	f10d 030b 	add.w	r3, sp, #11
1a004490:	9301      	str	r3, [sp, #4]
1a004492:	ab03      	add	r3, sp, #12
1a004494:	9300      	str	r3, [sp, #0]
1a004496:	f10d 030d 	add.w	r3, sp, #13
1a00449a:	f10d 020e 	add.w	r2, sp, #14
1a00449e:	f10d 010f 	add.w	r1, sp, #15
1a0044a2:	f7ff ffc3 	bl	1a00442c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0044a6:	2c05      	cmp	r4, #5
1a0044a8:	f200 80a9 	bhi.w	1a0045fe <gpioInit+0x19e>
1a0044ac:	e8df f004 	tbb	[pc, r4]
1a0044b0:	45278109 	.word	0x45278109
1a0044b4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0044b6:	4853      	ldr	r0, [pc, #332]	; (1a004604 <gpioInit+0x1a4>)
1a0044b8:	f7ff fb33 	bl	1a003b22 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0044bc:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0044be:	b004      	add	sp, #16
1a0044c0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0044c2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0044c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0044ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0044ce:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0044d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0044d6:	494c      	ldr	r1, [pc, #304]	; (1a004608 <gpioInit+0x1a8>)
1a0044d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0044dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0044e0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0044e4:	2001      	movs	r0, #1
1a0044e6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0044ea:	4c46      	ldr	r4, [pc, #280]	; (1a004604 <gpioInit+0x1a4>)
1a0044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0044f0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0044f4:	ea22 0201 	bic.w	r2, r2, r1
1a0044f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0044fc:	e7df      	b.n	1a0044be <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0044fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004502:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004506:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00450a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00450e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004512:	493d      	ldr	r1, [pc, #244]	; (1a004608 <gpioInit+0x1a8>)
1a004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004518:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00451c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004520:	2001      	movs	r0, #1
1a004522:	fa00 f102 	lsl.w	r1, r0, r2
1a004526:	4c37      	ldr	r4, [pc, #220]	; (1a004604 <gpioInit+0x1a4>)
1a004528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00452c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004530:	ea22 0201 	bic.w	r2, r2, r1
1a004534:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004538:	e7c1      	b.n	1a0044be <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00453a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00453e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004542:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004546:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00454a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00454e:	492e      	ldr	r1, [pc, #184]	; (1a004608 <gpioInit+0x1a8>)
1a004550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004554:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004558:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00455c:	2001      	movs	r0, #1
1a00455e:	fa00 f102 	lsl.w	r1, r0, r2
1a004562:	4c28      	ldr	r4, [pc, #160]	; (1a004604 <gpioInit+0x1a4>)
1a004564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004568:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00456c:	ea22 0201 	bic.w	r2, r2, r1
1a004570:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004574:	e7a3      	b.n	1a0044be <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004576:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00457a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00457e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004582:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a004586:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00458a:	491f      	ldr	r1, [pc, #124]	; (1a004608 <gpioInit+0x1a8>)
1a00458c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004590:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004594:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004598:	2001      	movs	r0, #1
1a00459a:	fa00 f102 	lsl.w	r1, r0, r2
1a00459e:	4c19      	ldr	r4, [pc, #100]	; (1a004604 <gpioInit+0x1a4>)
1a0045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0045a4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0045a8:	ea22 0201 	bic.w	r2, r2, r1
1a0045ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0045b0:	e785      	b.n	1a0044be <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0045b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0045b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0045ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0045be:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0045c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0045c6:	4910      	ldr	r1, [pc, #64]	; (1a004608 <gpioInit+0x1a8>)
1a0045c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0045cc:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0045d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0045d4:	2001      	movs	r0, #1
1a0045d6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0045da:	4b0a      	ldr	r3, [pc, #40]	; (1a004604 <gpioInit+0x1a4>)
1a0045dc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0045e0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0045e4:	4331      	orrs	r1, r6
1a0045e6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0045ea:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0045ec:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0045f0:	2100      	movs	r1, #0
1a0045f2:	5499      	strb	r1, [r3, r2]
1a0045f4:	e763      	b.n	1a0044be <gpioInit+0x5e>
	  return FALSE;
1a0045f6:	2000      	movs	r0, #0
1a0045f8:	4770      	bx	lr
	  return FALSE;
1a0045fa:	2000      	movs	r0, #0
}
1a0045fc:	4770      	bx	lr
      ret_val = 0;
1a0045fe:	2000      	movs	r0, #0
1a004600:	e75d      	b.n	1a0044be <gpioInit+0x5e>
1a004602:	bf00      	nop
1a004604:	400f4000 	.word	0x400f4000
1a004608:	40086000 	.word	0x40086000

1a00460c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a00460c:	f110 0f02 	cmn.w	r0, #2
1a004610:	d02d      	beq.n	1a00466e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a004612:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004616:	d02c      	beq.n	1a004672 <gpioWrite+0x66>
{
1a004618:	b510      	push	{r4, lr}
1a00461a:	b084      	sub	sp, #16
1a00461c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00461e:	2300      	movs	r3, #0
1a004620:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004624:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004628:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00462c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004630:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004634:	f10d 030b 	add.w	r3, sp, #11
1a004638:	9301      	str	r3, [sp, #4]
1a00463a:	ab03      	add	r3, sp, #12
1a00463c:	9300      	str	r3, [sp, #0]
1a00463e:	f10d 030d 	add.w	r3, sp, #13
1a004642:	f10d 020e 	add.w	r2, sp, #14
1a004646:	f10d 010f 	add.w	r1, sp, #15
1a00464a:	f7ff feef 	bl	1a00442c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00464e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004652:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a004656:	1c21      	adds	r1, r4, #0
1a004658:	bf18      	it	ne
1a00465a:	2101      	movne	r1, #1
1a00465c:	015b      	lsls	r3, r3, #5
1a00465e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004662:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a004666:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a004668:	2001      	movs	r0, #1
}
1a00466a:	b004      	add	sp, #16
1a00466c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00466e:	2000      	movs	r0, #0
1a004670:	4770      	bx	lr
	  return FALSE;
1a004672:	2000      	movs	r0, #0
}
1a004674:	4770      	bx	lr
1a004676:	Address 0x000000001a004676 is out of bounds.


1a004678 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a004678:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00467a:	4b04      	ldr	r3, [pc, #16]	; (1a00468c <USB0_IRQHandler+0x14>)
1a00467c:	681b      	ldr	r3, [r3, #0]
1a00467e:	681b      	ldr	r3, [r3, #0]
1a004680:	68db      	ldr	r3, [r3, #12]
1a004682:	4a03      	ldr	r2, [pc, #12]	; (1a004690 <USB0_IRQHandler+0x18>)
1a004684:	6810      	ldr	r0, [r2, #0]
1a004686:	4798      	blx	r3
}
1a004688:	bd08      	pop	{r3, pc}
1a00468a:	bf00      	nop
1a00468c:	10002c54 	.word	0x10002c54
1a004690:	10002bb4 	.word	0x10002bb4

1a004694 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004694:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a004696:	f7ff f8f5 	bl	1a003884 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00469a:	4b18      	ldr	r3, [pc, #96]	; (1a0046fc <boardInit+0x68>)
1a00469c:	6818      	ldr	r0, [r3, #0]
1a00469e:	f7ff fbdd 	bl	1a003e5c <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0046a2:	2105      	movs	r1, #5
1a0046a4:	2000      	movs	r0, #0
1a0046a6:	f7ff fedb 	bl	1a004460 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0046aa:	2100      	movs	r1, #0
1a0046ac:	2024      	movs	r0, #36	; 0x24
1a0046ae:	f7ff fed7 	bl	1a004460 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0046b2:	2100      	movs	r1, #0
1a0046b4:	2025      	movs	r0, #37	; 0x25
1a0046b6:	f7ff fed3 	bl	1a004460 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0046ba:	2100      	movs	r1, #0
1a0046bc:	2026      	movs	r0, #38	; 0x26
1a0046be:	f7ff fecf 	bl	1a004460 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0046c2:	2100      	movs	r1, #0
1a0046c4:	2027      	movs	r0, #39	; 0x27
1a0046c6:	f7ff fecb 	bl	1a004460 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0046ca:	2101      	movs	r1, #1
1a0046cc:	2028      	movs	r0, #40	; 0x28
1a0046ce:	f7ff fec7 	bl	1a004460 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0046d2:	2101      	movs	r1, #1
1a0046d4:	2029      	movs	r0, #41	; 0x29
1a0046d6:	f7ff fec3 	bl	1a004460 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0046da:	2101      	movs	r1, #1
1a0046dc:	202a      	movs	r0, #42	; 0x2a
1a0046de:	f7ff febf 	bl	1a004460 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0046e2:	2101      	movs	r1, #1
1a0046e4:	202b      	movs	r0, #43	; 0x2b
1a0046e6:	f7ff febb 	bl	1a004460 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0046ea:	2101      	movs	r1, #1
1a0046ec:	202c      	movs	r0, #44	; 0x2c
1a0046ee:	f7ff feb7 	bl	1a004460 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0046f2:	2101      	movs	r1, #1
1a0046f4:	202d      	movs	r0, #45	; 0x2d
1a0046f6:	f7ff feb3 	bl	1a004460 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0046fa:	bd08      	pop	{r3, pc}
1a0046fc:	10002c50 	.word	0x10002c50

1a004700 <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a004700:	b4f0      	push	{r4, r5, r6, r7}
1a004702:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a004704:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a004708:	0083      	lsls	r3, r0, #2
1a00470a:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a00470e:	181b      	adds	r3, r3, r0
1a004710:	eb41 0202 	adc.w	r2, r1, r2
1a004714:	0211      	lsls	r1, r2, #8
1a004716:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a00471a:	0218      	lsls	r0, r3, #8
1a00471c:	1ac6      	subs	r6, r0, r3
1a00471e:	eb61 0702 	sbc.w	r7, r1, r2
1a004722:	013b      	lsls	r3, r7, #4
1a004724:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a004728:	0132      	lsls	r2, r6, #4
1a00472a:	4616      	mov	r6, r2
1a00472c:	461f      	mov	r7, r3
1a00472e:	e9cd 6700 	strd	r6, r7, [sp]
   for( i=delay; i>0; i-- );
1a004732:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004736:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00473a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00473e:	4313      	orrs	r3, r2
1a004740:	d008      	beq.n	1a004754 <delayInaccurateMs+0x54>
1a004742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004746:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a00474a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a00474e:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a004752:	e7f2      	b.n	1a00473a <delayInaccurateMs+0x3a>
}
1a004754:	b004      	add	sp, #16
1a004756:	bcf0      	pop	{r4, r5, r6, r7}
1a004758:	4770      	bx	lr

1a00475a <delayInaccurateUs>:

void delayInaccurateUs( tick_t delay_us )
{
1a00475a:	b530      	push	{r4, r5, lr}
1a00475c:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a00475e:	1803      	adds	r3, r0, r0
1a004760:	eb41 0201 	adc.w	r2, r1, r1
1a004764:	1818      	adds	r0, r3, r0
1a004766:	eb42 0101 	adc.w	r1, r2, r1
1a00476a:	010b      	lsls	r3, r1, #4
1a00476c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a004770:	0102      	lsls	r2, r0, #4
1a004772:	1880      	adds	r0, r0, r2
1a004774:	eb43 0101 	adc.w	r1, r3, r1
1a004778:	008b      	lsls	r3, r1, #2
1a00477a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a00477e:	0082      	lsls	r2, r0, #2
1a004780:	4610      	mov	r0, r2
1a004782:	4619      	mov	r1, r3
1a004784:	220a      	movs	r2, #10
1a004786:	2300      	movs	r3, #0
1a004788:	f000 f992 	bl	1a004ab0 <__aeabi_uldivmod>
1a00478c:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a004790:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004794:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a004798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00479c:	4313      	orrs	r3, r2
1a00479e:	d008      	beq.n	1a0047b2 <delayInaccurateUs+0x58>
1a0047a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0047a4:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a0047a8:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a0047ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a0047b0:	e7f2      	b.n	1a004798 <delayInaccurateUs+0x3e>
}
1a0047b2:	b005      	add	sp, #20
1a0047b4:	bd30      	pop	{r4, r5, pc}
1a0047b6:	Address 0x000000001a0047b6 is out of bounds.


1a0047b8 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0047b8:	b510      	push	{r4, lr}
1a0047ba:	4604      	mov	r4, r0
1a0047bc:	4610      	mov	r0, r2
1a0047be:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a0047c0:	4b04      	ldr	r3, [pc, #16]	; (1a0047d4 <delayInit+0x1c>)
1a0047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0047c6:	f000 f973 	bl	1a004ab0 <__aeabi_uldivmod>
1a0047ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0047ce:	2300      	movs	r3, #0
1a0047d0:	7423      	strb	r3, [r4, #16]
}
1a0047d2:	bd10      	pop	{r4, pc}
1a0047d4:	10000098 	.word	0x10000098

1a0047d8 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a0047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0047da:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0047dc:	7c05      	ldrb	r5, [r0, #16]
1a0047de:	b93d      	cbnz	r5, 1a0047f0 <delayRead+0x18>
      delay->startTime = tickRead();
1a0047e0:	f7ff fd4c 	bl	1a00427c <tickRead>
1a0047e4:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a0047e8:	2301      	movs	r3, #1
1a0047ea:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a0047ec:	4628      	mov	r0, r5
1a0047ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0047f0:	f7ff fd44 	bl	1a00427c <tickRead>
1a0047f4:	6823      	ldr	r3, [r4, #0]
1a0047f6:	6862      	ldr	r2, [r4, #4]
1a0047f8:	1ac6      	subs	r6, r0, r3
1a0047fa:	eb61 0702 	sbc.w	r7, r1, r2
1a0047fe:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a004802:	429f      	cmp	r7, r3
1a004804:	bf08      	it	eq
1a004806:	4296      	cmpeq	r6, r2
1a004808:	d303      	bcc.n	1a004812 <delayRead+0x3a>
         delay->running = 0;
1a00480a:	2300      	movs	r3, #0
1a00480c:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a00480e:	2501      	movs	r5, #1
1a004810:	e7ec      	b.n	1a0047ec <delayRead+0x14>
   bool_t timeArrived = 0;
1a004812:	2500      	movs	r5, #0
1a004814:	e7ea      	b.n	1a0047ec <delayRead+0x14>
1a004816:	Address 0x000000001a004816 is out of bounds.


1a004818 <pcf8574TGpioPortWrite>:
   pcf8574TGpioPortDirections = directions;
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
}

static void pcf8574TGpioPortWrite( uint8_t portValue )
{
1a004818:	b500      	push	{lr}
1a00481a:	b085      	sub	sp, #20
   pcf8574TGpioPortValue = portValue;
1a00481c:	4b09      	ldr	r3, [pc, #36]	; (1a004844 <pcf8574TGpioPortWrite+0x2c>)
1a00481e:	7018      	strb	r0, [r3, #0]
   // Or with pcf8574TGpioPortDirections to keep pins initialized as inputs
   uint8_t transmitDataBuffer = portValue | pcf8574TGpioPortDirections;
1a004820:	4b09      	ldr	r3, [pc, #36]	; (1a004848 <pcf8574TGpioPortWrite+0x30>)
1a004822:	781b      	ldrb	r3, [r3, #0]
1a004824:	4318      	orrs	r0, r3
1a004826:	f88d 000f 	strb.w	r0, [sp, #15]
   i2cWrite( I2C0, pcf8574TI2cAddress, &transmitDataBuffer, 1, TRUE );
1a00482a:	2301      	movs	r3, #1
1a00482c:	9300      	str	r3, [sp, #0]
1a00482e:	f10d 020f 	add.w	r2, sp, #15
1a004832:	4906      	ldr	r1, [pc, #24]	; (1a00484c <pcf8574TGpioPortWrite+0x34>)
1a004834:	7809      	ldrb	r1, [r1, #0]
1a004836:	2000      	movs	r0, #0
1a004838:	f7ff fd65 	bl	1a004306 <i2cWrite>
}
1a00483c:	b005      	add	sp, #20
1a00483e:	f85d fb04 	ldr.w	pc, [sp], #4
1a004842:	bf00      	nop
1a004844:	10002bc3 	.word	0x10002bc3
1a004848:	10002bc2 	.word	0x10002bc2
1a00484c:	100000e0 	.word	0x100000e0

1a004850 <pcf8574TGpioWrite>:
{
   return pcf8574TGpioPortRead() & (1<<pin);
}

static void pcf8574TGpioWrite( pcf8574T_gpio_t pin, bool_t value )
{
1a004850:	b508      	push	{r3, lr}
   uint8_t portValue = pcf8574TGpioPortValue;
1a004852:	4b08      	ldr	r3, [pc, #32]	; (1a004874 <pcf8574TGpioWrite+0x24>)
1a004854:	781b      	ldrb	r3, [r3, #0]
   if( value ) {
1a004856:	b139      	cbz	r1, 1a004868 <pcf8574TGpioWrite+0x18>
      portValue |= (1<<pin);
1a004858:	2201      	movs	r2, #1
1a00485a:	fa02 f000 	lsl.w	r0, r2, r0
1a00485e:	4303      	orrs	r3, r0
1a004860:	b2d8      	uxtb	r0, r3
   } else {
      portValue &= ~(1<<pin);
   }
   pcf8574TGpioPortWrite( portValue );
1a004862:	f7ff ffd9 	bl	1a004818 <pcf8574TGpioPortWrite>
}
1a004866:	bd08      	pop	{r3, pc}
      portValue &= ~(1<<pin);
1a004868:	2101      	movs	r1, #1
1a00486a:	fa01 f000 	lsl.w	r0, r1, r0
1a00486e:	ea23 0000 	bic.w	r0, r3, r0
1a004872:	e7f6      	b.n	1a004862 <pcf8574TGpioWrite+0x12>
1a004874:	10002bc3 	.word	0x10002bc3

1a004878 <lcdPinSet>:



static void lcdPinSet( uint8_t pin, bool_t status )
{
1a004878:	b508      	push	{r3, lr}
#ifdef LCD_HD44780_I2C_PCF8574T
   pcf8574TGpioWrite( pin, status );
1a00487a:	f7ff ffe9 	bl	1a004850 <pcf8574TGpioWrite>
#else
   gpioWrite( pin, status );
#endif
}
1a00487e:	bd08      	pop	{r3, pc}

1a004880 <lcdSendNibble>:
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
   //lcdDelay_us(50); // commands need > 37us to settle
}

static void lcdSendNibble( uint8_t nibble )
{
1a004880:	b510      	push	{r4, lr}
1a004882:	4604      	mov	r4, r0
   lcdPinSet( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a004884:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a004888:	2007      	movs	r0, #7
1a00488a:	f7ff fff5 	bl	1a004878 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a00488e:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a004892:	2006      	movs	r0, #6
1a004894:	f7ff fff0 	bl	1a004878 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a004898:	f004 0120 	and.w	r1, r4, #32
1a00489c:	2005      	movs	r0, #5
1a00489e:	f7ff ffeb 	bl	1a004878 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a0048a2:	f004 0110 	and.w	r1, r4, #16
1a0048a6:	2004      	movs	r0, #4
1a0048a8:	f7ff ffe6 	bl	1a004878 <lcdPinSet>
}
1a0048ac:	bd10      	pop	{r4, pc}

1a0048ae <lcdEnablePulse>:
{
1a0048ae:	b508      	push	{r3, lr}
   lcdPinSet( LCD_HD44780_EN, ON );       // EN = 1 for H-to-L pulse
1a0048b0:	2101      	movs	r1, #1
1a0048b2:	2002      	movs	r0, #2
1a0048b4:	f7ff ffe0 	bl	1a004878 <lcdPinSet>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider //lcdDelay_us(1);
1a0048b8:	2019      	movs	r0, #25
1a0048ba:	2100      	movs	r1, #0
1a0048bc:	f7ff ff4d 	bl	1a00475a <delayInaccurateUs>
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
1a0048c0:	2100      	movs	r1, #0
1a0048c2:	2002      	movs	r0, #2
1a0048c4:	f7ff ffd8 	bl	1a004878 <lcdPinSet>
}
1a0048c8:	bd08      	pop	{r3, pc}
1a0048ca:	Address 0x000000001a0048ca is out of bounds.


1a0048cc <pcf8574TGpioPortInit>:
{
1a0048cc:	b500      	push	{lr}
1a0048ce:	b085      	sub	sp, #20
1a0048d0:	f88d 000f 	strb.w	r0, [sp, #15]
   pcf8574TGpioPortDirections = directions;
1a0048d4:	4b06      	ldr	r3, [pc, #24]	; (1a0048f0 <pcf8574TGpioPortInit+0x24>)
1a0048d6:	7018      	strb	r0, [r3, #0]
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
1a0048d8:	2301      	movs	r3, #1
1a0048da:	9300      	str	r3, [sp, #0]
1a0048dc:	f10d 020f 	add.w	r2, sp, #15
1a0048e0:	4904      	ldr	r1, [pc, #16]	; (1a0048f4 <pcf8574TGpioPortInit+0x28>)
1a0048e2:	7809      	ldrb	r1, [r1, #0]
1a0048e4:	2000      	movs	r0, #0
1a0048e6:	f7ff fd0e 	bl	1a004306 <i2cWrite>
}
1a0048ea:	b005      	add	sp, #20
1a0048ec:	f85d fb04 	ldr.w	pc, [sp], #4
1a0048f0:	10002bc2 	.word	0x10002bc2
1a0048f4:	100000e0 	.word	0x100000e0

1a0048f8 <pcf8574TInit>:
{
1a0048f8:	b508      	push	{r3, lr}
   pcf8574TI2cAddress = i2cAddress;
1a0048fa:	4b04      	ldr	r3, [pc, #16]	; (1a00490c <pcf8574TInit+0x14>)
1a0048fc:	7019      	strb	r1, [r3, #0]
   pcf8574TGpioPortInit( 0x00 ); // Init all GPIOs as outputs
1a0048fe:	2000      	movs	r0, #0
1a004900:	f7ff ffe4 	bl	1a0048cc <pcf8574TGpioPortInit>
   pcf8574TGpioPortWrite( 0x00 ); // Init all as zeros
1a004904:	2000      	movs	r0, #0
1a004906:	f7ff ff87 	bl	1a004818 <pcf8574TGpioPortWrite>
}
1a00490a:	bd08      	pop	{r3, pc}
1a00490c:	100000e0 	.word	0x100000e0

1a004910 <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a004910:	b510      	push	{r4, lr}
1a004912:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a004914:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a004918:	f7ff ffb2 	bl	1a004880 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a00491c:	2100      	movs	r1, #0
1a00491e:	4608      	mov	r0, r1
1a004920:	f7ff ffaa 	bl	1a004878 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a004924:	2100      	movs	r1, #0
1a004926:	2001      	movs	r0, #1
1a004928:	f7ff ffa6 	bl	1a004878 <lcdPinSet>

   lcdEnablePulse();
1a00492c:	f7ff ffbf 	bl	1a0048ae <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a004930:	2019      	movs	r0, #25
1a004932:	2100      	movs	r1, #0
1a004934:	f7ff ff11 	bl	1a00475a <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a004938:	0120      	lsls	r0, r4, #4
1a00493a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a00493e:	f7ff ff9f 	bl	1a004880 <lcdSendNibble>
   lcdEnablePulse();
1a004942:	f7ff ffb4 	bl	1a0048ae <lcdEnablePulse>
}
1a004946:	bd10      	pop	{r4, pc}

1a004948 <lcdData>:

void lcdData( uint8_t data )
{
1a004948:	b510      	push	{r4, lr}
1a00494a:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a00494c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a004950:	f7ff ff96 	bl	1a004880 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, ON );    // RS = 1 for data
1a004954:	2101      	movs	r1, #1
1a004956:	2000      	movs	r0, #0
1a004958:	f7ff ff8e 	bl	1a004878 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a00495c:	2100      	movs	r1, #0
1a00495e:	2001      	movs	r0, #1
1a004960:	f7ff ff8a 	bl	1a004878 <lcdPinSet>

   lcdEnablePulse();
1a004964:	f7ff ffa3 	bl	1a0048ae <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a004968:	0120      	lsls	r0, r4, #4
1a00496a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a00496e:	f7ff ff87 	bl	1a004880 <lcdSendNibble>
   lcdEnablePulse();
1a004972:	f7ff ff9c 	bl	1a0048ae <lcdEnablePulse>
}
1a004976:	bd10      	pop	{r4, pc}

1a004978 <lcdGoToXY>:
   lcdClearAndHome();
}

void lcdGoToXY( uint8_t x, uint8_t y )
{
   if( x >= lcd.lineWidth || y >= lcd.amountOfLines ) {
1a004978:	b282      	uxth	r2, r0
1a00497a:	4b11      	ldr	r3, [pc, #68]	; (1a0049c0 <lcdGoToXY+0x48>)
1a00497c:	881b      	ldrh	r3, [r3, #0]
1a00497e:	429a      	cmp	r2, r3
1a004980:	d204      	bcs.n	1a00498c <lcdGoToXY+0x14>
1a004982:	b28b      	uxth	r3, r1
1a004984:	4a0e      	ldr	r2, [pc, #56]	; (1a0049c0 <lcdGoToXY+0x48>)
1a004986:	8852      	ldrh	r2, [r2, #2]
1a004988:	4293      	cmp	r3, r2
1a00498a:	d300      	bcc.n	1a00498e <lcdGoToXY+0x16>
1a00498c:	4770      	bx	lr
{
1a00498e:	b530      	push	{r4, r5, lr}
1a004990:	b083      	sub	sp, #12
1a004992:	460d      	mov	r5, r1
1a004994:	4604      	mov	r4, r0
      return;
   }
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a004996:	4b0b      	ldr	r3, [pc, #44]	; (1a0049c4 <lcdGoToXY+0x4c>)
1a004998:	681b      	ldr	r3, [r3, #0]
1a00499a:	9301      	str	r3, [sp, #4]
   //lcdCommand( firstCharAdress[ y - 1 ] + x - 1 ); // Start in {x,y} = {1,1}
   lcdCommand( firstCharAdress[y] + x );             // Start in {x,y} = {0,0}
1a00499c:	ab02      	add	r3, sp, #8
1a00499e:	440b      	add	r3, r1
1a0049a0:	f813 0c04 	ldrb.w	r0, [r3, #-4]
1a0049a4:	4420      	add	r0, r4
1a0049a6:	b2c0      	uxtb	r0, r0
1a0049a8:	f7ff ffb2 	bl	1a004910 <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a0049ac:	2064      	movs	r0, #100	; 0x64
1a0049ae:	2100      	movs	r1, #0
1a0049b0:	f7ff fed3 	bl	1a00475a <delayInaccurateUs>
   lcd.x = x;
1a0049b4:	4b02      	ldr	r3, [pc, #8]	; (1a0049c0 <lcdGoToXY+0x48>)
1a0049b6:	721c      	strb	r4, [r3, #8]
   lcd.y = y;
1a0049b8:	725d      	strb	r5, [r3, #9]
}
1a0049ba:	b003      	add	sp, #12
1a0049bc:	bd30      	pop	{r4, r5, pc}
1a0049be:	bf00      	nop
1a0049c0:	10002bb8 	.word	0x10002bb8
1a0049c4:	1a006374 	.word	0x1a006374

1a0049c8 <lcdClear>:

void lcdClear( void )
{
1a0049c8:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a0049ca:	2001      	movs	r0, #1
1a0049cc:	f7ff ffa0 	bl	1a004910 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a0049d0:	2003      	movs	r0, #3
1a0049d2:	2100      	movs	r1, #0
1a0049d4:	f7ff fe94 	bl	1a004700 <delayInaccurateMs>
}
1a0049d8:	bd08      	pop	{r3, pc}

1a0049da <lcdCursorSet>:

void lcdCursorSet( lcdCursorModes_t mode )
{
1a0049da:	b508      	push	{r3, lr}
   lcdCommand( 0b00001100 | mode );
1a0049dc:	f040 000c 	orr.w	r0, r0, #12
1a0049e0:	f7ff ff96 	bl	1a004910 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS); // Wait
1a0049e4:	2003      	movs	r0, #3
1a0049e6:	2100      	movs	r1, #0
1a0049e8:	f7ff fe8a 	bl	1a004700 <delayInaccurateMs>
}
1a0049ec:	bd08      	pop	{r3, pc}

1a0049ee <lcdSendStringRaw>:

void lcdSendStringRaw( char* str )
{
1a0049ee:	b538      	push	{r3, r4, r5, lr}
1a0049f0:	4605      	mov	r5, r0
   uint8_t i = 0;
1a0049f2:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a0049f4:	5d28      	ldrb	r0, [r5, r4]
1a0049f6:	b120      	cbz	r0, 1a004a02 <lcdSendStringRaw+0x14>
      lcdData( str[i] );
1a0049f8:	f7ff ffa6 	bl	1a004948 <lcdData>
      i++;
1a0049fc:	3401      	adds	r4, #1
1a0049fe:	b2e4      	uxtb	r4, r4
1a004a00:	e7f8      	b.n	1a0049f4 <lcdSendStringRaw+0x6>
   }
}
1a004a02:	bd38      	pop	{r3, r4, r5, pc}

1a004a04 <lcdClearAndHome>:
   lcdSendCustomCharByIndex( customChar->address );
}


void lcdClearAndHome( void )
{
1a004a04:	b508      	push	{r3, lr}
   lcdClear();
1a004a06:	f7ff ffdf 	bl	1a0049c8 <lcdClear>
   lcdGoToXY( 0, 0 ); // Poner cursor en 0, 0
1a004a0a:	2100      	movs	r1, #0
1a004a0c:	4608      	mov	r0, r1
1a004a0e:	f7ff ffb3 	bl	1a004978 <lcdGoToXY>
   //delay(100);
}
1a004a12:	bd08      	pop	{r3, pc}

1a004a14 <lcdInit>:
{
1a004a14:	b538      	push	{r3, r4, r5, lr}
   lcd.lineWidth = lineWidth;
1a004a16:	4d25      	ldr	r5, [pc, #148]	; (1a004aac <lcdInit+0x98>)
1a004a18:	8028      	strh	r0, [r5, #0]
   lcd.amountOfLines = amountOfLines;
1a004a1a:	8069      	strh	r1, [r5, #2]
   lcd.charWidth = charWidth;
1a004a1c:	80aa      	strh	r2, [r5, #4]
   lcd.charHeight = charHeight;
1a004a1e:	80eb      	strh	r3, [r5, #6]
   lcd.x = 0;
1a004a20:	2400      	movs	r4, #0
1a004a22:	722c      	strb	r4, [r5, #8]
   lcd.y = 0;
1a004a24:	726c      	strb	r4, [r5, #9]
   pcf8574TInit( I2C0, PCF8574T_I2C_ADDRESS );
1a004a26:	2127      	movs	r1, #39	; 0x27
1a004a28:	4620      	mov	r0, r4
1a004a2a:	f7ff ff65 	bl	1a0048f8 <pcf8574TInit>
   lcdPinSet( LCD_HD44780_BACKLIGHT, ON );
1a004a2e:	2101      	movs	r1, #1
1a004a30:	2003      	movs	r0, #3
1a004a32:	f7ff ff21 	bl	1a004878 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );     // RW = 0
1a004a36:	4621      	mov	r1, r4
1a004a38:	2001      	movs	r0, #1
1a004a3a:	f7ff ff1d 	bl	1a004878 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RS, OFF );     // RS = 0
1a004a3e:	4621      	mov	r1, r4
1a004a40:	4620      	mov	r0, r4
1a004a42:	f7ff ff19 	bl	1a004878 <lcdPinSet>
   lcdPinSet( LCD_HD44780_EN, OFF );     // EN = 0
1a004a46:	4621      	mov	r1, r4
1a004a48:	2002      	movs	r0, #2
1a004a4a:	f7ff ff15 	bl	1a004878 <lcdPinSet>
   lcdCommand( 0x33 );                   // Command 0x33 for 4-bit mode
1a004a4e:	2033      	movs	r0, #51	; 0x33
1a004a50:	f7ff ff5e 	bl	1a004910 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004a54:	202d      	movs	r0, #45	; 0x2d
1a004a56:	2100      	movs	r1, #0
1a004a58:	f7ff fe7f 	bl	1a00475a <delayInaccurateUs>
   lcdCommand( 0x32 );                   // Command 0x32 for 4-bit mode
1a004a5c:	2032      	movs	r0, #50	; 0x32
1a004a5e:	f7ff ff57 	bl	1a004910 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004a62:	202d      	movs	r0, #45	; 0x2d
1a004a64:	2100      	movs	r1, #0
1a004a66:	f7ff fe78 	bl	1a00475a <delayInaccurateUs>
   lcdCommand( 0x28 );                   // Command 0x28 for 4-bit mode
1a004a6a:	2028      	movs	r0, #40	; 0x28
1a004a6c:	f7ff ff50 	bl	1a004910 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004a70:	202d      	movs	r0, #45	; 0x2d
1a004a72:	2100      	movs	r1, #0
1a004a74:	f7ff fe71 	bl	1a00475a <delayInaccurateUs>
   lcdCommand( 0x0E );                   // Command 0x0E for display on, cursor on
1a004a78:	200e      	movs	r0, #14
1a004a7a:	f7ff ff49 	bl	1a004910 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004a7e:	202d      	movs	r0, #45	; 0x2d
1a004a80:	2100      	movs	r1, #0
1a004a82:	f7ff fe6a 	bl	1a00475a <delayInaccurateUs>
   lcdClear();                           // Command for clear LCD
1a004a86:	f7ff ff9f 	bl	1a0049c8 <lcdClear>
   lcdCommand( 0x06 );                   // Command 0x06 for Shift cursor right
1a004a8a:	2006      	movs	r0, #6
1a004a8c:	f7ff ff40 	bl	1a004910 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004a90:	202d      	movs	r0, #45	; 0x2d
1a004a92:	2100      	movs	r1, #0
1a004a94:	f7ff fe61 	bl	1a00475a <delayInaccurateUs>
   lcdDelay_ms( 1 );                     // Wait
1a004a98:	2001      	movs	r0, #1
1a004a9a:	2100      	movs	r1, #0
1a004a9c:	f7ff fe30 	bl	1a004700 <delayInaccurateMs>
   lcdCursorSet( LCD_CURSOR_OFF );
1a004aa0:	4620      	mov	r0, r4
1a004aa2:	f7ff ff9a 	bl	1a0049da <lcdCursorSet>
   lcdClearAndHome();
1a004aa6:	f7ff ffad 	bl	1a004a04 <lcdClearAndHome>
}
1a004aaa:	bd38      	pop	{r3, r4, r5, pc}
1a004aac:	10002bb8 	.word	0x10002bb8

1a004ab0 <__aeabi_uldivmod>:
1a004ab0:	b953      	cbnz	r3, 1a004ac8 <__aeabi_uldivmod+0x18>
1a004ab2:	b94a      	cbnz	r2, 1a004ac8 <__aeabi_uldivmod+0x18>
1a004ab4:	2900      	cmp	r1, #0
1a004ab6:	bf08      	it	eq
1a004ab8:	2800      	cmpeq	r0, #0
1a004aba:	bf1c      	itt	ne
1a004abc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004ac0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004ac4:	f000 b974 	b.w	1a004db0 <__aeabi_idiv0>
1a004ac8:	f1ad 0c08 	sub.w	ip, sp, #8
1a004acc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004ad0:	f000 f806 	bl	1a004ae0 <__udivmoddi4>
1a004ad4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004adc:	b004      	add	sp, #16
1a004ade:	4770      	bx	lr

1a004ae0 <__udivmoddi4>:
1a004ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004ae4:	9e08      	ldr	r6, [sp, #32]
1a004ae6:	4604      	mov	r4, r0
1a004ae8:	4688      	mov	r8, r1
1a004aea:	2b00      	cmp	r3, #0
1a004aec:	f040 8085 	bne.w	1a004bfa <__udivmoddi4+0x11a>
1a004af0:	428a      	cmp	r2, r1
1a004af2:	4615      	mov	r5, r2
1a004af4:	d948      	bls.n	1a004b88 <__udivmoddi4+0xa8>
1a004af6:	fab2 f282 	clz	r2, r2
1a004afa:	b14a      	cbz	r2, 1a004b10 <__udivmoddi4+0x30>
1a004afc:	f1c2 0720 	rsb	r7, r2, #32
1a004b00:	fa01 f302 	lsl.w	r3, r1, r2
1a004b04:	fa20 f707 	lsr.w	r7, r0, r7
1a004b08:	4095      	lsls	r5, r2
1a004b0a:	ea47 0803 	orr.w	r8, r7, r3
1a004b0e:	4094      	lsls	r4, r2
1a004b10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004b14:	0c23      	lsrs	r3, r4, #16
1a004b16:	fbb8 f7fe 	udiv	r7, r8, lr
1a004b1a:	fa1f fc85 	uxth.w	ip, r5
1a004b1e:	fb0e 8817 	mls	r8, lr, r7, r8
1a004b22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004b26:	fb07 f10c 	mul.w	r1, r7, ip
1a004b2a:	4299      	cmp	r1, r3
1a004b2c:	d909      	bls.n	1a004b42 <__udivmoddi4+0x62>
1a004b2e:	18eb      	adds	r3, r5, r3
1a004b30:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a004b34:	f080 80e3 	bcs.w	1a004cfe <__udivmoddi4+0x21e>
1a004b38:	4299      	cmp	r1, r3
1a004b3a:	f240 80e0 	bls.w	1a004cfe <__udivmoddi4+0x21e>
1a004b3e:	3f02      	subs	r7, #2
1a004b40:	442b      	add	r3, r5
1a004b42:	1a5b      	subs	r3, r3, r1
1a004b44:	b2a4      	uxth	r4, r4
1a004b46:	fbb3 f0fe 	udiv	r0, r3, lr
1a004b4a:	fb0e 3310 	mls	r3, lr, r0, r3
1a004b4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004b52:	fb00 fc0c 	mul.w	ip, r0, ip
1a004b56:	45a4      	cmp	ip, r4
1a004b58:	d909      	bls.n	1a004b6e <__udivmoddi4+0x8e>
1a004b5a:	192c      	adds	r4, r5, r4
1a004b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004b60:	f080 80cb 	bcs.w	1a004cfa <__udivmoddi4+0x21a>
1a004b64:	45a4      	cmp	ip, r4
1a004b66:	f240 80c8 	bls.w	1a004cfa <__udivmoddi4+0x21a>
1a004b6a:	3802      	subs	r0, #2
1a004b6c:	442c      	add	r4, r5
1a004b6e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004b72:	eba4 040c 	sub.w	r4, r4, ip
1a004b76:	2700      	movs	r7, #0
1a004b78:	b11e      	cbz	r6, 1a004b82 <__udivmoddi4+0xa2>
1a004b7a:	40d4      	lsrs	r4, r2
1a004b7c:	2300      	movs	r3, #0
1a004b7e:	e9c6 4300 	strd	r4, r3, [r6]
1a004b82:	4639      	mov	r1, r7
1a004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004b88:	2a00      	cmp	r2, #0
1a004b8a:	d053      	beq.n	1a004c34 <__udivmoddi4+0x154>
1a004b8c:	fab2 f282 	clz	r2, r2
1a004b90:	2a00      	cmp	r2, #0
1a004b92:	f040 80b6 	bne.w	1a004d02 <__udivmoddi4+0x222>
1a004b96:	1b49      	subs	r1, r1, r5
1a004b98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004b9c:	fa1f f885 	uxth.w	r8, r5
1a004ba0:	2701      	movs	r7, #1
1a004ba2:	fbb1 fcfe 	udiv	ip, r1, lr
1a004ba6:	0c23      	lsrs	r3, r4, #16
1a004ba8:	fb0e 111c 	mls	r1, lr, ip, r1
1a004bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004bb0:	fb08 f10c 	mul.w	r1, r8, ip
1a004bb4:	4299      	cmp	r1, r3
1a004bb6:	d907      	bls.n	1a004bc8 <__udivmoddi4+0xe8>
1a004bb8:	18eb      	adds	r3, r5, r3
1a004bba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a004bbe:	d202      	bcs.n	1a004bc6 <__udivmoddi4+0xe6>
1a004bc0:	4299      	cmp	r1, r3
1a004bc2:	f200 80ec 	bhi.w	1a004d9e <__udivmoddi4+0x2be>
1a004bc6:	4684      	mov	ip, r0
1a004bc8:	1a59      	subs	r1, r3, r1
1a004bca:	b2a3      	uxth	r3, r4
1a004bcc:	fbb1 f0fe 	udiv	r0, r1, lr
1a004bd0:	fb0e 1410 	mls	r4, lr, r0, r1
1a004bd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a004bd8:	fb08 f800 	mul.w	r8, r8, r0
1a004bdc:	45a0      	cmp	r8, r4
1a004bde:	d907      	bls.n	1a004bf0 <__udivmoddi4+0x110>
1a004be0:	192c      	adds	r4, r5, r4
1a004be2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004be6:	d202      	bcs.n	1a004bee <__udivmoddi4+0x10e>
1a004be8:	45a0      	cmp	r8, r4
1a004bea:	f200 80dc 	bhi.w	1a004da6 <__udivmoddi4+0x2c6>
1a004bee:	4618      	mov	r0, r3
1a004bf0:	eba4 0408 	sub.w	r4, r4, r8
1a004bf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a004bf8:	e7be      	b.n	1a004b78 <__udivmoddi4+0x98>
1a004bfa:	428b      	cmp	r3, r1
1a004bfc:	d908      	bls.n	1a004c10 <__udivmoddi4+0x130>
1a004bfe:	2e00      	cmp	r6, #0
1a004c00:	d078      	beq.n	1a004cf4 <__udivmoddi4+0x214>
1a004c02:	2700      	movs	r7, #0
1a004c04:	e9c6 0100 	strd	r0, r1, [r6]
1a004c08:	4638      	mov	r0, r7
1a004c0a:	4639      	mov	r1, r7
1a004c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004c10:	fab3 f783 	clz	r7, r3
1a004c14:	b97f      	cbnz	r7, 1a004c36 <__udivmoddi4+0x156>
1a004c16:	428b      	cmp	r3, r1
1a004c18:	d302      	bcc.n	1a004c20 <__udivmoddi4+0x140>
1a004c1a:	4282      	cmp	r2, r0
1a004c1c:	f200 80bd 	bhi.w	1a004d9a <__udivmoddi4+0x2ba>
1a004c20:	1a84      	subs	r4, r0, r2
1a004c22:	eb61 0303 	sbc.w	r3, r1, r3
1a004c26:	2001      	movs	r0, #1
1a004c28:	4698      	mov	r8, r3
1a004c2a:	2e00      	cmp	r6, #0
1a004c2c:	d0a9      	beq.n	1a004b82 <__udivmoddi4+0xa2>
1a004c2e:	e9c6 4800 	strd	r4, r8, [r6]
1a004c32:	e7a6      	b.n	1a004b82 <__udivmoddi4+0xa2>
1a004c34:	deff      	udf	#255	; 0xff
1a004c36:	f1c7 0520 	rsb	r5, r7, #32
1a004c3a:	40bb      	lsls	r3, r7
1a004c3c:	fa22 fc05 	lsr.w	ip, r2, r5
1a004c40:	ea4c 0c03 	orr.w	ip, ip, r3
1a004c44:	fa01 f407 	lsl.w	r4, r1, r7
1a004c48:	fa20 f805 	lsr.w	r8, r0, r5
1a004c4c:	fa21 f305 	lsr.w	r3, r1, r5
1a004c50:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a004c54:	ea48 0404 	orr.w	r4, r8, r4
1a004c58:	fbb3 f9fe 	udiv	r9, r3, lr
1a004c5c:	0c21      	lsrs	r1, r4, #16
1a004c5e:	fb0e 3319 	mls	r3, lr, r9, r3
1a004c62:	fa1f f88c 	uxth.w	r8, ip
1a004c66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a004c6a:	fb09 fa08 	mul.w	sl, r9, r8
1a004c6e:	459a      	cmp	sl, r3
1a004c70:	fa02 f207 	lsl.w	r2, r2, r7
1a004c74:	fa00 f107 	lsl.w	r1, r0, r7
1a004c78:	d90b      	bls.n	1a004c92 <__udivmoddi4+0x1b2>
1a004c7a:	eb1c 0303 	adds.w	r3, ip, r3
1a004c7e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004c82:	f080 8088 	bcs.w	1a004d96 <__udivmoddi4+0x2b6>
1a004c86:	459a      	cmp	sl, r3
1a004c88:	f240 8085 	bls.w	1a004d96 <__udivmoddi4+0x2b6>
1a004c8c:	f1a9 0902 	sub.w	r9, r9, #2
1a004c90:	4463      	add	r3, ip
1a004c92:	eba3 030a 	sub.w	r3, r3, sl
1a004c96:	b2a4      	uxth	r4, r4
1a004c98:	fbb3 f0fe 	udiv	r0, r3, lr
1a004c9c:	fb0e 3310 	mls	r3, lr, r0, r3
1a004ca0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004ca4:	fb00 f808 	mul.w	r8, r0, r8
1a004ca8:	45a0      	cmp	r8, r4
1a004caa:	d908      	bls.n	1a004cbe <__udivmoddi4+0x1de>
1a004cac:	eb1c 0404 	adds.w	r4, ip, r4
1a004cb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004cb4:	d26b      	bcs.n	1a004d8e <__udivmoddi4+0x2ae>
1a004cb6:	45a0      	cmp	r8, r4
1a004cb8:	d969      	bls.n	1a004d8e <__udivmoddi4+0x2ae>
1a004cba:	3802      	subs	r0, #2
1a004cbc:	4464      	add	r4, ip
1a004cbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004cc2:	eba4 0408 	sub.w	r4, r4, r8
1a004cc6:	fba0 8902 	umull	r8, r9, r0, r2
1a004cca:	454c      	cmp	r4, r9
1a004ccc:	46c6      	mov	lr, r8
1a004cce:	464b      	mov	r3, r9
1a004cd0:	d354      	bcc.n	1a004d7c <__udivmoddi4+0x29c>
1a004cd2:	d051      	beq.n	1a004d78 <__udivmoddi4+0x298>
1a004cd4:	2e00      	cmp	r6, #0
1a004cd6:	d069      	beq.n	1a004dac <__udivmoddi4+0x2cc>
1a004cd8:	ebb1 020e 	subs.w	r2, r1, lr
1a004cdc:	eb64 0403 	sbc.w	r4, r4, r3
1a004ce0:	fa04 f505 	lsl.w	r5, r4, r5
1a004ce4:	fa22 f307 	lsr.w	r3, r2, r7
1a004ce8:	40fc      	lsrs	r4, r7
1a004cea:	431d      	orrs	r5, r3
1a004cec:	e9c6 5400 	strd	r5, r4, [r6]
1a004cf0:	2700      	movs	r7, #0
1a004cf2:	e746      	b.n	1a004b82 <__udivmoddi4+0xa2>
1a004cf4:	4637      	mov	r7, r6
1a004cf6:	4630      	mov	r0, r6
1a004cf8:	e743      	b.n	1a004b82 <__udivmoddi4+0xa2>
1a004cfa:	4618      	mov	r0, r3
1a004cfc:	e737      	b.n	1a004b6e <__udivmoddi4+0x8e>
1a004cfe:	4607      	mov	r7, r0
1a004d00:	e71f      	b.n	1a004b42 <__udivmoddi4+0x62>
1a004d02:	f1c2 0320 	rsb	r3, r2, #32
1a004d06:	fa20 f703 	lsr.w	r7, r0, r3
1a004d0a:	4095      	lsls	r5, r2
1a004d0c:	fa01 f002 	lsl.w	r0, r1, r2
1a004d10:	fa21 f303 	lsr.w	r3, r1, r3
1a004d14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004d18:	4338      	orrs	r0, r7
1a004d1a:	0c01      	lsrs	r1, r0, #16
1a004d1c:	fbb3 f7fe 	udiv	r7, r3, lr
1a004d20:	fa1f f885 	uxth.w	r8, r5
1a004d24:	fb0e 3317 	mls	r3, lr, r7, r3
1a004d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004d2c:	fb07 f308 	mul.w	r3, r7, r8
1a004d30:	428b      	cmp	r3, r1
1a004d32:	fa04 f402 	lsl.w	r4, r4, r2
1a004d36:	d907      	bls.n	1a004d48 <__udivmoddi4+0x268>
1a004d38:	1869      	adds	r1, r5, r1
1a004d3a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004d3e:	d228      	bcs.n	1a004d92 <__udivmoddi4+0x2b2>
1a004d40:	428b      	cmp	r3, r1
1a004d42:	d926      	bls.n	1a004d92 <__udivmoddi4+0x2b2>
1a004d44:	3f02      	subs	r7, #2
1a004d46:	4429      	add	r1, r5
1a004d48:	1acb      	subs	r3, r1, r3
1a004d4a:	b281      	uxth	r1, r0
1a004d4c:	fbb3 f0fe 	udiv	r0, r3, lr
1a004d50:	fb0e 3310 	mls	r3, lr, r0, r3
1a004d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004d58:	fb00 f308 	mul.w	r3, r0, r8
1a004d5c:	428b      	cmp	r3, r1
1a004d5e:	d907      	bls.n	1a004d70 <__udivmoddi4+0x290>
1a004d60:	1869      	adds	r1, r5, r1
1a004d62:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004d66:	d210      	bcs.n	1a004d8a <__udivmoddi4+0x2aa>
1a004d68:	428b      	cmp	r3, r1
1a004d6a:	d90e      	bls.n	1a004d8a <__udivmoddi4+0x2aa>
1a004d6c:	3802      	subs	r0, #2
1a004d6e:	4429      	add	r1, r5
1a004d70:	1ac9      	subs	r1, r1, r3
1a004d72:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004d76:	e714      	b.n	1a004ba2 <__udivmoddi4+0xc2>
1a004d78:	4541      	cmp	r1, r8
1a004d7a:	d2ab      	bcs.n	1a004cd4 <__udivmoddi4+0x1f4>
1a004d7c:	ebb8 0e02 	subs.w	lr, r8, r2
1a004d80:	eb69 020c 	sbc.w	r2, r9, ip
1a004d84:	3801      	subs	r0, #1
1a004d86:	4613      	mov	r3, r2
1a004d88:	e7a4      	b.n	1a004cd4 <__udivmoddi4+0x1f4>
1a004d8a:	4660      	mov	r0, ip
1a004d8c:	e7f0      	b.n	1a004d70 <__udivmoddi4+0x290>
1a004d8e:	4618      	mov	r0, r3
1a004d90:	e795      	b.n	1a004cbe <__udivmoddi4+0x1de>
1a004d92:	4667      	mov	r7, ip
1a004d94:	e7d8      	b.n	1a004d48 <__udivmoddi4+0x268>
1a004d96:	4681      	mov	r9, r0
1a004d98:	e77b      	b.n	1a004c92 <__udivmoddi4+0x1b2>
1a004d9a:	4638      	mov	r0, r7
1a004d9c:	e745      	b.n	1a004c2a <__udivmoddi4+0x14a>
1a004d9e:	f1ac 0c02 	sub.w	ip, ip, #2
1a004da2:	442b      	add	r3, r5
1a004da4:	e710      	b.n	1a004bc8 <__udivmoddi4+0xe8>
1a004da6:	3802      	subs	r0, #2
1a004da8:	442c      	add	r4, r5
1a004daa:	e721      	b.n	1a004bf0 <__udivmoddi4+0x110>
1a004dac:	4637      	mov	r7, r6
1a004dae:	e6e8      	b.n	1a004b82 <__udivmoddi4+0xa2>

1a004db0 <__aeabi_idiv0>:
1a004db0:	4770      	bx	lr
1a004db2:	bf00      	nop

1a004db4 <__sflush_r>:
1a004db4:	898a      	ldrh	r2, [r1, #12]
1a004db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004dba:	4605      	mov	r5, r0
1a004dbc:	0710      	lsls	r0, r2, #28
1a004dbe:	460c      	mov	r4, r1
1a004dc0:	d458      	bmi.n	1a004e74 <__sflush_r+0xc0>
1a004dc2:	684b      	ldr	r3, [r1, #4]
1a004dc4:	2b00      	cmp	r3, #0
1a004dc6:	dc05      	bgt.n	1a004dd4 <__sflush_r+0x20>
1a004dc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a004dca:	2b00      	cmp	r3, #0
1a004dcc:	dc02      	bgt.n	1a004dd4 <__sflush_r+0x20>
1a004dce:	2000      	movs	r0, #0
1a004dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004dd6:	2e00      	cmp	r6, #0
1a004dd8:	d0f9      	beq.n	1a004dce <__sflush_r+0x1a>
1a004dda:	2300      	movs	r3, #0
1a004ddc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a004de0:	682f      	ldr	r7, [r5, #0]
1a004de2:	602b      	str	r3, [r5, #0]
1a004de4:	d032      	beq.n	1a004e4c <__sflush_r+0x98>
1a004de6:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a004de8:	89a3      	ldrh	r3, [r4, #12]
1a004dea:	075a      	lsls	r2, r3, #29
1a004dec:	d505      	bpl.n	1a004dfa <__sflush_r+0x46>
1a004dee:	6863      	ldr	r3, [r4, #4]
1a004df0:	1ac0      	subs	r0, r0, r3
1a004df2:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a004df4:	b10b      	cbz	r3, 1a004dfa <__sflush_r+0x46>
1a004df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a004df8:	1ac0      	subs	r0, r0, r3
1a004dfa:	2300      	movs	r3, #0
1a004dfc:	4602      	mov	r2, r0
1a004dfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004e00:	6a21      	ldr	r1, [r4, #32]
1a004e02:	4628      	mov	r0, r5
1a004e04:	47b0      	blx	r6
1a004e06:	1c43      	adds	r3, r0, #1
1a004e08:	89a3      	ldrh	r3, [r4, #12]
1a004e0a:	d106      	bne.n	1a004e1a <__sflush_r+0x66>
1a004e0c:	6829      	ldr	r1, [r5, #0]
1a004e0e:	291d      	cmp	r1, #29
1a004e10:	d849      	bhi.n	1a004ea6 <__sflush_r+0xf2>
1a004e12:	4a2a      	ldr	r2, [pc, #168]	; (1a004ebc <__sflush_r+0x108>)
1a004e14:	40ca      	lsrs	r2, r1
1a004e16:	07d6      	lsls	r6, r2, #31
1a004e18:	d545      	bpl.n	1a004ea6 <__sflush_r+0xf2>
1a004e1a:	2200      	movs	r2, #0
1a004e1c:	6062      	str	r2, [r4, #4]
1a004e1e:	04d9      	lsls	r1, r3, #19
1a004e20:	6922      	ldr	r2, [r4, #16]
1a004e22:	6022      	str	r2, [r4, #0]
1a004e24:	d504      	bpl.n	1a004e30 <__sflush_r+0x7c>
1a004e26:	1c42      	adds	r2, r0, #1
1a004e28:	d101      	bne.n	1a004e2e <__sflush_r+0x7a>
1a004e2a:	682b      	ldr	r3, [r5, #0]
1a004e2c:	b903      	cbnz	r3, 1a004e30 <__sflush_r+0x7c>
1a004e2e:	6560      	str	r0, [r4, #84]	; 0x54
1a004e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004e32:	602f      	str	r7, [r5, #0]
1a004e34:	2900      	cmp	r1, #0
1a004e36:	d0ca      	beq.n	1a004dce <__sflush_r+0x1a>
1a004e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004e3c:	4299      	cmp	r1, r3
1a004e3e:	d002      	beq.n	1a004e46 <__sflush_r+0x92>
1a004e40:	4628      	mov	r0, r5
1a004e42:	f000 f9ab 	bl	1a00519c <_free_r>
1a004e46:	2000      	movs	r0, #0
1a004e48:	6360      	str	r0, [r4, #52]	; 0x34
1a004e4a:	e7c1      	b.n	1a004dd0 <__sflush_r+0x1c>
1a004e4c:	6a21      	ldr	r1, [r4, #32]
1a004e4e:	2301      	movs	r3, #1
1a004e50:	4628      	mov	r0, r5
1a004e52:	47b0      	blx	r6
1a004e54:	1c41      	adds	r1, r0, #1
1a004e56:	d1c7      	bne.n	1a004de8 <__sflush_r+0x34>
1a004e58:	682b      	ldr	r3, [r5, #0]
1a004e5a:	2b00      	cmp	r3, #0
1a004e5c:	d0c4      	beq.n	1a004de8 <__sflush_r+0x34>
1a004e5e:	2b1d      	cmp	r3, #29
1a004e60:	d001      	beq.n	1a004e66 <__sflush_r+0xb2>
1a004e62:	2b16      	cmp	r3, #22
1a004e64:	d101      	bne.n	1a004e6a <__sflush_r+0xb6>
1a004e66:	602f      	str	r7, [r5, #0]
1a004e68:	e7b1      	b.n	1a004dce <__sflush_r+0x1a>
1a004e6a:	89a3      	ldrh	r3, [r4, #12]
1a004e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004e70:	81a3      	strh	r3, [r4, #12]
1a004e72:	e7ad      	b.n	1a004dd0 <__sflush_r+0x1c>
1a004e74:	690f      	ldr	r7, [r1, #16]
1a004e76:	2f00      	cmp	r7, #0
1a004e78:	d0a9      	beq.n	1a004dce <__sflush_r+0x1a>
1a004e7a:	0793      	lsls	r3, r2, #30
1a004e7c:	680e      	ldr	r6, [r1, #0]
1a004e7e:	bf08      	it	eq
1a004e80:	694b      	ldreq	r3, [r1, #20]
1a004e82:	600f      	str	r7, [r1, #0]
1a004e84:	bf18      	it	ne
1a004e86:	2300      	movne	r3, #0
1a004e88:	eba6 0807 	sub.w	r8, r6, r7
1a004e8c:	608b      	str	r3, [r1, #8]
1a004e8e:	f1b8 0f00 	cmp.w	r8, #0
1a004e92:	dd9c      	ble.n	1a004dce <__sflush_r+0x1a>
1a004e94:	4643      	mov	r3, r8
1a004e96:	463a      	mov	r2, r7
1a004e98:	6a21      	ldr	r1, [r4, #32]
1a004e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004e9c:	4628      	mov	r0, r5
1a004e9e:	47b0      	blx	r6
1a004ea0:	2800      	cmp	r0, #0
1a004ea2:	dc06      	bgt.n	1a004eb2 <__sflush_r+0xfe>
1a004ea4:	89a3      	ldrh	r3, [r4, #12]
1a004ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004eaa:	81a3      	strh	r3, [r4, #12]
1a004eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004eb0:	e78e      	b.n	1a004dd0 <__sflush_r+0x1c>
1a004eb2:	4407      	add	r7, r0
1a004eb4:	eba8 0800 	sub.w	r8, r8, r0
1a004eb8:	e7e9      	b.n	1a004e8e <__sflush_r+0xda>
1a004eba:	bf00      	nop
1a004ebc:	20400001 	.word	0x20400001

1a004ec0 <_fflush_r>:
1a004ec0:	b538      	push	{r3, r4, r5, lr}
1a004ec2:	690b      	ldr	r3, [r1, #16]
1a004ec4:	4605      	mov	r5, r0
1a004ec6:	460c      	mov	r4, r1
1a004ec8:	b913      	cbnz	r3, 1a004ed0 <_fflush_r+0x10>
1a004eca:	2500      	movs	r5, #0
1a004ecc:	4628      	mov	r0, r5
1a004ece:	bd38      	pop	{r3, r4, r5, pc}
1a004ed0:	b118      	cbz	r0, 1a004eda <_fflush_r+0x1a>
1a004ed2:	6983      	ldr	r3, [r0, #24]
1a004ed4:	b90b      	cbnz	r3, 1a004eda <_fflush_r+0x1a>
1a004ed6:	f000 f887 	bl	1a004fe8 <__sinit>
1a004eda:	4b14      	ldr	r3, [pc, #80]	; (1a004f2c <_fflush_r+0x6c>)
1a004edc:	429c      	cmp	r4, r3
1a004ede:	d11b      	bne.n	1a004f18 <_fflush_r+0x58>
1a004ee0:	686c      	ldr	r4, [r5, #4]
1a004ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004ee6:	2b00      	cmp	r3, #0
1a004ee8:	d0ef      	beq.n	1a004eca <_fflush_r+0xa>
1a004eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a004eec:	07d0      	lsls	r0, r2, #31
1a004eee:	d404      	bmi.n	1a004efa <_fflush_r+0x3a>
1a004ef0:	0599      	lsls	r1, r3, #22
1a004ef2:	d402      	bmi.n	1a004efa <_fflush_r+0x3a>
1a004ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004ef6:	f000 f938 	bl	1a00516a <__retarget_lock_acquire_recursive>
1a004efa:	4628      	mov	r0, r5
1a004efc:	4621      	mov	r1, r4
1a004efe:	f7ff ff59 	bl	1a004db4 <__sflush_r>
1a004f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004f04:	07da      	lsls	r2, r3, #31
1a004f06:	4605      	mov	r5, r0
1a004f08:	d4e0      	bmi.n	1a004ecc <_fflush_r+0xc>
1a004f0a:	89a3      	ldrh	r3, [r4, #12]
1a004f0c:	059b      	lsls	r3, r3, #22
1a004f0e:	d4dd      	bmi.n	1a004ecc <_fflush_r+0xc>
1a004f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004f12:	f000 f92b 	bl	1a00516c <__retarget_lock_release_recursive>
1a004f16:	e7d9      	b.n	1a004ecc <_fflush_r+0xc>
1a004f18:	4b05      	ldr	r3, [pc, #20]	; (1a004f30 <_fflush_r+0x70>)
1a004f1a:	429c      	cmp	r4, r3
1a004f1c:	d101      	bne.n	1a004f22 <_fflush_r+0x62>
1a004f1e:	68ac      	ldr	r4, [r5, #8]
1a004f20:	e7df      	b.n	1a004ee2 <_fflush_r+0x22>
1a004f22:	4b04      	ldr	r3, [pc, #16]	; (1a004f34 <_fflush_r+0x74>)
1a004f24:	429c      	cmp	r4, r3
1a004f26:	bf08      	it	eq
1a004f28:	68ec      	ldreq	r4, [r5, #12]
1a004f2a:	e7da      	b.n	1a004ee2 <_fflush_r+0x22>
1a004f2c:	1a006398 	.word	0x1a006398
1a004f30:	1a0063b8 	.word	0x1a0063b8
1a004f34:	1a006378 	.word	0x1a006378

1a004f38 <std>:
1a004f38:	2300      	movs	r3, #0
1a004f3a:	b510      	push	{r4, lr}
1a004f3c:	4604      	mov	r4, r0
1a004f3e:	e9c0 3300 	strd	r3, r3, [r0]
1a004f42:	6083      	str	r3, [r0, #8]
1a004f44:	8181      	strh	r1, [r0, #12]
1a004f46:	6643      	str	r3, [r0, #100]	; 0x64
1a004f48:	81c2      	strh	r2, [r0, #14]
1a004f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004f4e:	6183      	str	r3, [r0, #24]
1a004f50:	4619      	mov	r1, r3
1a004f52:	2208      	movs	r2, #8
1a004f54:	305c      	adds	r0, #92	; 0x5c
1a004f56:	f000 f918 	bl	1a00518a <memset>
1a004f5a:	4b05      	ldr	r3, [pc, #20]	; (1a004f70 <std+0x38>)
1a004f5c:	6263      	str	r3, [r4, #36]	; 0x24
1a004f5e:	4b05      	ldr	r3, [pc, #20]	; (1a004f74 <std+0x3c>)
1a004f60:	62a3      	str	r3, [r4, #40]	; 0x28
1a004f62:	4b05      	ldr	r3, [pc, #20]	; (1a004f78 <std+0x40>)
1a004f64:	62e3      	str	r3, [r4, #44]	; 0x2c
1a004f66:	4b05      	ldr	r3, [pc, #20]	; (1a004f7c <std+0x44>)
1a004f68:	6224      	str	r4, [r4, #32]
1a004f6a:	6323      	str	r3, [r4, #48]	; 0x30
1a004f6c:	bd10      	pop	{r4, pc}
1a004f6e:	bf00      	nop
1a004f70:	1a0059c1 	.word	0x1a0059c1
1a004f74:	1a0059e3 	.word	0x1a0059e3
1a004f78:	1a005a1b 	.word	0x1a005a1b
1a004f7c:	1a005a3f 	.word	0x1a005a3f

1a004f80 <_cleanup_r>:
1a004f80:	4901      	ldr	r1, [pc, #4]	; (1a004f88 <_cleanup_r+0x8>)
1a004f82:	f000 b8af 	b.w	1a0050e4 <_fwalk_reent>
1a004f86:	bf00      	nop
1a004f88:	1a004ec1 	.word	0x1a004ec1

1a004f8c <__sfmoreglue>:
1a004f8c:	b570      	push	{r4, r5, r6, lr}
1a004f8e:	1e4a      	subs	r2, r1, #1
1a004f90:	2568      	movs	r5, #104	; 0x68
1a004f92:	4355      	muls	r5, r2
1a004f94:	460e      	mov	r6, r1
1a004f96:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004f9a:	f000 f94d 	bl	1a005238 <_malloc_r>
1a004f9e:	4604      	mov	r4, r0
1a004fa0:	b140      	cbz	r0, 1a004fb4 <__sfmoreglue+0x28>
1a004fa2:	2100      	movs	r1, #0
1a004fa4:	e9c0 1600 	strd	r1, r6, [r0]
1a004fa8:	300c      	adds	r0, #12
1a004faa:	60a0      	str	r0, [r4, #8]
1a004fac:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004fb0:	f000 f8eb 	bl	1a00518a <memset>
1a004fb4:	4620      	mov	r0, r4
1a004fb6:	bd70      	pop	{r4, r5, r6, pc}

1a004fb8 <__sfp_lock_acquire>:
1a004fb8:	4801      	ldr	r0, [pc, #4]	; (1a004fc0 <__sfp_lock_acquire+0x8>)
1a004fba:	f000 b8d6 	b.w	1a00516a <__retarget_lock_acquire_recursive>
1a004fbe:	bf00      	nop
1a004fc0:	10002c60 	.word	0x10002c60

1a004fc4 <__sfp_lock_release>:
1a004fc4:	4801      	ldr	r0, [pc, #4]	; (1a004fcc <__sfp_lock_release+0x8>)
1a004fc6:	f000 b8d1 	b.w	1a00516c <__retarget_lock_release_recursive>
1a004fca:	bf00      	nop
1a004fcc:	10002c60 	.word	0x10002c60

1a004fd0 <__sinit_lock_acquire>:
1a004fd0:	4801      	ldr	r0, [pc, #4]	; (1a004fd8 <__sinit_lock_acquire+0x8>)
1a004fd2:	f000 b8ca 	b.w	1a00516a <__retarget_lock_acquire_recursive>
1a004fd6:	bf00      	nop
1a004fd8:	10002c5b 	.word	0x10002c5b

1a004fdc <__sinit_lock_release>:
1a004fdc:	4801      	ldr	r0, [pc, #4]	; (1a004fe4 <__sinit_lock_release+0x8>)
1a004fde:	f000 b8c5 	b.w	1a00516c <__retarget_lock_release_recursive>
1a004fe2:	bf00      	nop
1a004fe4:	10002c5b 	.word	0x10002c5b

1a004fe8 <__sinit>:
1a004fe8:	b510      	push	{r4, lr}
1a004fea:	4604      	mov	r4, r0
1a004fec:	f7ff fff0 	bl	1a004fd0 <__sinit_lock_acquire>
1a004ff0:	69a3      	ldr	r3, [r4, #24]
1a004ff2:	b11b      	cbz	r3, 1a004ffc <__sinit+0x14>
1a004ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004ff8:	f7ff bff0 	b.w	1a004fdc <__sinit_lock_release>
1a004ffc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a005000:	6523      	str	r3, [r4, #80]	; 0x50
1a005002:	4b13      	ldr	r3, [pc, #76]	; (1a005050 <__sinit+0x68>)
1a005004:	4a13      	ldr	r2, [pc, #76]	; (1a005054 <__sinit+0x6c>)
1a005006:	681b      	ldr	r3, [r3, #0]
1a005008:	62a2      	str	r2, [r4, #40]	; 0x28
1a00500a:	42a3      	cmp	r3, r4
1a00500c:	bf04      	itt	eq
1a00500e:	2301      	moveq	r3, #1
1a005010:	61a3      	streq	r3, [r4, #24]
1a005012:	4620      	mov	r0, r4
1a005014:	f000 f820 	bl	1a005058 <__sfp>
1a005018:	6060      	str	r0, [r4, #4]
1a00501a:	4620      	mov	r0, r4
1a00501c:	f000 f81c 	bl	1a005058 <__sfp>
1a005020:	60a0      	str	r0, [r4, #8]
1a005022:	4620      	mov	r0, r4
1a005024:	f000 f818 	bl	1a005058 <__sfp>
1a005028:	2200      	movs	r2, #0
1a00502a:	60e0      	str	r0, [r4, #12]
1a00502c:	2104      	movs	r1, #4
1a00502e:	6860      	ldr	r0, [r4, #4]
1a005030:	f7ff ff82 	bl	1a004f38 <std>
1a005034:	2201      	movs	r2, #1
1a005036:	2109      	movs	r1, #9
1a005038:	68a0      	ldr	r0, [r4, #8]
1a00503a:	f7ff ff7d 	bl	1a004f38 <std>
1a00503e:	2202      	movs	r2, #2
1a005040:	2112      	movs	r1, #18
1a005042:	68e0      	ldr	r0, [r4, #12]
1a005044:	f7ff ff78 	bl	1a004f38 <std>
1a005048:	2301      	movs	r3, #1
1a00504a:	61a3      	str	r3, [r4, #24]
1a00504c:	e7d2      	b.n	1a004ff4 <__sinit+0xc>
1a00504e:	bf00      	nop
1a005050:	1a0063d8 	.word	0x1a0063d8
1a005054:	1a004f81 	.word	0x1a004f81

1a005058 <__sfp>:
1a005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00505a:	4607      	mov	r7, r0
1a00505c:	f7ff ffac 	bl	1a004fb8 <__sfp_lock_acquire>
1a005060:	4b1e      	ldr	r3, [pc, #120]	; (1a0050dc <__sfp+0x84>)
1a005062:	681e      	ldr	r6, [r3, #0]
1a005064:	69b3      	ldr	r3, [r6, #24]
1a005066:	b913      	cbnz	r3, 1a00506e <__sfp+0x16>
1a005068:	4630      	mov	r0, r6
1a00506a:	f7ff ffbd 	bl	1a004fe8 <__sinit>
1a00506e:	3648      	adds	r6, #72	; 0x48
1a005070:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a005074:	3b01      	subs	r3, #1
1a005076:	d503      	bpl.n	1a005080 <__sfp+0x28>
1a005078:	6833      	ldr	r3, [r6, #0]
1a00507a:	b30b      	cbz	r3, 1a0050c0 <__sfp+0x68>
1a00507c:	6836      	ldr	r6, [r6, #0]
1a00507e:	e7f7      	b.n	1a005070 <__sfp+0x18>
1a005080:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a005084:	b9d5      	cbnz	r5, 1a0050bc <__sfp+0x64>
1a005086:	4b16      	ldr	r3, [pc, #88]	; (1a0050e0 <__sfp+0x88>)
1a005088:	60e3      	str	r3, [r4, #12]
1a00508a:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a00508e:	6665      	str	r5, [r4, #100]	; 0x64
1a005090:	f000 f86a 	bl	1a005168 <__retarget_lock_init_recursive>
1a005094:	f7ff ff96 	bl	1a004fc4 <__sfp_lock_release>
1a005098:	6025      	str	r5, [r4, #0]
1a00509a:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a00509e:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0050a2:	61a5      	str	r5, [r4, #24]
1a0050a4:	2208      	movs	r2, #8
1a0050a6:	4629      	mov	r1, r5
1a0050a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0050ac:	f000 f86d 	bl	1a00518a <memset>
1a0050b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0050b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0050b8:	4620      	mov	r0, r4
1a0050ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0050bc:	3468      	adds	r4, #104	; 0x68
1a0050be:	e7d9      	b.n	1a005074 <__sfp+0x1c>
1a0050c0:	2104      	movs	r1, #4
1a0050c2:	4638      	mov	r0, r7
1a0050c4:	f7ff ff62 	bl	1a004f8c <__sfmoreglue>
1a0050c8:	4604      	mov	r4, r0
1a0050ca:	6030      	str	r0, [r6, #0]
1a0050cc:	2800      	cmp	r0, #0
1a0050ce:	d1d5      	bne.n	1a00507c <__sfp+0x24>
1a0050d0:	f7ff ff78 	bl	1a004fc4 <__sfp_lock_release>
1a0050d4:	230c      	movs	r3, #12
1a0050d6:	603b      	str	r3, [r7, #0]
1a0050d8:	e7ee      	b.n	1a0050b8 <__sfp+0x60>
1a0050da:	bf00      	nop
1a0050dc:	1a0063d8 	.word	0x1a0063d8
1a0050e0:	ffff0001 	.word	0xffff0001

1a0050e4 <_fwalk_reent>:
1a0050e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0050e8:	4680      	mov	r8, r0
1a0050ea:	4689      	mov	r9, r1
1a0050ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a0050f0:	2600      	movs	r6, #0
1a0050f2:	b914      	cbnz	r4, 1a0050fa <_fwalk_reent+0x16>
1a0050f4:	4630      	mov	r0, r6
1a0050f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0050fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a0050fe:	3f01      	subs	r7, #1
1a005100:	d501      	bpl.n	1a005106 <_fwalk_reent+0x22>
1a005102:	6824      	ldr	r4, [r4, #0]
1a005104:	e7f5      	b.n	1a0050f2 <_fwalk_reent+0xe>
1a005106:	89ab      	ldrh	r3, [r5, #12]
1a005108:	2b01      	cmp	r3, #1
1a00510a:	d907      	bls.n	1a00511c <_fwalk_reent+0x38>
1a00510c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a005110:	3301      	adds	r3, #1
1a005112:	d003      	beq.n	1a00511c <_fwalk_reent+0x38>
1a005114:	4629      	mov	r1, r5
1a005116:	4640      	mov	r0, r8
1a005118:	47c8      	blx	r9
1a00511a:	4306      	orrs	r6, r0
1a00511c:	3568      	adds	r5, #104	; 0x68
1a00511e:	e7ee      	b.n	1a0050fe <_fwalk_reent+0x1a>

1a005120 <__libc_init_array>:
1a005120:	b570      	push	{r4, r5, r6, lr}
1a005122:	4d0d      	ldr	r5, [pc, #52]	; (1a005158 <__libc_init_array+0x38>)
1a005124:	4c0d      	ldr	r4, [pc, #52]	; (1a00515c <__libc_init_array+0x3c>)
1a005126:	1b64      	subs	r4, r4, r5
1a005128:	10a4      	asrs	r4, r4, #2
1a00512a:	2600      	movs	r6, #0
1a00512c:	42a6      	cmp	r6, r4
1a00512e:	d109      	bne.n	1a005144 <__libc_init_array+0x24>
1a005130:	4d0b      	ldr	r5, [pc, #44]	; (1a005160 <__libc_init_array+0x40>)
1a005132:	4c0c      	ldr	r4, [pc, #48]	; (1a005164 <__libc_init_array+0x44>)
1a005134:	f7fb fe3b 	bl	1a000dae <_init>
1a005138:	1b64      	subs	r4, r4, r5
1a00513a:	10a4      	asrs	r4, r4, #2
1a00513c:	2600      	movs	r6, #0
1a00513e:	42a6      	cmp	r6, r4
1a005140:	d105      	bne.n	1a00514e <__libc_init_array+0x2e>
1a005142:	bd70      	pop	{r4, r5, r6, pc}
1a005144:	f855 3b04 	ldr.w	r3, [r5], #4
1a005148:	4798      	blx	r3
1a00514a:	3601      	adds	r6, #1
1a00514c:	e7ee      	b.n	1a00512c <__libc_init_array+0xc>
1a00514e:	f855 3b04 	ldr.w	r3, [r5], #4
1a005152:	4798      	blx	r3
1a005154:	3601      	adds	r6, #1
1a005156:	e7f2      	b.n	1a00513e <__libc_init_array+0x1e>
1a005158:	1a006410 	.word	0x1a006410
1a00515c:	1a006410 	.word	0x1a006410
1a005160:	1a006410 	.word	0x1a006410
1a005164:	1a006414 	.word	0x1a006414

1a005168 <__retarget_lock_init_recursive>:
1a005168:	4770      	bx	lr

1a00516a <__retarget_lock_acquire_recursive>:
1a00516a:	4770      	bx	lr

1a00516c <__retarget_lock_release_recursive>:
1a00516c:	4770      	bx	lr

1a00516e <memcpy>:
1a00516e:	440a      	add	r2, r1
1a005170:	4291      	cmp	r1, r2
1a005172:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005176:	d100      	bne.n	1a00517a <memcpy+0xc>
1a005178:	4770      	bx	lr
1a00517a:	b510      	push	{r4, lr}
1a00517c:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005180:	f803 4f01 	strb.w	r4, [r3, #1]!
1a005184:	4291      	cmp	r1, r2
1a005186:	d1f9      	bne.n	1a00517c <memcpy+0xe>
1a005188:	bd10      	pop	{r4, pc}

1a00518a <memset>:
1a00518a:	4402      	add	r2, r0
1a00518c:	4603      	mov	r3, r0
1a00518e:	4293      	cmp	r3, r2
1a005190:	d100      	bne.n	1a005194 <memset+0xa>
1a005192:	4770      	bx	lr
1a005194:	f803 1b01 	strb.w	r1, [r3], #1
1a005198:	e7f9      	b.n	1a00518e <memset+0x4>
1a00519a:	Address 0x000000001a00519a is out of bounds.


1a00519c <_free_r>:
1a00519c:	b538      	push	{r3, r4, r5, lr}
1a00519e:	4605      	mov	r5, r0
1a0051a0:	2900      	cmp	r1, #0
1a0051a2:	d045      	beq.n	1a005230 <_free_r+0x94>
1a0051a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0051a8:	1f0c      	subs	r4, r1, #4
1a0051aa:	2b00      	cmp	r3, #0
1a0051ac:	bfb8      	it	lt
1a0051ae:	18e4      	addlt	r4, r4, r3
1a0051b0:	f000 fdce 	bl	1a005d50 <__malloc_lock>
1a0051b4:	4a1f      	ldr	r2, [pc, #124]	; (1a005234 <_free_r+0x98>)
1a0051b6:	6813      	ldr	r3, [r2, #0]
1a0051b8:	4610      	mov	r0, r2
1a0051ba:	b933      	cbnz	r3, 1a0051ca <_free_r+0x2e>
1a0051bc:	6063      	str	r3, [r4, #4]
1a0051be:	6014      	str	r4, [r2, #0]
1a0051c0:	4628      	mov	r0, r5
1a0051c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0051c6:	f000 bdc9 	b.w	1a005d5c <__malloc_unlock>
1a0051ca:	42a3      	cmp	r3, r4
1a0051cc:	d90c      	bls.n	1a0051e8 <_free_r+0x4c>
1a0051ce:	6821      	ldr	r1, [r4, #0]
1a0051d0:	1862      	adds	r2, r4, r1
1a0051d2:	4293      	cmp	r3, r2
1a0051d4:	bf04      	itt	eq
1a0051d6:	681a      	ldreq	r2, [r3, #0]
1a0051d8:	685b      	ldreq	r3, [r3, #4]
1a0051da:	6063      	str	r3, [r4, #4]
1a0051dc:	bf04      	itt	eq
1a0051de:	1852      	addeq	r2, r2, r1
1a0051e0:	6022      	streq	r2, [r4, #0]
1a0051e2:	6004      	str	r4, [r0, #0]
1a0051e4:	e7ec      	b.n	1a0051c0 <_free_r+0x24>
1a0051e6:	4613      	mov	r3, r2
1a0051e8:	685a      	ldr	r2, [r3, #4]
1a0051ea:	b10a      	cbz	r2, 1a0051f0 <_free_r+0x54>
1a0051ec:	42a2      	cmp	r2, r4
1a0051ee:	d9fa      	bls.n	1a0051e6 <_free_r+0x4a>
1a0051f0:	6819      	ldr	r1, [r3, #0]
1a0051f2:	1858      	adds	r0, r3, r1
1a0051f4:	42a0      	cmp	r0, r4
1a0051f6:	d10b      	bne.n	1a005210 <_free_r+0x74>
1a0051f8:	6820      	ldr	r0, [r4, #0]
1a0051fa:	4401      	add	r1, r0
1a0051fc:	1858      	adds	r0, r3, r1
1a0051fe:	4282      	cmp	r2, r0
1a005200:	6019      	str	r1, [r3, #0]
1a005202:	d1dd      	bne.n	1a0051c0 <_free_r+0x24>
1a005204:	6810      	ldr	r0, [r2, #0]
1a005206:	6852      	ldr	r2, [r2, #4]
1a005208:	605a      	str	r2, [r3, #4]
1a00520a:	4401      	add	r1, r0
1a00520c:	6019      	str	r1, [r3, #0]
1a00520e:	e7d7      	b.n	1a0051c0 <_free_r+0x24>
1a005210:	d902      	bls.n	1a005218 <_free_r+0x7c>
1a005212:	230c      	movs	r3, #12
1a005214:	602b      	str	r3, [r5, #0]
1a005216:	e7d3      	b.n	1a0051c0 <_free_r+0x24>
1a005218:	6820      	ldr	r0, [r4, #0]
1a00521a:	1821      	adds	r1, r4, r0
1a00521c:	428a      	cmp	r2, r1
1a00521e:	bf04      	itt	eq
1a005220:	6811      	ldreq	r1, [r2, #0]
1a005222:	6852      	ldreq	r2, [r2, #4]
1a005224:	6062      	str	r2, [r4, #4]
1a005226:	bf04      	itt	eq
1a005228:	1809      	addeq	r1, r1, r0
1a00522a:	6021      	streq	r1, [r4, #0]
1a00522c:	605c      	str	r4, [r3, #4]
1a00522e:	e7c7      	b.n	1a0051c0 <_free_r+0x24>
1a005230:	bd38      	pop	{r3, r4, r5, pc}
1a005232:	bf00      	nop
1a005234:	10002bc4 	.word	0x10002bc4

1a005238 <_malloc_r>:
1a005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00523a:	1ccd      	adds	r5, r1, #3
1a00523c:	f025 0503 	bic.w	r5, r5, #3
1a005240:	3508      	adds	r5, #8
1a005242:	2d0c      	cmp	r5, #12
1a005244:	bf38      	it	cc
1a005246:	250c      	movcc	r5, #12
1a005248:	2d00      	cmp	r5, #0
1a00524a:	4606      	mov	r6, r0
1a00524c:	db01      	blt.n	1a005252 <_malloc_r+0x1a>
1a00524e:	42a9      	cmp	r1, r5
1a005250:	d903      	bls.n	1a00525a <_malloc_r+0x22>
1a005252:	230c      	movs	r3, #12
1a005254:	6033      	str	r3, [r6, #0]
1a005256:	2000      	movs	r0, #0
1a005258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00525a:	f000 fd79 	bl	1a005d50 <__malloc_lock>
1a00525e:	4921      	ldr	r1, [pc, #132]	; (1a0052e4 <_malloc_r+0xac>)
1a005260:	680a      	ldr	r2, [r1, #0]
1a005262:	4614      	mov	r4, r2
1a005264:	b99c      	cbnz	r4, 1a00528e <_malloc_r+0x56>
1a005266:	4f20      	ldr	r7, [pc, #128]	; (1a0052e8 <_malloc_r+0xb0>)
1a005268:	683b      	ldr	r3, [r7, #0]
1a00526a:	b923      	cbnz	r3, 1a005276 <_malloc_r+0x3e>
1a00526c:	4621      	mov	r1, r4
1a00526e:	4630      	mov	r0, r6
1a005270:	f7fb fdf2 	bl	1a000e58 <_sbrk_r>
1a005274:	6038      	str	r0, [r7, #0]
1a005276:	4629      	mov	r1, r5
1a005278:	4630      	mov	r0, r6
1a00527a:	f7fb fded 	bl	1a000e58 <_sbrk_r>
1a00527e:	1c43      	adds	r3, r0, #1
1a005280:	d123      	bne.n	1a0052ca <_malloc_r+0x92>
1a005282:	230c      	movs	r3, #12
1a005284:	6033      	str	r3, [r6, #0]
1a005286:	4630      	mov	r0, r6
1a005288:	f000 fd68 	bl	1a005d5c <__malloc_unlock>
1a00528c:	e7e3      	b.n	1a005256 <_malloc_r+0x1e>
1a00528e:	6823      	ldr	r3, [r4, #0]
1a005290:	1b5b      	subs	r3, r3, r5
1a005292:	d417      	bmi.n	1a0052c4 <_malloc_r+0x8c>
1a005294:	2b0b      	cmp	r3, #11
1a005296:	d903      	bls.n	1a0052a0 <_malloc_r+0x68>
1a005298:	6023      	str	r3, [r4, #0]
1a00529a:	441c      	add	r4, r3
1a00529c:	6025      	str	r5, [r4, #0]
1a00529e:	e004      	b.n	1a0052aa <_malloc_r+0x72>
1a0052a0:	6863      	ldr	r3, [r4, #4]
1a0052a2:	42a2      	cmp	r2, r4
1a0052a4:	bf0c      	ite	eq
1a0052a6:	600b      	streq	r3, [r1, #0]
1a0052a8:	6053      	strne	r3, [r2, #4]
1a0052aa:	4630      	mov	r0, r6
1a0052ac:	f000 fd56 	bl	1a005d5c <__malloc_unlock>
1a0052b0:	f104 000b 	add.w	r0, r4, #11
1a0052b4:	1d23      	adds	r3, r4, #4
1a0052b6:	f020 0007 	bic.w	r0, r0, #7
1a0052ba:	1ac2      	subs	r2, r0, r3
1a0052bc:	d0cc      	beq.n	1a005258 <_malloc_r+0x20>
1a0052be:	1a1b      	subs	r3, r3, r0
1a0052c0:	50a3      	str	r3, [r4, r2]
1a0052c2:	e7c9      	b.n	1a005258 <_malloc_r+0x20>
1a0052c4:	4622      	mov	r2, r4
1a0052c6:	6864      	ldr	r4, [r4, #4]
1a0052c8:	e7cc      	b.n	1a005264 <_malloc_r+0x2c>
1a0052ca:	1cc4      	adds	r4, r0, #3
1a0052cc:	f024 0403 	bic.w	r4, r4, #3
1a0052d0:	42a0      	cmp	r0, r4
1a0052d2:	d0e3      	beq.n	1a00529c <_malloc_r+0x64>
1a0052d4:	1a21      	subs	r1, r4, r0
1a0052d6:	4630      	mov	r0, r6
1a0052d8:	f7fb fdbe 	bl	1a000e58 <_sbrk_r>
1a0052dc:	3001      	adds	r0, #1
1a0052de:	d1dd      	bne.n	1a00529c <_malloc_r+0x64>
1a0052e0:	e7cf      	b.n	1a005282 <_malloc_r+0x4a>
1a0052e2:	bf00      	nop
1a0052e4:	10002bc4 	.word	0x10002bc4
1a0052e8:	10002bc8 	.word	0x10002bc8

1a0052ec <__sfputc_r>:
1a0052ec:	6893      	ldr	r3, [r2, #8]
1a0052ee:	3b01      	subs	r3, #1
1a0052f0:	2b00      	cmp	r3, #0
1a0052f2:	b410      	push	{r4}
1a0052f4:	6093      	str	r3, [r2, #8]
1a0052f6:	da08      	bge.n	1a00530a <__sfputc_r+0x1e>
1a0052f8:	6994      	ldr	r4, [r2, #24]
1a0052fa:	42a3      	cmp	r3, r4
1a0052fc:	db01      	blt.n	1a005302 <__sfputc_r+0x16>
1a0052fe:	290a      	cmp	r1, #10
1a005300:	d103      	bne.n	1a00530a <__sfputc_r+0x1e>
1a005302:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005306:	f000 bbaf 	b.w	1a005a68 <__swbuf_r>
1a00530a:	6813      	ldr	r3, [r2, #0]
1a00530c:	1c58      	adds	r0, r3, #1
1a00530e:	6010      	str	r0, [r2, #0]
1a005310:	7019      	strb	r1, [r3, #0]
1a005312:	4608      	mov	r0, r1
1a005314:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005318:	4770      	bx	lr

1a00531a <__sfputs_r>:
1a00531a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00531c:	4606      	mov	r6, r0
1a00531e:	460f      	mov	r7, r1
1a005320:	4614      	mov	r4, r2
1a005322:	18d5      	adds	r5, r2, r3
1a005324:	42ac      	cmp	r4, r5
1a005326:	d101      	bne.n	1a00532c <__sfputs_r+0x12>
1a005328:	2000      	movs	r0, #0
1a00532a:	e007      	b.n	1a00533c <__sfputs_r+0x22>
1a00532c:	463a      	mov	r2, r7
1a00532e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a005332:	4630      	mov	r0, r6
1a005334:	f7ff ffda 	bl	1a0052ec <__sfputc_r>
1a005338:	1c43      	adds	r3, r0, #1
1a00533a:	d1f3      	bne.n	1a005324 <__sfputs_r+0xa>
1a00533c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00533e:	Address 0x000000001a00533e is out of bounds.


1a005340 <_vfiprintf_r>:
1a005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005344:	460d      	mov	r5, r1
1a005346:	b09d      	sub	sp, #116	; 0x74
1a005348:	4614      	mov	r4, r2
1a00534a:	461e      	mov	r6, r3
1a00534c:	4607      	mov	r7, r0
1a00534e:	b118      	cbz	r0, 1a005358 <_vfiprintf_r+0x18>
1a005350:	6983      	ldr	r3, [r0, #24]
1a005352:	b90b      	cbnz	r3, 1a005358 <_vfiprintf_r+0x18>
1a005354:	f7ff fe48 	bl	1a004fe8 <__sinit>
1a005358:	4b85      	ldr	r3, [pc, #532]	; (1a005570 <_vfiprintf_r+0x230>)
1a00535a:	429d      	cmp	r5, r3
1a00535c:	d11b      	bne.n	1a005396 <_vfiprintf_r+0x56>
1a00535e:	687d      	ldr	r5, [r7, #4]
1a005360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005362:	07d9      	lsls	r1, r3, #31
1a005364:	d405      	bmi.n	1a005372 <_vfiprintf_r+0x32>
1a005366:	89ab      	ldrh	r3, [r5, #12]
1a005368:	059a      	lsls	r2, r3, #22
1a00536a:	d402      	bmi.n	1a005372 <_vfiprintf_r+0x32>
1a00536c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00536e:	f7ff fefc 	bl	1a00516a <__retarget_lock_acquire_recursive>
1a005372:	89ab      	ldrh	r3, [r5, #12]
1a005374:	071b      	lsls	r3, r3, #28
1a005376:	d501      	bpl.n	1a00537c <_vfiprintf_r+0x3c>
1a005378:	692b      	ldr	r3, [r5, #16]
1a00537a:	b9eb      	cbnz	r3, 1a0053b8 <_vfiprintf_r+0x78>
1a00537c:	4629      	mov	r1, r5
1a00537e:	4638      	mov	r0, r7
1a005380:	f000 fbc4 	bl	1a005b0c <__swsetup_r>
1a005384:	b1c0      	cbz	r0, 1a0053b8 <_vfiprintf_r+0x78>
1a005386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005388:	07d8      	lsls	r0, r3, #31
1a00538a:	d50e      	bpl.n	1a0053aa <_vfiprintf_r+0x6a>
1a00538c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005390:	b01d      	add	sp, #116	; 0x74
1a005392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005396:	4b77      	ldr	r3, [pc, #476]	; (1a005574 <_vfiprintf_r+0x234>)
1a005398:	429d      	cmp	r5, r3
1a00539a:	d101      	bne.n	1a0053a0 <_vfiprintf_r+0x60>
1a00539c:	68bd      	ldr	r5, [r7, #8]
1a00539e:	e7df      	b.n	1a005360 <_vfiprintf_r+0x20>
1a0053a0:	4b75      	ldr	r3, [pc, #468]	; (1a005578 <_vfiprintf_r+0x238>)
1a0053a2:	429d      	cmp	r5, r3
1a0053a4:	bf08      	it	eq
1a0053a6:	68fd      	ldreq	r5, [r7, #12]
1a0053a8:	e7da      	b.n	1a005360 <_vfiprintf_r+0x20>
1a0053aa:	89ab      	ldrh	r3, [r5, #12]
1a0053ac:	0599      	lsls	r1, r3, #22
1a0053ae:	d4ed      	bmi.n	1a00538c <_vfiprintf_r+0x4c>
1a0053b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0053b2:	f7ff fedb 	bl	1a00516c <__retarget_lock_release_recursive>
1a0053b6:	e7e9      	b.n	1a00538c <_vfiprintf_r+0x4c>
1a0053b8:	2300      	movs	r3, #0
1a0053ba:	9309      	str	r3, [sp, #36]	; 0x24
1a0053bc:	2320      	movs	r3, #32
1a0053be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0053c2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a00557c <_vfiprintf_r+0x23c>
1a0053c6:	9603      	str	r6, [sp, #12]
1a0053c8:	2330      	movs	r3, #48	; 0x30
1a0053ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0053ce:	f04f 0a01 	mov.w	sl, #1
1a0053d2:	4623      	mov	r3, r4
1a0053d4:	461e      	mov	r6, r3
1a0053d6:	f813 2b01 	ldrb.w	r2, [r3], #1
1a0053da:	b10a      	cbz	r2, 1a0053e0 <_vfiprintf_r+0xa0>
1a0053dc:	2a25      	cmp	r2, #37	; 0x25
1a0053de:	d1f9      	bne.n	1a0053d4 <_vfiprintf_r+0x94>
1a0053e0:	ebb6 0b04 	subs.w	fp, r6, r4
1a0053e4:	d00b      	beq.n	1a0053fe <_vfiprintf_r+0xbe>
1a0053e6:	465b      	mov	r3, fp
1a0053e8:	4622      	mov	r2, r4
1a0053ea:	4629      	mov	r1, r5
1a0053ec:	4638      	mov	r0, r7
1a0053ee:	f7ff ff94 	bl	1a00531a <__sfputs_r>
1a0053f2:	3001      	adds	r0, #1
1a0053f4:	f000 80a3 	beq.w	1a00553e <_vfiprintf_r+0x1fe>
1a0053f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0053fa:	445b      	add	r3, fp
1a0053fc:	9309      	str	r3, [sp, #36]	; 0x24
1a0053fe:	7833      	ldrb	r3, [r6, #0]
1a005400:	2b00      	cmp	r3, #0
1a005402:	f000 809c 	beq.w	1a00553e <_vfiprintf_r+0x1fe>
1a005406:	2300      	movs	r3, #0
1a005408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00540c:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a005410:	3601      	adds	r6, #1
1a005412:	9304      	str	r3, [sp, #16]
1a005414:	9307      	str	r3, [sp, #28]
1a005416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00541a:	931a      	str	r3, [sp, #104]	; 0x68
1a00541c:	4634      	mov	r4, r6
1a00541e:	2205      	movs	r2, #5
1a005420:	f814 1b01 	ldrb.w	r1, [r4], #1
1a005424:	4855      	ldr	r0, [pc, #340]	; (1a00557c <_vfiprintf_r+0x23c>)
1a005426:	f000 fc43 	bl	1a005cb0 <memchr>
1a00542a:	9b04      	ldr	r3, [sp, #16]
1a00542c:	b9c0      	cbnz	r0, 1a005460 <_vfiprintf_r+0x120>
1a00542e:	06da      	lsls	r2, r3, #27
1a005430:	bf44      	itt	mi
1a005432:	2220      	movmi	r2, #32
1a005434:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005438:	0718      	lsls	r0, r3, #28
1a00543a:	bf44      	itt	mi
1a00543c:	222b      	movmi	r2, #43	; 0x2b
1a00543e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005442:	7832      	ldrb	r2, [r6, #0]
1a005444:	2a2a      	cmp	r2, #42	; 0x2a
1a005446:	d013      	beq.n	1a005470 <_vfiprintf_r+0x130>
1a005448:	9a07      	ldr	r2, [sp, #28]
1a00544a:	4634      	mov	r4, r6
1a00544c:	2000      	movs	r0, #0
1a00544e:	260a      	movs	r6, #10
1a005450:	4621      	mov	r1, r4
1a005452:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005456:	3b30      	subs	r3, #48	; 0x30
1a005458:	2b09      	cmp	r3, #9
1a00545a:	d94b      	bls.n	1a0054f4 <_vfiprintf_r+0x1b4>
1a00545c:	b970      	cbnz	r0, 1a00547c <_vfiprintf_r+0x13c>
1a00545e:	e014      	b.n	1a00548a <_vfiprintf_r+0x14a>
1a005460:	eba0 0009 	sub.w	r0, r0, r9
1a005464:	fa0a f000 	lsl.w	r0, sl, r0
1a005468:	4318      	orrs	r0, r3
1a00546a:	9004      	str	r0, [sp, #16]
1a00546c:	4626      	mov	r6, r4
1a00546e:	e7d5      	b.n	1a00541c <_vfiprintf_r+0xdc>
1a005470:	9a03      	ldr	r2, [sp, #12]
1a005472:	1d11      	adds	r1, r2, #4
1a005474:	6812      	ldr	r2, [r2, #0]
1a005476:	9103      	str	r1, [sp, #12]
1a005478:	2a00      	cmp	r2, #0
1a00547a:	db01      	blt.n	1a005480 <_vfiprintf_r+0x140>
1a00547c:	9207      	str	r2, [sp, #28]
1a00547e:	e004      	b.n	1a00548a <_vfiprintf_r+0x14a>
1a005480:	4252      	negs	r2, r2
1a005482:	f043 0302 	orr.w	r3, r3, #2
1a005486:	9207      	str	r2, [sp, #28]
1a005488:	9304      	str	r3, [sp, #16]
1a00548a:	7823      	ldrb	r3, [r4, #0]
1a00548c:	2b2e      	cmp	r3, #46	; 0x2e
1a00548e:	d10c      	bne.n	1a0054aa <_vfiprintf_r+0x16a>
1a005490:	7863      	ldrb	r3, [r4, #1]
1a005492:	2b2a      	cmp	r3, #42	; 0x2a
1a005494:	d133      	bne.n	1a0054fe <_vfiprintf_r+0x1be>
1a005496:	9b03      	ldr	r3, [sp, #12]
1a005498:	1d1a      	adds	r2, r3, #4
1a00549a:	681b      	ldr	r3, [r3, #0]
1a00549c:	9203      	str	r2, [sp, #12]
1a00549e:	2b00      	cmp	r3, #0
1a0054a0:	bfb8      	it	lt
1a0054a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a0054a6:	3402      	adds	r4, #2
1a0054a8:	9305      	str	r3, [sp, #20]
1a0054aa:	4e35      	ldr	r6, [pc, #212]	; (1a005580 <_vfiprintf_r+0x240>)
1a0054ac:	7821      	ldrb	r1, [r4, #0]
1a0054ae:	2203      	movs	r2, #3
1a0054b0:	4630      	mov	r0, r6
1a0054b2:	f000 fbfd 	bl	1a005cb0 <memchr>
1a0054b6:	b138      	cbz	r0, 1a0054c8 <_vfiprintf_r+0x188>
1a0054b8:	2340      	movs	r3, #64	; 0x40
1a0054ba:	1b80      	subs	r0, r0, r6
1a0054bc:	fa03 f000 	lsl.w	r0, r3, r0
1a0054c0:	9b04      	ldr	r3, [sp, #16]
1a0054c2:	4303      	orrs	r3, r0
1a0054c4:	3401      	adds	r4, #1
1a0054c6:	9304      	str	r3, [sp, #16]
1a0054c8:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0054cc:	482d      	ldr	r0, [pc, #180]	; (1a005584 <_vfiprintf_r+0x244>)
1a0054ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0054d2:	2206      	movs	r2, #6
1a0054d4:	f000 fbec 	bl	1a005cb0 <memchr>
1a0054d8:	2800      	cmp	r0, #0
1a0054da:	d03f      	beq.n	1a00555c <_vfiprintf_r+0x21c>
1a0054dc:	4b2a      	ldr	r3, [pc, #168]	; (1a005588 <_vfiprintf_r+0x248>)
1a0054de:	bb13      	cbnz	r3, 1a005526 <_vfiprintf_r+0x1e6>
1a0054e0:	9b03      	ldr	r3, [sp, #12]
1a0054e2:	3307      	adds	r3, #7
1a0054e4:	f023 0307 	bic.w	r3, r3, #7
1a0054e8:	3308      	adds	r3, #8
1a0054ea:	9303      	str	r3, [sp, #12]
1a0054ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0054ee:	4443      	add	r3, r8
1a0054f0:	9309      	str	r3, [sp, #36]	; 0x24
1a0054f2:	e76e      	b.n	1a0053d2 <_vfiprintf_r+0x92>
1a0054f4:	fb06 3202 	mla	r2, r6, r2, r3
1a0054f8:	2001      	movs	r0, #1
1a0054fa:	460c      	mov	r4, r1
1a0054fc:	e7a8      	b.n	1a005450 <_vfiprintf_r+0x110>
1a0054fe:	2300      	movs	r3, #0
1a005500:	3401      	adds	r4, #1
1a005502:	9305      	str	r3, [sp, #20]
1a005504:	4619      	mov	r1, r3
1a005506:	260a      	movs	r6, #10
1a005508:	4620      	mov	r0, r4
1a00550a:	f810 2b01 	ldrb.w	r2, [r0], #1
1a00550e:	3a30      	subs	r2, #48	; 0x30
1a005510:	2a09      	cmp	r2, #9
1a005512:	d903      	bls.n	1a00551c <_vfiprintf_r+0x1dc>
1a005514:	2b00      	cmp	r3, #0
1a005516:	d0c8      	beq.n	1a0054aa <_vfiprintf_r+0x16a>
1a005518:	9105      	str	r1, [sp, #20]
1a00551a:	e7c6      	b.n	1a0054aa <_vfiprintf_r+0x16a>
1a00551c:	fb06 2101 	mla	r1, r6, r1, r2
1a005520:	2301      	movs	r3, #1
1a005522:	4604      	mov	r4, r0
1a005524:	e7f0      	b.n	1a005508 <_vfiprintf_r+0x1c8>
1a005526:	ab03      	add	r3, sp, #12
1a005528:	9300      	str	r3, [sp, #0]
1a00552a:	462a      	mov	r2, r5
1a00552c:	4b17      	ldr	r3, [pc, #92]	; (1a00558c <_vfiprintf_r+0x24c>)
1a00552e:	a904      	add	r1, sp, #16
1a005530:	4638      	mov	r0, r7
1a005532:	f3af 8000 	nop.w
1a005536:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00553a:	4680      	mov	r8, r0
1a00553c:	d1d6      	bne.n	1a0054ec <_vfiprintf_r+0x1ac>
1a00553e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005540:	07d9      	lsls	r1, r3, #31
1a005542:	d405      	bmi.n	1a005550 <_vfiprintf_r+0x210>
1a005544:	89ab      	ldrh	r3, [r5, #12]
1a005546:	059a      	lsls	r2, r3, #22
1a005548:	d402      	bmi.n	1a005550 <_vfiprintf_r+0x210>
1a00554a:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00554c:	f7ff fe0e 	bl	1a00516c <__retarget_lock_release_recursive>
1a005550:	89ab      	ldrh	r3, [r5, #12]
1a005552:	065b      	lsls	r3, r3, #25
1a005554:	f53f af1a 	bmi.w	1a00538c <_vfiprintf_r+0x4c>
1a005558:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00555a:	e719      	b.n	1a005390 <_vfiprintf_r+0x50>
1a00555c:	ab03      	add	r3, sp, #12
1a00555e:	9300      	str	r3, [sp, #0]
1a005560:	462a      	mov	r2, r5
1a005562:	4b0a      	ldr	r3, [pc, #40]	; (1a00558c <_vfiprintf_r+0x24c>)
1a005564:	a904      	add	r1, sp, #16
1a005566:	4638      	mov	r0, r7
1a005568:	f000 f888 	bl	1a00567c <_printf_i>
1a00556c:	e7e3      	b.n	1a005536 <_vfiprintf_r+0x1f6>
1a00556e:	bf00      	nop
1a005570:	1a006398 	.word	0x1a006398
1a005574:	1a0063b8 	.word	0x1a0063b8
1a005578:	1a006378 	.word	0x1a006378
1a00557c:	1a0063dc 	.word	0x1a0063dc
1a005580:	1a0063e2 	.word	0x1a0063e2
1a005584:	1a0063e6 	.word	0x1a0063e6
1a005588:	00000000 	.word	0x00000000
1a00558c:	1a00531b 	.word	0x1a00531b

1a005590 <_printf_common>:
1a005590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005594:	4691      	mov	r9, r2
1a005596:	461f      	mov	r7, r3
1a005598:	688a      	ldr	r2, [r1, #8]
1a00559a:	690b      	ldr	r3, [r1, #16]
1a00559c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0055a0:	4293      	cmp	r3, r2
1a0055a2:	bfb8      	it	lt
1a0055a4:	4613      	movlt	r3, r2
1a0055a6:	f8c9 3000 	str.w	r3, [r9]
1a0055aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0055ae:	4606      	mov	r6, r0
1a0055b0:	460c      	mov	r4, r1
1a0055b2:	b112      	cbz	r2, 1a0055ba <_printf_common+0x2a>
1a0055b4:	3301      	adds	r3, #1
1a0055b6:	f8c9 3000 	str.w	r3, [r9]
1a0055ba:	6823      	ldr	r3, [r4, #0]
1a0055bc:	0699      	lsls	r1, r3, #26
1a0055be:	bf42      	ittt	mi
1a0055c0:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0055c4:	3302      	addmi	r3, #2
1a0055c6:	f8c9 3000 	strmi.w	r3, [r9]
1a0055ca:	6825      	ldr	r5, [r4, #0]
1a0055cc:	f015 0506 	ands.w	r5, r5, #6
1a0055d0:	d107      	bne.n	1a0055e2 <_printf_common+0x52>
1a0055d2:	f104 0a19 	add.w	sl, r4, #25
1a0055d6:	68e3      	ldr	r3, [r4, #12]
1a0055d8:	f8d9 2000 	ldr.w	r2, [r9]
1a0055dc:	1a9b      	subs	r3, r3, r2
1a0055de:	42ab      	cmp	r3, r5
1a0055e0:	dc28      	bgt.n	1a005634 <_printf_common+0xa4>
1a0055e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0055e6:	6822      	ldr	r2, [r4, #0]
1a0055e8:	3300      	adds	r3, #0
1a0055ea:	bf18      	it	ne
1a0055ec:	2301      	movne	r3, #1
1a0055ee:	0692      	lsls	r2, r2, #26
1a0055f0:	d42d      	bmi.n	1a00564e <_printf_common+0xbe>
1a0055f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0055f6:	4639      	mov	r1, r7
1a0055f8:	4630      	mov	r0, r6
1a0055fa:	47c0      	blx	r8
1a0055fc:	3001      	adds	r0, #1
1a0055fe:	d020      	beq.n	1a005642 <_printf_common+0xb2>
1a005600:	6823      	ldr	r3, [r4, #0]
1a005602:	68e5      	ldr	r5, [r4, #12]
1a005604:	f8d9 2000 	ldr.w	r2, [r9]
1a005608:	f003 0306 	and.w	r3, r3, #6
1a00560c:	2b04      	cmp	r3, #4
1a00560e:	bf08      	it	eq
1a005610:	1aad      	subeq	r5, r5, r2
1a005612:	68a3      	ldr	r3, [r4, #8]
1a005614:	6922      	ldr	r2, [r4, #16]
1a005616:	bf0c      	ite	eq
1a005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a00561c:	2500      	movne	r5, #0
1a00561e:	4293      	cmp	r3, r2
1a005620:	bfc4      	itt	gt
1a005622:	1a9b      	subgt	r3, r3, r2
1a005624:	18ed      	addgt	r5, r5, r3
1a005626:	f04f 0900 	mov.w	r9, #0
1a00562a:	341a      	adds	r4, #26
1a00562c:	454d      	cmp	r5, r9
1a00562e:	d11a      	bne.n	1a005666 <_printf_common+0xd6>
1a005630:	2000      	movs	r0, #0
1a005632:	e008      	b.n	1a005646 <_printf_common+0xb6>
1a005634:	2301      	movs	r3, #1
1a005636:	4652      	mov	r2, sl
1a005638:	4639      	mov	r1, r7
1a00563a:	4630      	mov	r0, r6
1a00563c:	47c0      	blx	r8
1a00563e:	3001      	adds	r0, #1
1a005640:	d103      	bne.n	1a00564a <_printf_common+0xba>
1a005642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00564a:	3501      	adds	r5, #1
1a00564c:	e7c3      	b.n	1a0055d6 <_printf_common+0x46>
1a00564e:	18e1      	adds	r1, r4, r3
1a005650:	1c5a      	adds	r2, r3, #1
1a005652:	2030      	movs	r0, #48	; 0x30
1a005654:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a005658:	4422      	add	r2, r4
1a00565a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00565e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a005662:	3302      	adds	r3, #2
1a005664:	e7c5      	b.n	1a0055f2 <_printf_common+0x62>
1a005666:	2301      	movs	r3, #1
1a005668:	4622      	mov	r2, r4
1a00566a:	4639      	mov	r1, r7
1a00566c:	4630      	mov	r0, r6
1a00566e:	47c0      	blx	r8
1a005670:	3001      	adds	r0, #1
1a005672:	d0e6      	beq.n	1a005642 <_printf_common+0xb2>
1a005674:	f109 0901 	add.w	r9, r9, #1
1a005678:	e7d8      	b.n	1a00562c <_printf_common+0x9c>
1a00567a:	Address 0x000000001a00567a is out of bounds.


1a00567c <_printf_i>:
1a00567c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a005680:	4606      	mov	r6, r0
1a005682:	460c      	mov	r4, r1
1a005684:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a005688:	7e09      	ldrb	r1, [r1, #24]
1a00568a:	b085      	sub	sp, #20
1a00568c:	296e      	cmp	r1, #110	; 0x6e
1a00568e:	4698      	mov	r8, r3
1a005690:	4617      	mov	r7, r2
1a005692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005694:	f000 80ba 	beq.w	1a00580c <_printf_i+0x190>
1a005698:	d824      	bhi.n	1a0056e4 <_printf_i+0x68>
1a00569a:	2963      	cmp	r1, #99	; 0x63
1a00569c:	d039      	beq.n	1a005712 <_printf_i+0x96>
1a00569e:	d80a      	bhi.n	1a0056b6 <_printf_i+0x3a>
1a0056a0:	2900      	cmp	r1, #0
1a0056a2:	f000 80c3 	beq.w	1a00582c <_printf_i+0x1b0>
1a0056a6:	2958      	cmp	r1, #88	; 0x58
1a0056a8:	f000 8091 	beq.w	1a0057ce <_printf_i+0x152>
1a0056ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0056b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0056b4:	e035      	b.n	1a005722 <_printf_i+0xa6>
1a0056b6:	2964      	cmp	r1, #100	; 0x64
1a0056b8:	d001      	beq.n	1a0056be <_printf_i+0x42>
1a0056ba:	2969      	cmp	r1, #105	; 0x69
1a0056bc:	d1f6      	bne.n	1a0056ac <_printf_i+0x30>
1a0056be:	6825      	ldr	r5, [r4, #0]
1a0056c0:	681a      	ldr	r2, [r3, #0]
1a0056c2:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0056c6:	f102 0104 	add.w	r1, r2, #4
1a0056ca:	d02c      	beq.n	1a005726 <_printf_i+0xaa>
1a0056cc:	6812      	ldr	r2, [r2, #0]
1a0056ce:	6019      	str	r1, [r3, #0]
1a0056d0:	2a00      	cmp	r2, #0
1a0056d2:	da03      	bge.n	1a0056dc <_printf_i+0x60>
1a0056d4:	232d      	movs	r3, #45	; 0x2d
1a0056d6:	4252      	negs	r2, r2
1a0056d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0056dc:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a00589c <_printf_i+0x220>
1a0056e0:	230a      	movs	r3, #10
1a0056e2:	e03f      	b.n	1a005764 <_printf_i+0xe8>
1a0056e4:	2973      	cmp	r1, #115	; 0x73
1a0056e6:	f000 80a5 	beq.w	1a005834 <_printf_i+0x1b8>
1a0056ea:	d808      	bhi.n	1a0056fe <_printf_i+0x82>
1a0056ec:	296f      	cmp	r1, #111	; 0x6f
1a0056ee:	d021      	beq.n	1a005734 <_printf_i+0xb8>
1a0056f0:	2970      	cmp	r1, #112	; 0x70
1a0056f2:	d1db      	bne.n	1a0056ac <_printf_i+0x30>
1a0056f4:	6822      	ldr	r2, [r4, #0]
1a0056f6:	f042 0220 	orr.w	r2, r2, #32
1a0056fa:	6022      	str	r2, [r4, #0]
1a0056fc:	e003      	b.n	1a005706 <_printf_i+0x8a>
1a0056fe:	2975      	cmp	r1, #117	; 0x75
1a005700:	d018      	beq.n	1a005734 <_printf_i+0xb8>
1a005702:	2978      	cmp	r1, #120	; 0x78
1a005704:	d1d2      	bne.n	1a0056ac <_printf_i+0x30>
1a005706:	2278      	movs	r2, #120	; 0x78
1a005708:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a00570c:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0058a0 <_printf_i+0x224>
1a005710:	e061      	b.n	1a0057d6 <_printf_i+0x15a>
1a005712:	681a      	ldr	r2, [r3, #0]
1a005714:	1d11      	adds	r1, r2, #4
1a005716:	6019      	str	r1, [r3, #0]
1a005718:	6813      	ldr	r3, [r2, #0]
1a00571a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00571e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005722:	2301      	movs	r3, #1
1a005724:	e093      	b.n	1a00584e <_printf_i+0x1d2>
1a005726:	6812      	ldr	r2, [r2, #0]
1a005728:	6019      	str	r1, [r3, #0]
1a00572a:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00572e:	bf18      	it	ne
1a005730:	b212      	sxthne	r2, r2
1a005732:	e7cd      	b.n	1a0056d0 <_printf_i+0x54>
1a005734:	f8d4 c000 	ldr.w	ip, [r4]
1a005738:	681a      	ldr	r2, [r3, #0]
1a00573a:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00573e:	f102 0504 	add.w	r5, r2, #4
1a005742:	601d      	str	r5, [r3, #0]
1a005744:	d001      	beq.n	1a00574a <_printf_i+0xce>
1a005746:	6812      	ldr	r2, [r2, #0]
1a005748:	e003      	b.n	1a005752 <_printf_i+0xd6>
1a00574a:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00574e:	d0fa      	beq.n	1a005746 <_printf_i+0xca>
1a005750:	8812      	ldrh	r2, [r2, #0]
1a005752:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a00589c <_printf_i+0x220>
1a005756:	296f      	cmp	r1, #111	; 0x6f
1a005758:	bf0c      	ite	eq
1a00575a:	2308      	moveq	r3, #8
1a00575c:	230a      	movne	r3, #10
1a00575e:	2100      	movs	r1, #0
1a005760:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a005764:	6865      	ldr	r5, [r4, #4]
1a005766:	60a5      	str	r5, [r4, #8]
1a005768:	2d00      	cmp	r5, #0
1a00576a:	bfa2      	ittt	ge
1a00576c:	6821      	ldrge	r1, [r4, #0]
1a00576e:	f021 0104 	bicge.w	r1, r1, #4
1a005772:	6021      	strge	r1, [r4, #0]
1a005774:	b90a      	cbnz	r2, 1a00577a <_printf_i+0xfe>
1a005776:	2d00      	cmp	r5, #0
1a005778:	d046      	beq.n	1a005808 <_printf_i+0x18c>
1a00577a:	4605      	mov	r5, r0
1a00577c:	fbb2 f1f3 	udiv	r1, r2, r3
1a005780:	fb03 2e11 	mls	lr, r3, r1, r2
1a005784:	4293      	cmp	r3, r2
1a005786:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a00578a:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a00578e:	d939      	bls.n	1a005804 <_printf_i+0x188>
1a005790:	2b08      	cmp	r3, #8
1a005792:	d10b      	bne.n	1a0057ac <_printf_i+0x130>
1a005794:	6823      	ldr	r3, [r4, #0]
1a005796:	07da      	lsls	r2, r3, #31
1a005798:	d508      	bpl.n	1a0057ac <_printf_i+0x130>
1a00579a:	6923      	ldr	r3, [r4, #16]
1a00579c:	6862      	ldr	r2, [r4, #4]
1a00579e:	429a      	cmp	r2, r3
1a0057a0:	bfde      	ittt	le
1a0057a2:	2330      	movle	r3, #48	; 0x30
1a0057a4:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0057a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0057ac:	1b40      	subs	r0, r0, r5
1a0057ae:	6120      	str	r0, [r4, #16]
1a0057b0:	f8cd 8000 	str.w	r8, [sp]
1a0057b4:	463b      	mov	r3, r7
1a0057b6:	aa03      	add	r2, sp, #12
1a0057b8:	4621      	mov	r1, r4
1a0057ba:	4630      	mov	r0, r6
1a0057bc:	f7ff fee8 	bl	1a005590 <_printf_common>
1a0057c0:	3001      	adds	r0, #1
1a0057c2:	d149      	bne.n	1a005858 <_printf_i+0x1dc>
1a0057c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0057c8:	b005      	add	sp, #20
1a0057ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0057ce:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a00589c <_printf_i+0x220>
1a0057d2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0057d6:	681d      	ldr	r5, [r3, #0]
1a0057d8:	6821      	ldr	r1, [r4, #0]
1a0057da:	f855 2b04 	ldr.w	r2, [r5], #4
1a0057de:	601d      	str	r5, [r3, #0]
1a0057e0:	060d      	lsls	r5, r1, #24
1a0057e2:	d50b      	bpl.n	1a0057fc <_printf_i+0x180>
1a0057e4:	07cd      	lsls	r5, r1, #31
1a0057e6:	bf44      	itt	mi
1a0057e8:	f041 0120 	orrmi.w	r1, r1, #32
1a0057ec:	6021      	strmi	r1, [r4, #0]
1a0057ee:	b91a      	cbnz	r2, 1a0057f8 <_printf_i+0x17c>
1a0057f0:	6823      	ldr	r3, [r4, #0]
1a0057f2:	f023 0320 	bic.w	r3, r3, #32
1a0057f6:	6023      	str	r3, [r4, #0]
1a0057f8:	2310      	movs	r3, #16
1a0057fa:	e7b0      	b.n	1a00575e <_printf_i+0xe2>
1a0057fc:	064b      	lsls	r3, r1, #25
1a0057fe:	bf48      	it	mi
1a005800:	b292      	uxthmi	r2, r2
1a005802:	e7ef      	b.n	1a0057e4 <_printf_i+0x168>
1a005804:	460a      	mov	r2, r1
1a005806:	e7b9      	b.n	1a00577c <_printf_i+0x100>
1a005808:	4605      	mov	r5, r0
1a00580a:	e7c1      	b.n	1a005790 <_printf_i+0x114>
1a00580c:	681a      	ldr	r2, [r3, #0]
1a00580e:	f8d4 c000 	ldr.w	ip, [r4]
1a005812:	6961      	ldr	r1, [r4, #20]
1a005814:	1d15      	adds	r5, r2, #4
1a005816:	601d      	str	r5, [r3, #0]
1a005818:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00581c:	6813      	ldr	r3, [r2, #0]
1a00581e:	d001      	beq.n	1a005824 <_printf_i+0x1a8>
1a005820:	6019      	str	r1, [r3, #0]
1a005822:	e003      	b.n	1a00582c <_printf_i+0x1b0>
1a005824:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a005828:	d0fa      	beq.n	1a005820 <_printf_i+0x1a4>
1a00582a:	8019      	strh	r1, [r3, #0]
1a00582c:	2300      	movs	r3, #0
1a00582e:	6123      	str	r3, [r4, #16]
1a005830:	4605      	mov	r5, r0
1a005832:	e7bd      	b.n	1a0057b0 <_printf_i+0x134>
1a005834:	681a      	ldr	r2, [r3, #0]
1a005836:	1d11      	adds	r1, r2, #4
1a005838:	6019      	str	r1, [r3, #0]
1a00583a:	6815      	ldr	r5, [r2, #0]
1a00583c:	6862      	ldr	r2, [r4, #4]
1a00583e:	2100      	movs	r1, #0
1a005840:	4628      	mov	r0, r5
1a005842:	f000 fa35 	bl	1a005cb0 <memchr>
1a005846:	b108      	cbz	r0, 1a00584c <_printf_i+0x1d0>
1a005848:	1b40      	subs	r0, r0, r5
1a00584a:	6060      	str	r0, [r4, #4]
1a00584c:	6863      	ldr	r3, [r4, #4]
1a00584e:	6123      	str	r3, [r4, #16]
1a005850:	2300      	movs	r3, #0
1a005852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a005856:	e7ab      	b.n	1a0057b0 <_printf_i+0x134>
1a005858:	6923      	ldr	r3, [r4, #16]
1a00585a:	462a      	mov	r2, r5
1a00585c:	4639      	mov	r1, r7
1a00585e:	4630      	mov	r0, r6
1a005860:	47c0      	blx	r8
1a005862:	3001      	adds	r0, #1
1a005864:	d0ae      	beq.n	1a0057c4 <_printf_i+0x148>
1a005866:	6823      	ldr	r3, [r4, #0]
1a005868:	079b      	lsls	r3, r3, #30
1a00586a:	d413      	bmi.n	1a005894 <_printf_i+0x218>
1a00586c:	68e0      	ldr	r0, [r4, #12]
1a00586e:	9b03      	ldr	r3, [sp, #12]
1a005870:	4298      	cmp	r0, r3
1a005872:	bfb8      	it	lt
1a005874:	4618      	movlt	r0, r3
1a005876:	e7a7      	b.n	1a0057c8 <_printf_i+0x14c>
1a005878:	2301      	movs	r3, #1
1a00587a:	464a      	mov	r2, r9
1a00587c:	4639      	mov	r1, r7
1a00587e:	4630      	mov	r0, r6
1a005880:	47c0      	blx	r8
1a005882:	3001      	adds	r0, #1
1a005884:	d09e      	beq.n	1a0057c4 <_printf_i+0x148>
1a005886:	3501      	adds	r5, #1
1a005888:	68e3      	ldr	r3, [r4, #12]
1a00588a:	9a03      	ldr	r2, [sp, #12]
1a00588c:	1a9b      	subs	r3, r3, r2
1a00588e:	42ab      	cmp	r3, r5
1a005890:	dcf2      	bgt.n	1a005878 <_printf_i+0x1fc>
1a005892:	e7eb      	b.n	1a00586c <_printf_i+0x1f0>
1a005894:	2500      	movs	r5, #0
1a005896:	f104 0919 	add.w	r9, r4, #25
1a00589a:	e7f5      	b.n	1a005888 <_printf_i+0x20c>
1a00589c:	1a0063ed 	.word	0x1a0063ed
1a0058a0:	1a0063fe 	.word	0x1a0063fe

1a0058a4 <iprintf>:
1a0058a4:	b40f      	push	{r0, r1, r2, r3}
1a0058a6:	4b0a      	ldr	r3, [pc, #40]	; (1a0058d0 <iprintf+0x2c>)
1a0058a8:	b513      	push	{r0, r1, r4, lr}
1a0058aa:	681c      	ldr	r4, [r3, #0]
1a0058ac:	b124      	cbz	r4, 1a0058b8 <iprintf+0x14>
1a0058ae:	69a3      	ldr	r3, [r4, #24]
1a0058b0:	b913      	cbnz	r3, 1a0058b8 <iprintf+0x14>
1a0058b2:	4620      	mov	r0, r4
1a0058b4:	f7ff fb98 	bl	1a004fe8 <__sinit>
1a0058b8:	ab05      	add	r3, sp, #20
1a0058ba:	9a04      	ldr	r2, [sp, #16]
1a0058bc:	68a1      	ldr	r1, [r4, #8]
1a0058be:	9301      	str	r3, [sp, #4]
1a0058c0:	4620      	mov	r0, r4
1a0058c2:	f7ff fd3d 	bl	1a005340 <_vfiprintf_r>
1a0058c6:	b002      	add	sp, #8
1a0058c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0058cc:	b004      	add	sp, #16
1a0058ce:	4770      	bx	lr
1a0058d0:	100000e4 	.word	0x100000e4

1a0058d4 <_puts_r>:
1a0058d4:	b570      	push	{r4, r5, r6, lr}
1a0058d6:	460e      	mov	r6, r1
1a0058d8:	4605      	mov	r5, r0
1a0058da:	b118      	cbz	r0, 1a0058e4 <_puts_r+0x10>
1a0058dc:	6983      	ldr	r3, [r0, #24]
1a0058de:	b90b      	cbnz	r3, 1a0058e4 <_puts_r+0x10>
1a0058e0:	f7ff fb82 	bl	1a004fe8 <__sinit>
1a0058e4:	69ab      	ldr	r3, [r5, #24]
1a0058e6:	68ac      	ldr	r4, [r5, #8]
1a0058e8:	b913      	cbnz	r3, 1a0058f0 <_puts_r+0x1c>
1a0058ea:	4628      	mov	r0, r5
1a0058ec:	f7ff fb7c 	bl	1a004fe8 <__sinit>
1a0058f0:	4b2c      	ldr	r3, [pc, #176]	; (1a0059a4 <_puts_r+0xd0>)
1a0058f2:	429c      	cmp	r4, r3
1a0058f4:	d120      	bne.n	1a005938 <_puts_r+0x64>
1a0058f6:	686c      	ldr	r4, [r5, #4]
1a0058f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0058fa:	07db      	lsls	r3, r3, #31
1a0058fc:	d405      	bmi.n	1a00590a <_puts_r+0x36>
1a0058fe:	89a3      	ldrh	r3, [r4, #12]
1a005900:	0598      	lsls	r0, r3, #22
1a005902:	d402      	bmi.n	1a00590a <_puts_r+0x36>
1a005904:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005906:	f7ff fc30 	bl	1a00516a <__retarget_lock_acquire_recursive>
1a00590a:	89a3      	ldrh	r3, [r4, #12]
1a00590c:	0719      	lsls	r1, r3, #28
1a00590e:	d51d      	bpl.n	1a00594c <_puts_r+0x78>
1a005910:	6923      	ldr	r3, [r4, #16]
1a005912:	b1db      	cbz	r3, 1a00594c <_puts_r+0x78>
1a005914:	3e01      	subs	r6, #1
1a005916:	68a3      	ldr	r3, [r4, #8]
1a005918:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a00591c:	3b01      	subs	r3, #1
1a00591e:	60a3      	str	r3, [r4, #8]
1a005920:	bb39      	cbnz	r1, 1a005972 <_puts_r+0x9e>
1a005922:	2b00      	cmp	r3, #0
1a005924:	da38      	bge.n	1a005998 <_puts_r+0xc4>
1a005926:	4622      	mov	r2, r4
1a005928:	210a      	movs	r1, #10
1a00592a:	4628      	mov	r0, r5
1a00592c:	f000 f89c 	bl	1a005a68 <__swbuf_r>
1a005930:	3001      	adds	r0, #1
1a005932:	d011      	beq.n	1a005958 <_puts_r+0x84>
1a005934:	250a      	movs	r5, #10
1a005936:	e011      	b.n	1a00595c <_puts_r+0x88>
1a005938:	4b1b      	ldr	r3, [pc, #108]	; (1a0059a8 <_puts_r+0xd4>)
1a00593a:	429c      	cmp	r4, r3
1a00593c:	d101      	bne.n	1a005942 <_puts_r+0x6e>
1a00593e:	68ac      	ldr	r4, [r5, #8]
1a005940:	e7da      	b.n	1a0058f8 <_puts_r+0x24>
1a005942:	4b1a      	ldr	r3, [pc, #104]	; (1a0059ac <_puts_r+0xd8>)
1a005944:	429c      	cmp	r4, r3
1a005946:	bf08      	it	eq
1a005948:	68ec      	ldreq	r4, [r5, #12]
1a00594a:	e7d5      	b.n	1a0058f8 <_puts_r+0x24>
1a00594c:	4621      	mov	r1, r4
1a00594e:	4628      	mov	r0, r5
1a005950:	f000 f8dc 	bl	1a005b0c <__swsetup_r>
1a005954:	2800      	cmp	r0, #0
1a005956:	d0dd      	beq.n	1a005914 <_puts_r+0x40>
1a005958:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a00595c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00595e:	07da      	lsls	r2, r3, #31
1a005960:	d405      	bmi.n	1a00596e <_puts_r+0x9a>
1a005962:	89a3      	ldrh	r3, [r4, #12]
1a005964:	059b      	lsls	r3, r3, #22
1a005966:	d402      	bmi.n	1a00596e <_puts_r+0x9a>
1a005968:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00596a:	f7ff fbff 	bl	1a00516c <__retarget_lock_release_recursive>
1a00596e:	4628      	mov	r0, r5
1a005970:	bd70      	pop	{r4, r5, r6, pc}
1a005972:	2b00      	cmp	r3, #0
1a005974:	da04      	bge.n	1a005980 <_puts_r+0xac>
1a005976:	69a2      	ldr	r2, [r4, #24]
1a005978:	429a      	cmp	r2, r3
1a00597a:	dc06      	bgt.n	1a00598a <_puts_r+0xb6>
1a00597c:	290a      	cmp	r1, #10
1a00597e:	d004      	beq.n	1a00598a <_puts_r+0xb6>
1a005980:	6823      	ldr	r3, [r4, #0]
1a005982:	1c5a      	adds	r2, r3, #1
1a005984:	6022      	str	r2, [r4, #0]
1a005986:	7019      	strb	r1, [r3, #0]
1a005988:	e7c5      	b.n	1a005916 <_puts_r+0x42>
1a00598a:	4622      	mov	r2, r4
1a00598c:	4628      	mov	r0, r5
1a00598e:	f000 f86b 	bl	1a005a68 <__swbuf_r>
1a005992:	3001      	adds	r0, #1
1a005994:	d1bf      	bne.n	1a005916 <_puts_r+0x42>
1a005996:	e7df      	b.n	1a005958 <_puts_r+0x84>
1a005998:	6823      	ldr	r3, [r4, #0]
1a00599a:	250a      	movs	r5, #10
1a00599c:	1c5a      	adds	r2, r3, #1
1a00599e:	6022      	str	r2, [r4, #0]
1a0059a0:	701d      	strb	r5, [r3, #0]
1a0059a2:	e7db      	b.n	1a00595c <_puts_r+0x88>
1a0059a4:	1a006398 	.word	0x1a006398
1a0059a8:	1a0063b8 	.word	0x1a0063b8
1a0059ac:	1a006378 	.word	0x1a006378

1a0059b0 <puts>:
1a0059b0:	4b02      	ldr	r3, [pc, #8]	; (1a0059bc <puts+0xc>)
1a0059b2:	4601      	mov	r1, r0
1a0059b4:	6818      	ldr	r0, [r3, #0]
1a0059b6:	f7ff bf8d 	b.w	1a0058d4 <_puts_r>
1a0059ba:	bf00      	nop
1a0059bc:	100000e4 	.word	0x100000e4

1a0059c0 <__sread>:
1a0059c0:	b510      	push	{r4, lr}
1a0059c2:	460c      	mov	r4, r1
1a0059c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0059c8:	f7fb fa0a 	bl	1a000de0 <_read_r>
1a0059cc:	2800      	cmp	r0, #0
1a0059ce:	bfab      	itete	ge
1a0059d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0059d2:	89a3      	ldrhlt	r3, [r4, #12]
1a0059d4:	181b      	addge	r3, r3, r0
1a0059d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0059da:	bfac      	ite	ge
1a0059dc:	6563      	strge	r3, [r4, #84]	; 0x54
1a0059de:	81a3      	strhlt	r3, [r4, #12]
1a0059e0:	bd10      	pop	{r4, pc}

1a0059e2 <__swrite>:
1a0059e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0059e6:	461f      	mov	r7, r3
1a0059e8:	898b      	ldrh	r3, [r1, #12]
1a0059ea:	05db      	lsls	r3, r3, #23
1a0059ec:	4605      	mov	r5, r0
1a0059ee:	460c      	mov	r4, r1
1a0059f0:	4616      	mov	r6, r2
1a0059f2:	d505      	bpl.n	1a005a00 <__swrite+0x1e>
1a0059f4:	2302      	movs	r3, #2
1a0059f6:	2200      	movs	r2, #0
1a0059f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0059fc:	f7fb f9eb 	bl	1a000dd6 <_lseek_r>
1a005a00:	89a3      	ldrh	r3, [r4, #12]
1a005a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a005a0a:	81a3      	strh	r3, [r4, #12]
1a005a0c:	4632      	mov	r2, r6
1a005a0e:	463b      	mov	r3, r7
1a005a10:	4628      	mov	r0, r5
1a005a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a005a16:	f7fb ba0a 	b.w	1a000e2e <_write_r>

1a005a1a <__sseek>:
1a005a1a:	b510      	push	{r4, lr}
1a005a1c:	460c      	mov	r4, r1
1a005a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005a22:	f7fb f9d8 	bl	1a000dd6 <_lseek_r>
1a005a26:	1c43      	adds	r3, r0, #1
1a005a28:	89a3      	ldrh	r3, [r4, #12]
1a005a2a:	bf15      	itete	ne
1a005a2c:	6560      	strne	r0, [r4, #84]	; 0x54
1a005a2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a005a32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a005a36:	81a3      	strheq	r3, [r4, #12]
1a005a38:	bf18      	it	ne
1a005a3a:	81a3      	strhne	r3, [r4, #12]
1a005a3c:	bd10      	pop	{r4, pc}

1a005a3e <__sclose>:
1a005a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005a42:	f7fb b9b5 	b.w	1a000db0 <_close_r>

1a005a46 <strcat>:
1a005a46:	b510      	push	{r4, lr}
1a005a48:	4603      	mov	r3, r0
1a005a4a:	461a      	mov	r2, r3
1a005a4c:	f812 4b01 	ldrb.w	r4, [r2], #1
1a005a50:	b93c      	cbnz	r4, 1a005a62 <strcat+0x1c>
1a005a52:	3b01      	subs	r3, #1
1a005a54:	f811 2b01 	ldrb.w	r2, [r1], #1
1a005a58:	f803 2f01 	strb.w	r2, [r3, #1]!
1a005a5c:	2a00      	cmp	r2, #0
1a005a5e:	d1f9      	bne.n	1a005a54 <strcat+0xe>
1a005a60:	bd10      	pop	{r4, pc}
1a005a62:	4613      	mov	r3, r2
1a005a64:	e7f1      	b.n	1a005a4a <strcat+0x4>
1a005a66:	Address 0x000000001a005a66 is out of bounds.


1a005a68 <__swbuf_r>:
1a005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005a6a:	460e      	mov	r6, r1
1a005a6c:	4614      	mov	r4, r2
1a005a6e:	4605      	mov	r5, r0
1a005a70:	b118      	cbz	r0, 1a005a7a <__swbuf_r+0x12>
1a005a72:	6983      	ldr	r3, [r0, #24]
1a005a74:	b90b      	cbnz	r3, 1a005a7a <__swbuf_r+0x12>
1a005a76:	f7ff fab7 	bl	1a004fe8 <__sinit>
1a005a7a:	4b21      	ldr	r3, [pc, #132]	; (1a005b00 <__swbuf_r+0x98>)
1a005a7c:	429c      	cmp	r4, r3
1a005a7e:	d12b      	bne.n	1a005ad8 <__swbuf_r+0x70>
1a005a80:	686c      	ldr	r4, [r5, #4]
1a005a82:	69a3      	ldr	r3, [r4, #24]
1a005a84:	60a3      	str	r3, [r4, #8]
1a005a86:	89a3      	ldrh	r3, [r4, #12]
1a005a88:	071a      	lsls	r2, r3, #28
1a005a8a:	d52f      	bpl.n	1a005aec <__swbuf_r+0x84>
1a005a8c:	6923      	ldr	r3, [r4, #16]
1a005a8e:	b36b      	cbz	r3, 1a005aec <__swbuf_r+0x84>
1a005a90:	6923      	ldr	r3, [r4, #16]
1a005a92:	6820      	ldr	r0, [r4, #0]
1a005a94:	1ac0      	subs	r0, r0, r3
1a005a96:	6963      	ldr	r3, [r4, #20]
1a005a98:	b2f6      	uxtb	r6, r6
1a005a9a:	4283      	cmp	r3, r0
1a005a9c:	4637      	mov	r7, r6
1a005a9e:	dc04      	bgt.n	1a005aaa <__swbuf_r+0x42>
1a005aa0:	4621      	mov	r1, r4
1a005aa2:	4628      	mov	r0, r5
1a005aa4:	f7ff fa0c 	bl	1a004ec0 <_fflush_r>
1a005aa8:	bb30      	cbnz	r0, 1a005af8 <__swbuf_r+0x90>
1a005aaa:	68a3      	ldr	r3, [r4, #8]
1a005aac:	3b01      	subs	r3, #1
1a005aae:	60a3      	str	r3, [r4, #8]
1a005ab0:	6823      	ldr	r3, [r4, #0]
1a005ab2:	1c5a      	adds	r2, r3, #1
1a005ab4:	6022      	str	r2, [r4, #0]
1a005ab6:	701e      	strb	r6, [r3, #0]
1a005ab8:	6963      	ldr	r3, [r4, #20]
1a005aba:	3001      	adds	r0, #1
1a005abc:	4283      	cmp	r3, r0
1a005abe:	d004      	beq.n	1a005aca <__swbuf_r+0x62>
1a005ac0:	89a3      	ldrh	r3, [r4, #12]
1a005ac2:	07db      	lsls	r3, r3, #31
1a005ac4:	d506      	bpl.n	1a005ad4 <__swbuf_r+0x6c>
1a005ac6:	2e0a      	cmp	r6, #10
1a005ac8:	d104      	bne.n	1a005ad4 <__swbuf_r+0x6c>
1a005aca:	4621      	mov	r1, r4
1a005acc:	4628      	mov	r0, r5
1a005ace:	f7ff f9f7 	bl	1a004ec0 <_fflush_r>
1a005ad2:	b988      	cbnz	r0, 1a005af8 <__swbuf_r+0x90>
1a005ad4:	4638      	mov	r0, r7
1a005ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005ad8:	4b0a      	ldr	r3, [pc, #40]	; (1a005b04 <__swbuf_r+0x9c>)
1a005ada:	429c      	cmp	r4, r3
1a005adc:	d101      	bne.n	1a005ae2 <__swbuf_r+0x7a>
1a005ade:	68ac      	ldr	r4, [r5, #8]
1a005ae0:	e7cf      	b.n	1a005a82 <__swbuf_r+0x1a>
1a005ae2:	4b09      	ldr	r3, [pc, #36]	; (1a005b08 <__swbuf_r+0xa0>)
1a005ae4:	429c      	cmp	r4, r3
1a005ae6:	bf08      	it	eq
1a005ae8:	68ec      	ldreq	r4, [r5, #12]
1a005aea:	e7ca      	b.n	1a005a82 <__swbuf_r+0x1a>
1a005aec:	4621      	mov	r1, r4
1a005aee:	4628      	mov	r0, r5
1a005af0:	f000 f80c 	bl	1a005b0c <__swsetup_r>
1a005af4:	2800      	cmp	r0, #0
1a005af6:	d0cb      	beq.n	1a005a90 <__swbuf_r+0x28>
1a005af8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a005afc:	e7ea      	b.n	1a005ad4 <__swbuf_r+0x6c>
1a005afe:	bf00      	nop
1a005b00:	1a006398 	.word	0x1a006398
1a005b04:	1a0063b8 	.word	0x1a0063b8
1a005b08:	1a006378 	.word	0x1a006378

1a005b0c <__swsetup_r>:
1a005b0c:	4b32      	ldr	r3, [pc, #200]	; (1a005bd8 <__swsetup_r+0xcc>)
1a005b0e:	b570      	push	{r4, r5, r6, lr}
1a005b10:	681d      	ldr	r5, [r3, #0]
1a005b12:	4606      	mov	r6, r0
1a005b14:	460c      	mov	r4, r1
1a005b16:	b125      	cbz	r5, 1a005b22 <__swsetup_r+0x16>
1a005b18:	69ab      	ldr	r3, [r5, #24]
1a005b1a:	b913      	cbnz	r3, 1a005b22 <__swsetup_r+0x16>
1a005b1c:	4628      	mov	r0, r5
1a005b1e:	f7ff fa63 	bl	1a004fe8 <__sinit>
1a005b22:	4b2e      	ldr	r3, [pc, #184]	; (1a005bdc <__swsetup_r+0xd0>)
1a005b24:	429c      	cmp	r4, r3
1a005b26:	d10f      	bne.n	1a005b48 <__swsetup_r+0x3c>
1a005b28:	686c      	ldr	r4, [r5, #4]
1a005b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005b2e:	b29a      	uxth	r2, r3
1a005b30:	0715      	lsls	r5, r2, #28
1a005b32:	d42c      	bmi.n	1a005b8e <__swsetup_r+0x82>
1a005b34:	06d0      	lsls	r0, r2, #27
1a005b36:	d411      	bmi.n	1a005b5c <__swsetup_r+0x50>
1a005b38:	2209      	movs	r2, #9
1a005b3a:	6032      	str	r2, [r6, #0]
1a005b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005b40:	81a3      	strh	r3, [r4, #12]
1a005b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005b46:	e03e      	b.n	1a005bc6 <__swsetup_r+0xba>
1a005b48:	4b25      	ldr	r3, [pc, #148]	; (1a005be0 <__swsetup_r+0xd4>)
1a005b4a:	429c      	cmp	r4, r3
1a005b4c:	d101      	bne.n	1a005b52 <__swsetup_r+0x46>
1a005b4e:	68ac      	ldr	r4, [r5, #8]
1a005b50:	e7eb      	b.n	1a005b2a <__swsetup_r+0x1e>
1a005b52:	4b24      	ldr	r3, [pc, #144]	; (1a005be4 <__swsetup_r+0xd8>)
1a005b54:	429c      	cmp	r4, r3
1a005b56:	bf08      	it	eq
1a005b58:	68ec      	ldreq	r4, [r5, #12]
1a005b5a:	e7e6      	b.n	1a005b2a <__swsetup_r+0x1e>
1a005b5c:	0751      	lsls	r1, r2, #29
1a005b5e:	d512      	bpl.n	1a005b86 <__swsetup_r+0x7a>
1a005b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a005b62:	b141      	cbz	r1, 1a005b76 <__swsetup_r+0x6a>
1a005b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a005b68:	4299      	cmp	r1, r3
1a005b6a:	d002      	beq.n	1a005b72 <__swsetup_r+0x66>
1a005b6c:	4630      	mov	r0, r6
1a005b6e:	f7ff fb15 	bl	1a00519c <_free_r>
1a005b72:	2300      	movs	r3, #0
1a005b74:	6363      	str	r3, [r4, #52]	; 0x34
1a005b76:	89a3      	ldrh	r3, [r4, #12]
1a005b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a005b7c:	81a3      	strh	r3, [r4, #12]
1a005b7e:	2300      	movs	r3, #0
1a005b80:	6063      	str	r3, [r4, #4]
1a005b82:	6923      	ldr	r3, [r4, #16]
1a005b84:	6023      	str	r3, [r4, #0]
1a005b86:	89a3      	ldrh	r3, [r4, #12]
1a005b88:	f043 0308 	orr.w	r3, r3, #8
1a005b8c:	81a3      	strh	r3, [r4, #12]
1a005b8e:	6923      	ldr	r3, [r4, #16]
1a005b90:	b94b      	cbnz	r3, 1a005ba6 <__swsetup_r+0x9a>
1a005b92:	89a3      	ldrh	r3, [r4, #12]
1a005b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a005b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a005b9c:	d003      	beq.n	1a005ba6 <__swsetup_r+0x9a>
1a005b9e:	4621      	mov	r1, r4
1a005ba0:	4630      	mov	r0, r6
1a005ba2:	f000 f845 	bl	1a005c30 <__smakebuf_r>
1a005ba6:	89a2      	ldrh	r2, [r4, #12]
1a005ba8:	f012 0301 	ands.w	r3, r2, #1
1a005bac:	d00c      	beq.n	1a005bc8 <__swsetup_r+0xbc>
1a005bae:	2300      	movs	r3, #0
1a005bb0:	60a3      	str	r3, [r4, #8]
1a005bb2:	6963      	ldr	r3, [r4, #20]
1a005bb4:	425b      	negs	r3, r3
1a005bb6:	61a3      	str	r3, [r4, #24]
1a005bb8:	6923      	ldr	r3, [r4, #16]
1a005bba:	b953      	cbnz	r3, 1a005bd2 <__swsetup_r+0xc6>
1a005bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005bc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a005bc4:	d1ba      	bne.n	1a005b3c <__swsetup_r+0x30>
1a005bc6:	bd70      	pop	{r4, r5, r6, pc}
1a005bc8:	0792      	lsls	r2, r2, #30
1a005bca:	bf58      	it	pl
1a005bcc:	6963      	ldrpl	r3, [r4, #20]
1a005bce:	60a3      	str	r3, [r4, #8]
1a005bd0:	e7f2      	b.n	1a005bb8 <__swsetup_r+0xac>
1a005bd2:	2000      	movs	r0, #0
1a005bd4:	e7f7      	b.n	1a005bc6 <__swsetup_r+0xba>
1a005bd6:	bf00      	nop
1a005bd8:	100000e4 	.word	0x100000e4
1a005bdc:	1a006398 	.word	0x1a006398
1a005be0:	1a0063b8 	.word	0x1a0063b8
1a005be4:	1a006378 	.word	0x1a006378

1a005be8 <__swhatbuf_r>:
1a005be8:	b570      	push	{r4, r5, r6, lr}
1a005bea:	460e      	mov	r6, r1
1a005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005bf0:	2900      	cmp	r1, #0
1a005bf2:	b096      	sub	sp, #88	; 0x58
1a005bf4:	4614      	mov	r4, r2
1a005bf6:	461d      	mov	r5, r3
1a005bf8:	da07      	bge.n	1a005c0a <__swhatbuf_r+0x22>
1a005bfa:	2300      	movs	r3, #0
1a005bfc:	602b      	str	r3, [r5, #0]
1a005bfe:	89b3      	ldrh	r3, [r6, #12]
1a005c00:	061a      	lsls	r2, r3, #24
1a005c02:	d410      	bmi.n	1a005c26 <__swhatbuf_r+0x3e>
1a005c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a005c08:	e00e      	b.n	1a005c28 <__swhatbuf_r+0x40>
1a005c0a:	466a      	mov	r2, sp
1a005c0c:	f7fb f8d5 	bl	1a000dba <_fstat_r>
1a005c10:	2800      	cmp	r0, #0
1a005c12:	dbf2      	blt.n	1a005bfa <__swhatbuf_r+0x12>
1a005c14:	9a01      	ldr	r2, [sp, #4]
1a005c16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a005c1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a005c1e:	425a      	negs	r2, r3
1a005c20:	415a      	adcs	r2, r3
1a005c22:	602a      	str	r2, [r5, #0]
1a005c24:	e7ee      	b.n	1a005c04 <__swhatbuf_r+0x1c>
1a005c26:	2340      	movs	r3, #64	; 0x40
1a005c28:	2000      	movs	r0, #0
1a005c2a:	6023      	str	r3, [r4, #0]
1a005c2c:	b016      	add	sp, #88	; 0x58
1a005c2e:	bd70      	pop	{r4, r5, r6, pc}

1a005c30 <__smakebuf_r>:
1a005c30:	898b      	ldrh	r3, [r1, #12]
1a005c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a005c34:	079d      	lsls	r5, r3, #30
1a005c36:	4606      	mov	r6, r0
1a005c38:	460c      	mov	r4, r1
1a005c3a:	d507      	bpl.n	1a005c4c <__smakebuf_r+0x1c>
1a005c3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a005c40:	6023      	str	r3, [r4, #0]
1a005c42:	6123      	str	r3, [r4, #16]
1a005c44:	2301      	movs	r3, #1
1a005c46:	6163      	str	r3, [r4, #20]
1a005c48:	b002      	add	sp, #8
1a005c4a:	bd70      	pop	{r4, r5, r6, pc}
1a005c4c:	ab01      	add	r3, sp, #4
1a005c4e:	466a      	mov	r2, sp
1a005c50:	f7ff ffca 	bl	1a005be8 <__swhatbuf_r>
1a005c54:	9900      	ldr	r1, [sp, #0]
1a005c56:	4605      	mov	r5, r0
1a005c58:	4630      	mov	r0, r6
1a005c5a:	f7ff faed 	bl	1a005238 <_malloc_r>
1a005c5e:	b948      	cbnz	r0, 1a005c74 <__smakebuf_r+0x44>
1a005c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005c64:	059a      	lsls	r2, r3, #22
1a005c66:	d4ef      	bmi.n	1a005c48 <__smakebuf_r+0x18>
1a005c68:	f023 0303 	bic.w	r3, r3, #3
1a005c6c:	f043 0302 	orr.w	r3, r3, #2
1a005c70:	81a3      	strh	r3, [r4, #12]
1a005c72:	e7e3      	b.n	1a005c3c <__smakebuf_r+0xc>
1a005c74:	4b0d      	ldr	r3, [pc, #52]	; (1a005cac <__smakebuf_r+0x7c>)
1a005c76:	62b3      	str	r3, [r6, #40]	; 0x28
1a005c78:	89a3      	ldrh	r3, [r4, #12]
1a005c7a:	6020      	str	r0, [r4, #0]
1a005c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005c80:	81a3      	strh	r3, [r4, #12]
1a005c82:	9b00      	ldr	r3, [sp, #0]
1a005c84:	6163      	str	r3, [r4, #20]
1a005c86:	9b01      	ldr	r3, [sp, #4]
1a005c88:	6120      	str	r0, [r4, #16]
1a005c8a:	b15b      	cbz	r3, 1a005ca4 <__smakebuf_r+0x74>
1a005c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005c90:	4630      	mov	r0, r6
1a005c92:	f7fb f897 	bl	1a000dc4 <_isatty_r>
1a005c96:	b128      	cbz	r0, 1a005ca4 <__smakebuf_r+0x74>
1a005c98:	89a3      	ldrh	r3, [r4, #12]
1a005c9a:	f023 0303 	bic.w	r3, r3, #3
1a005c9e:	f043 0301 	orr.w	r3, r3, #1
1a005ca2:	81a3      	strh	r3, [r4, #12]
1a005ca4:	89a3      	ldrh	r3, [r4, #12]
1a005ca6:	431d      	orrs	r5, r3
1a005ca8:	81a5      	strh	r5, [r4, #12]
1a005caa:	e7cd      	b.n	1a005c48 <__smakebuf_r+0x18>
1a005cac:	1a004f81 	.word	0x1a004f81

1a005cb0 <memchr>:
1a005cb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005cb4:	2a10      	cmp	r2, #16
1a005cb6:	db2b      	blt.n	1a005d10 <memchr+0x60>
1a005cb8:	f010 0f07 	tst.w	r0, #7
1a005cbc:	d008      	beq.n	1a005cd0 <memchr+0x20>
1a005cbe:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005cc2:	3a01      	subs	r2, #1
1a005cc4:	428b      	cmp	r3, r1
1a005cc6:	d02d      	beq.n	1a005d24 <memchr+0x74>
1a005cc8:	f010 0f07 	tst.w	r0, #7
1a005ccc:	b342      	cbz	r2, 1a005d20 <memchr+0x70>
1a005cce:	d1f6      	bne.n	1a005cbe <memchr+0xe>
1a005cd0:	b4f0      	push	{r4, r5, r6, r7}
1a005cd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005cd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a005cda:	f022 0407 	bic.w	r4, r2, #7
1a005cde:	f07f 0700 	mvns.w	r7, #0
1a005ce2:	2300      	movs	r3, #0
1a005ce4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005ce8:	3c08      	subs	r4, #8
1a005cea:	ea85 0501 	eor.w	r5, r5, r1
1a005cee:	ea86 0601 	eor.w	r6, r6, r1
1a005cf2:	fa85 f547 	uadd8	r5, r5, r7
1a005cf6:	faa3 f587 	sel	r5, r3, r7
1a005cfa:	fa86 f647 	uadd8	r6, r6, r7
1a005cfe:	faa5 f687 	sel	r6, r5, r7
1a005d02:	b98e      	cbnz	r6, 1a005d28 <memchr+0x78>
1a005d04:	d1ee      	bne.n	1a005ce4 <memchr+0x34>
1a005d06:	bcf0      	pop	{r4, r5, r6, r7}
1a005d08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005d0c:	f002 0207 	and.w	r2, r2, #7
1a005d10:	b132      	cbz	r2, 1a005d20 <memchr+0x70>
1a005d12:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005d16:	3a01      	subs	r2, #1
1a005d18:	ea83 0301 	eor.w	r3, r3, r1
1a005d1c:	b113      	cbz	r3, 1a005d24 <memchr+0x74>
1a005d1e:	d1f8      	bne.n	1a005d12 <memchr+0x62>
1a005d20:	2000      	movs	r0, #0
1a005d22:	4770      	bx	lr
1a005d24:	3801      	subs	r0, #1
1a005d26:	4770      	bx	lr
1a005d28:	2d00      	cmp	r5, #0
1a005d2a:	bf06      	itte	eq
1a005d2c:	4635      	moveq	r5, r6
1a005d2e:	3803      	subeq	r0, #3
1a005d30:	3807      	subne	r0, #7
1a005d32:	f015 0f01 	tst.w	r5, #1
1a005d36:	d107      	bne.n	1a005d48 <memchr+0x98>
1a005d38:	3001      	adds	r0, #1
1a005d3a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a005d3e:	bf02      	ittt	eq
1a005d40:	3001      	addeq	r0, #1
1a005d42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005d46:	3001      	addeq	r0, #1
1a005d48:	bcf0      	pop	{r4, r5, r6, r7}
1a005d4a:	3801      	subs	r0, #1
1a005d4c:	4770      	bx	lr
1a005d4e:	bf00      	nop

1a005d50 <__malloc_lock>:
1a005d50:	4801      	ldr	r0, [pc, #4]	; (1a005d58 <__malloc_lock+0x8>)
1a005d52:	f7ff ba0a 	b.w	1a00516a <__retarget_lock_acquire_recursive>
1a005d56:	bf00      	nop
1a005d58:	10002c5c 	.word	0x10002c5c

1a005d5c <__malloc_unlock>:
1a005d5c:	4801      	ldr	r0, [pc, #4]	; (1a005d64 <__malloc_unlock+0x8>)
1a005d5e:	f7ff ba05 	b.w	1a00516c <__retarget_lock_release_recursive>
1a005d62:	bf00      	nop
1a005d64:	10002c5c 	.word	0x10002c5c
1a005d68:	432b5441 	.word	0x432b5441
1a005d6c:	54544147 	.word	0x54544147
1a005d70:	000a0d3f 	.word	0x000a0d3f
1a005d74:	432b5441 	.word	0x432b5441
1a005d78:	3d46474d 	.word	0x3d46474d
1a005d7c:	000a0d31 	.word	0x000a0d31
1a005d80:	0a0d5441 	.word	0x0a0d5441
1a005d84:	00000000 	.word	0x00000000
1a005d88:	0a0d4b4f 	.word	0x0a0d4b4f
1a005d8c:	ffffff00 	.word	0xffffff00
1a005d90:	74736953 	.word	0x74736953
1a005d94:	20616d65 	.word	0x20616d65
1a005d98:	69746361 	.word	0x69746361
1a005d9c:	6f646176 	.word	0x6f646176
1a005da0:	ffff000d 	.word	0xffff000d
1a005da4:	75646f4d 	.word	0x75646f4d
1a005da8:	66206f6c 	.word	0x66206f6c
1a005dac:	69636e75 	.word	0x69636e75
1a005db0:	20616e6f 	.word	0x20616e6f
1a005db4:	72726f63 	.word	0x72726f63
1a005db8:	61746365 	.word	0x61746365
1a005dbc:	746e656d 	.word	0x746e656d
1a005dc0:	00000d65 	.word	0x00000d65
1a005dc4:	75646f4d 	.word	0x75646f4d
1a005dc8:	61206f6c 	.word	0x61206f6c
1a005dcc:	6e203967 	.word	0x6e203967
1a005dd0:	7566206f 	.word	0x7566206f
1a005dd4:	6f69636e 	.word	0x6f69636e
1a005dd8:	000d616e 	.word	0x000d616e
1a005ddc:	75646f4d 	.word	0x75646f4d
1a005de0:	74206f6c 	.word	0x74206f6c
1a005de4:	6f747865 	.word	0x6f747865
1a005de8:	74636120 	.word	0x74636120
1a005dec:	64617669 	.word	0x64617669
1a005df0:	6f63206f 	.word	0x6f63206f
1a005df4:	63657272 	.word	0x63657272
1a005df8:	656d6174 	.word	0x656d6174
1a005dfc:	0d65746e 	.word	0x0d65746e
1a005e00:	00000000 	.word	0x00000000
1a005e04:	6f646f4d 	.word	0x6f646f4d
1a005e08:	78657420 	.word	0x78657420
1a005e0c:	6e206f74 	.word	0x6e206f74
1a005e10:	6361206f 	.word	0x6361206f
1a005e14:	61766974 	.word	0x61766974
1a005e18:	000d6f64 	.word	0x000d6f64
1a005e1c:	75646f4d 	.word	0x75646f4d
1a005e20:	61206f6c 	.word	0x61206f6c
1a005e24:	68636174 	.word	0x68636174
1a005e28:	206f6461 	.word	0x206f6461
1a005e2c:	616c2061 	.word	0x616c2061
1a005e30:	64657220 	.word	0x64657220
1a005e34:	0000000d 	.word	0x0000000d
1a005e38:	75646f4d 	.word	0x75646f4d
1a005e3c:	61206f6c 	.word	0x61206f6c
1a005e40:	6e203966 	.word	0x6e203966
1a005e44:	7365206f 	.word	0x7365206f
1a005e48:	61206174 	.word	0x61206174
1a005e4c:	68636174 	.word	0x68636174
1a005e50:	206f6461 	.word	0x206f6461
1a005e54:	616c2061 	.word	0x616c2061
1a005e58:	64657220 	.word	0x64657220
1a005e5c:	ffff000d 	.word	0xffff000d
1a005e60:	73206f4e 	.word	0x73206f4e
1a005e64:	72632065 	.word	0x72632065
1a005e68:	6f726165 	.word	0x6f726165
1a005e6c:	7571206e 	.word	0x7571206e
1a005e70:	20657565 	.word	0x20657565
1a005e74:	61726170 	.word	0x61726170
1a005e78:	63657420 	.word	0x63657420
1a005e7c:	0d73616c 	.word	0x0d73616c
1a005e80:	00000000 	.word	0x00000000
1a005e84:	6c636574 	.word	0x6c636574
1a005e88:	61745f61 	.word	0x61745f61
1a005e8c:	00006b73 	.word	0x00006b73
1a005e90:	65726154 	.word	0x65726154
1a005e94:	45542061 	.word	0x45542061
1a005e98:	20642543 	.word	0x20642543
1a005e9c:	65726320 	.word	0x65726320
1a005ea0:	0d616461 	.word	0x0d616461
1a005ea4:	0000000a 	.word	0x0000000a
1a005ea8:	5f64656c 	.word	0x5f64656c
1a005eac:	6b736174 	.word	0x6b736174
1a005eb0:	00000000 	.word	0x00000000
1a005eb4:	65726154 	.word	0x65726154
1a005eb8:	656c2061 	.word	0x656c2061
1a005ebc:	72632064 	.word	0x72632064
1a005ec0:	61646165 	.word	0x61646165
1a005ec4:	0000000d 	.word	0x0000000d
1a005ec8:	74737973 	.word	0x74737973
1a005ecc:	745f6d65 	.word	0x745f6d65
1a005ed0:	006b7361 	.word	0x006b7361
1a005ed4:	65726154 	.word	0x65726154
1a005ed8:	79732061 	.word	0x79732061
1a005edc:	6d657473 	.word	0x6d657473
1a005ee0:	65726320 	.word	0x65726320
1a005ee4:	0d616461 	.word	0x0d616461
1a005ee8:	00000000 	.word	0x00000000
1a005eec:	5f64636c 	.word	0x5f64636c
1a005ef0:	6b736174 	.word	0x6b736174
1a005ef4:	00000000 	.word	0x00000000
1a005ef8:	65726154 	.word	0x65726154
1a005efc:	636c2061 	.word	0x636c2061
1a005f00:	72632064 	.word	0x72632064
1a005f04:	61646165 	.word	0x61646165
1a005f08:	0000000d 	.word	0x0000000d
1a005f0c:	6f727245 	.word	0x6f727245
1a005f10:	6c612072 	.word	0x6c612072
1a005f14:	65726320 	.word	0x65726320
1a005f18:	71207261 	.word	0x71207261
1a005f1c:	65756575 	.word	0x65756575
1a005f20:	44434c20 	.word	0x44434c20
1a005f24:	0000000d 	.word	0x0000000d
1a005f28:	6f727245 	.word	0x6f727245
1a005f2c:	6c612072 	.word	0x6c612072
1a005f30:	65726320 	.word	0x65726320
1a005f34:	71207261 	.word	0x71207261
1a005f38:	65756575 	.word	0x65756575
1a005f3c:	64656c20 	.word	0x64656c20
1a005f40:	0000000d 	.word	0x0000000d
1a005f44:	6f727245 	.word	0x6f727245
1a005f48:	6c612072 	.word	0x6c612072
1a005f4c:	65726320 	.word	0x65726320
1a005f50:	73207261 	.word	0x73207261
1a005f54:	66616d65 	.word	0x66616d65
1a005f58:	206f726f 	.word	0x206f726f
1a005f5c:	0d64656c 	.word	0x0d64656c
1a005f60:	00000000 	.word	0x00000000
1a005f64:	6f727245 	.word	0x6f727245
1a005f68:	6c612072 	.word	0x6c612072
1a005f6c:	65726320 	.word	0x65726320
1a005f70:	6d207261 	.word	0x6d207261
1a005f74:	78657475 	.word	0x78657475
1a005f78:	ffff000d 	.word	0xffff000d
1a005f7c:	74736953 	.word	0x74736953
1a005f80:	20616d65 	.word	0x20616d65
1a005f84:	63696e69 	.word	0x63696e69
1a005f88:	6f646169 	.word	0x6f646169
1a005f8c:	ffff000d 	.word	0xffff000d
1a005f90:	65636361 	.word	0x65636361
1a005f94:	00206f73 	.word	0x00206f73
1a005f98:	63206c45 	.word	0x63206c45
1a005f9c:	6769646f 	.word	0x6769646f
1a005fa0:	6564206f 	.word	0x6564206f
1a005fa4:	63636120 	.word	0x63636120
1a005fa8:	206f7365 	.word	0x206f7365
1a005fac:	25207365 	.word	0x25207365
1a005fb0:	53202e73 	.word	0x53202e73
1a005fb4:	65747369 	.word	0x65747369
1a005fb8:	2520616d 	.word	0x2520616d
1a005fbc:	000a0d73 	.word	0x000a0d73
1a005fc0:	63206553 	.word	0x63206553
1a005fc4:	75747061 	.word	0x75747061
1a005fc8:	75206f72 	.word	0x75206f72
1a005fcc:	7020616e 	.word	0x7020616e
1a005fd0:	61736c75 	.word	0x61736c75
1a005fd4:	6e6f6963 	.word	0x6e6f6963
1a005fd8:	0000000d 	.word	0x0000000d
1a005fdc:	7463654c 	.word	0x7463654c
1a005fe0:	20617275 	.word	0x20617275
1a005fe4:	706d6f63 	.word	0x706d6f63
1a005fe8:	6174656c 	.word	0x6174656c
1a005fec:	65206164 	.word	0x65206164
1a005ff0:	616c206e 	.word	0x616c206e
1a005ff4:	63657420 	.word	0x63657420
1a005ff8:	2520616c 	.word	0x2520616c
1a005ffc:	000a0d64 	.word	0x000a0d64
1a006000:	6c707041 	.word	0x6c707041
1a006004:	74616369 	.word	0x74616369
1a006008:	206e6f69 	.word	0x206e6f69
1a00600c:	6c6c614d 	.word	0x6c6c614d
1a006010:	4620636f 	.word	0x4620636f
1a006014:	656c6961 	.word	0x656c6961
1a006018:	6f482064 	.word	0x6f482064
1a00601c:	0d216b6f 	.word	0x0d216b6f
1a006020:	00000000 	.word	0x00000000
1a006024:	7362696c 	.word	0x7362696c
1a006028:	6572662f 	.word	0x6572662f
1a00602c:	6f747265 	.word	0x6f747265
1a006030:	6f732f73 	.word	0x6f732f73
1a006034:	65637275 	.word	0x65637275
1a006038:	6f6f682f 	.word	0x6f6f682f
1a00603c:	632e736b 	.word	0x632e736b
1a006040:	ffffff00 	.word	0xffffff00
1a006044:	70410a0d 	.word	0x70410a0d
1a006048:	63696c70 	.word	0x63696c70
1a00604c:	6f697461 	.word	0x6f697461
1a006050:	7453206e 	.word	0x7453206e
1a006054:	206b6361 	.word	0x206b6361
1a006058:	7265764f 	.word	0x7265764f
1a00605c:	776f6c66 	.word	0x776f6c66
1a006060:	6f202121 	.word	0x6f202121
1a006064:	6154206e 	.word	0x6154206e
1a006068:	203a6b73 	.word	0x203a6b73
1a00606c:	0a0d7325 	.word	0x0a0d7325
1a006070:	ffffff00 	.word	0xffffff00
1a006074:	41760a0d 	.word	0x41760a0d
1a006078:	72657373 	.word	0x72657373
1a00607c:	6c614374 	.word	0x6c614374
1a006080:	2864656c 	.word	0x2864656c
1a006084:	200a0d29 	.word	0x200a0d29
1a006088:	4c4c2020 	.word	0x4c4c2020
1a00608c:	20656e69 	.word	0x20656e69
1a006090:	626d754e 	.word	0x626d754e
1a006094:	3d207265 	.word	0x3d207265
1a006098:	0d642520 	.word	0x0d642520
1a00609c:	2020200a 	.word	0x2020200a
1a0060a0:	656c6946 	.word	0x656c6946
1a0060a4:	6d614e20 	.word	0x6d614e20
1a0060a8:	203d2065 	.word	0x203d2065
1a0060ac:	0a0d7325 	.word	0x0a0d7325
1a0060b0:	ff000a0d 	.word	0xff000a0d
1a0060b4:	454c4449 	.word	0x454c4449
1a0060b8:	ffffff00 	.word	0xffffff00
1a0060bc:	51726d54 	.word	0x51726d54
1a0060c0:	ffffff00 	.word	0xffffff00
1a0060c4:	20726d54 	.word	0x20726d54
1a0060c8:	00637653 	.word	0x00637653

1a0060cc <ExtRateIn>:
1a0060cc:	00000000                                ....

1a0060d0 <GpioButtons>:
1a0060d0:	08000400 09010900                       ........

1a0060d8 <GpioLeds>:
1a0060d8:	01050005 0e000205 0c010b01              ............

1a0060e4 <GpioPorts>:
1a0060e4:	03030003 0f050403 05031005 07030603     ................
1a0060f4:	ffff0802                                ....

1a0060f8 <OscRateIn>:
1a0060f8:	00b71b00                                ....

1a0060fc <InitClkStates>:
1a0060fc:	01010f01                                ....

1a006100 <pinmuxing>:
1a006100:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a006110:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a006120:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a006130:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a006140:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a006150:	00d50301 00d50401 00160107 00560207     ..............V.
1a006160:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a006170:	00570206                                ..W.

1a006174 <UART_BClock>:
1a006174:	01a201c2 01620182                       ......b.

1a00617c <UART_PClock>:
1a00617c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00618c:	000000ff                                ....

1a006190 <periph_to_base>:
1a006190:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0061a0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0061b0:	000100e0 01000100 01200003 00060120     .......... . ...
1a0061c0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0061d0:	01820013 00120182 01a201a2 01c20011     ................
1a0061e0:	001001c2 01e201e2 0202000f 000e0202     ................
1a0061f0:	02220222 0223000d 001c0223              "."...#.#...

1a0061fc <InitClkStates>:
1a0061fc:	00010100 00010909 0001090a 01010701     ................
1a00620c:	00010902 00010906 0101090c 0001090d     ................
1a00621c:	0001090e 0001090f 00010910 00010911     ................
1a00622c:	00010912 00010913 00011114 00011119     ................
1a00623c:	0001111a 0001111b                       ........

1a006244 <lpcUarts>:
1a006244:	40081000 06020406 00180205 40081000     ...@...........@
1a006254:	09070509 00180706 40082000 00000000     ......... .@....
1a006264:	00190000 400c1000 07060107 001a0602     .......@........
1a006274:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a006284:	02020302 001b0204                       ........

1a00628c <gpioPinsInit>:
1a00628c:	02000104 00050701 05010d03 04080100     ................
1a00629c:	02020002 02000304 00000403 04070002     ................
1a0062ac:	030c0300 09050402 05040103 04030208     ................
1a0062bc:	04020305 06040504 0802000c 03000b06     ................
1a0062cc:	00090607 07060503 060f0504 03030004     ................
1a0062dc:	02000404 00050404 06040502 04060200     ................
1a0062ec:	0c050408 05040a04 0003010e 14010a00     ................
1a0062fc:	010f0000 0d000012 00001101 0010010c     ................
1a00630c:	07070300 000f0300 01000001 00000000     ................
1a00631c:	000a0600 08060603 06100504 04030005     ................
1a00632c:	03000106 04090400 04010d05 010b0000     ................
1a00633c:	0200000f 00000001 00010104 02010800     ................
1a00634c:	01090000 09010006 05040002 04010200     ................
1a00635c:	02020105 02020504 0e00000a 01000b02     ................
1a00636c:	000c020b ffff0c01 d494c080              ............

1a006378 <__sf_fake_stderr>:
	...

1a006398 <__sf_fake_stdin>:
	...

1a0063b8 <__sf_fake_stdout>:
	...

1a0063d8 <_global_impure_ptr>:
1a0063d8:	100000e8 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a0063e8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a0063f8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a006408:	64636261 ff006665                       abcdef..
